{"version":3,"file":"spartacus-cdc-core.mjs","sources":["../../../integration-libs/cdc/core/auth/services/user-authentication/cdc-user-authentication-token.service.ts","../../../integration-libs/cdc/core/auth/cdc-auth.module.ts","../../../integration-libs/cdc/core/store/actions/cdc-user-token.action.ts","../../../integration-libs/cdc/core/store/actions/index.ts","../../../integration-libs/cdc/core/auth/facade/cdc-auth.service.ts","../../../integration-libs/cdc/core/auth/facade/index.ts","../../../integration-libs/cdc/core/auth/services/user-authentication/index.ts","../../../integration-libs/cdc/core/auth/services/index.ts","../../../integration-libs/cdc/core/auth/index.ts","../../../integration-libs/cdc/core/auth/facade/facade-providers.ts","../../../integration-libs/cdc/core/events/cdc-event.builder.ts","../../../integration-libs/cdc/core/events/cdc-event.module.ts","../../../integration-libs/cdc/core/store/effects/cdc-user-addresses.effect.ts","../../../integration-libs/cdc/core/store/effects/cdc-user-token.effect.ts","../../../integration-libs/cdc/core/store/effects/index.ts","../../../integration-libs/cdc/core/store/cdc-store.module.ts","../../../integration-libs/cdc/core/cdc-core.module.ts","../../../integration-libs/cdc/core/events/index.ts","../../../integration-libs/cdc/core/models/cms.model.ts","../../../integration-libs/cdc/core/public_api.ts","../../../integration-libs/cdc/core/spartacus-cdc-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthConfigService, AuthToken } from '@spartacus/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class CdcUserAuthenticationTokenService {\n  constructor(\n    protected http: HttpClient,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  /**\n   * Load User token using custom oauth flow\n   *\n   * @param UID - UID received from CDC on login event\n   * @param UIDSignature - UIDSignature received from CDC on login event\n   * @param signatureTimestamp - signatureTimestamp received from CDC on login event\n   * @param idToken - idToken received from CDC on login event\n   * @param baseSite - baseSite received from CDC on login event\n   */\n  loadTokenUsingCustomFlow(\n    UID: string,\n    UIDSignature: string,\n    signatureTimestamp: string,\n    idToken: string,\n    baseSite: string\n  ): Observable<Partial<AuthToken> & { expires_in?: number }> {\n    const url = this.authConfigService.getTokenEndpoint();\n    const params = new HttpParams()\n      .set('client_id', this.authConfigService.getClientId())\n      .set('client_secret', this.authConfigService.getClientSecret())\n      .set('grant_type', 'custom')\n      .set('UID', encodeURIComponent(UID))\n      .set('UIDSignature', encodeURIComponent(UIDSignature))\n      .set('signatureTimestamp', encodeURIComponent(signatureTimestamp))\n      .set('id_token', encodeURIComponent(idToken))\n      .set('baseSite', encodeURIComponent(baseSite));\n\n    return this.http\n      .post<Partial<AuthToken> & { expires_in?: number }>(url, params)\n      .pipe(catchError((error: any) => throwError(error)));\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthModule } from '@spartacus/core';\nimport { CdcUserAuthenticationTokenService } from './services/user-authentication/cdc-user-authentication-token.service';\n\n@NgModule({\n  imports: [CommonModule, AuthModule],\n  providers: [CdcUserAuthenticationTokenService],\n})\nexport class CdcAuthModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Action } from '@ngrx/store';\nimport { ErrorModel, HttpErrorModel } from '@spartacus/core';\n\nexport const LOAD_CDC_USER_TOKEN = '[Auth] Load CDC User Token';\nexport const LOAD_CDC_USER_TOKEN_FAIL = '[Auth] Load CDC User Token Fail';\n\ninterface LoadUserTokenPayload {\n  UID: string;\n  UIDSignature: string;\n  signatureTimestamp: string;\n  idToken: string;\n  baseSite: string;\n}\n\ninterface LoadUserTokenFailurePayload {\n  error: ErrorModel | HttpErrorModel | any;\n  initialActionPayload: LoadUserTokenPayload;\n}\n\nexport class LoadCdcUserTokenFail implements Action {\n  readonly type = LOAD_CDC_USER_TOKEN_FAIL;\n  constructor(public payload: LoadUserTokenFailurePayload) {}\n}\n\nexport class LoadCdcUserToken implements Action {\n  readonly type = LOAD_CDC_USER_TOKEN;\n  constructor(public payload: LoadUserTokenPayload) {}\n}\n\nexport type CdcUserTokenAction = LoadCdcUserToken | LoadCdcUserTokenFail;\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as CdcAuthActions from './cdc-user-token.action';\nexport { CdcAuthActions };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AsmAuthStorageService, TokenTarget } from '@spartacus/asm/root';\nimport { CdcAuthFacade } from '@spartacus/cdc/root';\nimport {\n  AuthActions,\n  AuthRedirectService,\n  AuthStorageService,\n  AuthToken,\n  GlobalMessageService,\n  GlobalMessageType,\n  OCC_USER_ID_CURRENT,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, of } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { CdcAuthActions } from '../../store/actions';\n\n/**\n * Service to support custom CDC OAuth flow.\n */\n@Injectable()\nexport class CdcAuthService implements CdcAuthFacade {\n  constructor(\n    protected store: Store,\n    protected authStorageService: AuthStorageService,\n    protected userIdService: UserIdService,\n    protected globalMessageService: GlobalMessageService,\n    protected authRedirectService: AuthRedirectService\n  ) {}\n\n  /**\n   * Loads a new user token using custom oauth flow\n   *\n   * @param UID\n   * @param UIDSignature\n   * @param signatureTimestamp\n   * @param idToken\n   * @param baseSite\n   */\n  loginWithCustomCdcFlow(\n    UID: string,\n    UIDSignature: string,\n    signatureTimestamp: string,\n    idToken: string,\n    baseSite: string\n  ): void {\n    this.store.dispatch(\n      new CdcAuthActions.LoadCdcUserToken({\n        UID: UID,\n        UIDSignature: UIDSignature,\n        signatureTimestamp: signatureTimestamp,\n        idToken: idToken,\n        baseSite: baseSite,\n      })\n    );\n  }\n\n  /**\n   * Utility to differentiate between AuthStorageService and AsmAuthStorageService\n   */\n  private isAsmAuthStorageService(\n    service: AuthStorageService | AsmAuthStorageService\n  ): service is AsmAuthStorageService {\n    return 'getTokenTarget' in service;\n  }\n\n  /**\n   * Transform and store the token received from custom flow to library format and login user.\n   *\n   * @param token\n   */\n  loginWithToken(token: Partial<AuthToken> & { expires_in?: number }): void {\n    let stream$ = of(true);\n    if (this.isAsmAuthStorageService(this.authStorageService)) {\n      stream$ = combineLatest([\n        this.authStorageService.getToken(),\n        this.authStorageService.getTokenTarget(),\n      ]).pipe(\n        take(1),\n        map(([currentToken, tokenTarget]) => {\n          return (\n            !!currentToken?.access_token && tokenTarget === TokenTarget.CSAgent\n          );\n        }),\n        tap((isAsmAgentLoggedIn) => {\n          if (isAsmAgentLoggedIn) {\n            this.globalMessageService.add(\n              {\n                key: 'asm.auth.agentLoggedInError',\n              },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        }),\n        map((isAsmAgentLoggedIn) => !isAsmAgentLoggedIn)\n      );\n    }\n\n    stream$.pipe(take(1)).subscribe((canLogin) => {\n      if (canLogin) {\n        // Code mostly based on auth lib we use and the way it handles token properties\n        this.setTokenData(token);\n\n        // OCC specific code\n        this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n\n        this.store.dispatch(new AuthActions.Login());\n\n        // Remove any global errors and redirect user on successful login\n        this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n        this.authRedirectService.redirect();\n      }\n    });\n  }\n\n  protected setTokenData(token: any): void {\n    this.authStorageService.setItem('access_token', token.access_token);\n\n    if (token.granted_scopes && Array.isArray(token.granted_scopes)) {\n      this.authStorageService.setItem(\n        'granted_scopes',\n        JSON.stringify(token.granted_scopes)\n      );\n    }\n\n    this.authStorageService.setItem('access_token_stored_at', '' + Date.now());\n\n    if (token.expires_in) {\n      const expiresInMilliseconds = token.expires_in * 1000;\n      const now = new Date();\n      const expiresAt = now.getTime() + expiresInMilliseconds;\n      this.authStorageService.setItem('expires_at', '' + expiresAt);\n    }\n\n    if (token.refresh_token) {\n      this.authStorageService.setItem('refresh_token', token.refresh_token);\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-auth.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-user-authentication-token.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './user-authentication/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-auth.module';\nexport * from './facade/index';\nexport * from './services/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport { CdcAuthFacade } from '@spartacus/cdc/root';\nimport { CdcAuthService } from './cdc-auth.service';\n\nexport const facadeProviders: Provider[] = [\n  CdcAuthService,\n  {\n    provide: CdcAuthFacade,\n    useExisting: CdcAuthService,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { CdcLoadUserTokenFailEvent } from '@spartacus/cdc/root';\nimport { EventService, StateEventService } from '@spartacus/core';\nimport { CdcAuthActions } from '../store/actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcEventBuilder {\n  constructor(\n    protected stateEventService: StateEventService,\n    protected eventService: EventService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers CDC events\n   */\n  protected register(): void {\n    this.registerLoadUserTokenFail();\n  }\n\n  /**\n   * Register the load user token fail event.\n   */\n  protected registerLoadUserTokenFail(): void {\n    this.stateEventService.register({\n      action: CdcAuthActions.LOAD_CDC_USER_TOKEN_FAIL,\n      event: CdcLoadUserTokenFailEvent,\n    });\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CdcEventBuilder } from './cdc-event.builder';\n\n@NgModule({})\nexport class CdcEventModule {\n  constructor(_cdcEventBuilder: CdcEventBuilder) {\n    // Intentional empty constructor\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { CdcJsService } from '@spartacus/cdc/root';\nimport {\n  Address,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  UserActions,\n  UserAddressConnector,\n  UserAddressService,\n  UserIdService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { mergeMap, switchMap, take, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class CdcUserAddressesEffects {\n  addressFieldKeys = ['line1', 'line2', 'region.name', 'town', 'postalCode'];\n\n  cdcAddUserAddress$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(UserActions.ADD_USER_ADDRESS_SUCCESS),\n        mergeMap(() => this.updateDefaultAddressInCDC()),\n        tap({\n          error: (error) => this.showErrorMessage(error),\n        })\n      ),\n    { dispatch: false }\n  );\n\n  cdcUpdateUserAddress$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS),\n        mergeMap(() => this.updateDefaultAddressInCDC()),\n        tap({\n          error: (error) => this.showErrorMessage(error),\n        })\n      ),\n    { dispatch: false }\n  );\n\n  cdcDeleteUserAddress$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS),\n        mergeMap(() => this.updateDefaultAddressInCDC()),\n        tap({\n          error: (error) => this.showErrorMessage(error),\n        })\n      ),\n    { dispatch: false }\n  );\n\n  getAddresses(): Observable<Address[]> {\n    return this.userIdService.takeUserId().pipe(\n      take(1),\n      switchMap((userId) => this.userAddressConnector.getAll(userId))\n    );\n  }\n\n  getDefaultAddress(addresses: Address[]) {\n    return addresses.find((address) => address?.defaultAddress === true);\n  }\n\n  getCountryName(countries: Country[], countryIsocode: string) {\n    return countries.find((country) => country.isocode === countryIsocode)\n      ?.name;\n  }\n\n  updateDefaultAddressInCDC() {\n    return this.getAddresses().pipe(\n      take(1),\n      switchMap((addresses: Address[]) => {\n        const defaultAddress = this.getDefaultAddress(addresses) || {};\n        return this.sendAddressToCDC(defaultAddress);\n      })\n    );\n  }\n\n  sendAddressToCDC(address: Address): Observable<{ status: string }> {\n    //send to CDC\n    const formattedAddress = address.formattedAddress || ' ';\n    return this.userAddressService.getDeliveryCountries().pipe(\n      take(1),\n      switchMap((countries: Country[]) => {\n        const countryName =\n          this.getCountryName(countries, address.country?.isocode || ' ') ||\n          ' ';\n        return this.cdcJsService.updateAddressWithoutScreenSet(\n          formattedAddress,\n          address.postalCode || ' ',\n          address.town || ' ',\n          countryName\n        );\n      })\n    );\n  }\n\n  showErrorMessage(error: any) {\n    const errorMessage = error?.errorMessage || ' ';\n    this.messageService.add(errorMessage, GlobalMessageType.MSG_TYPE_ERROR);\n  }\n\n  constructor(\n    protected actions$: Actions,\n    protected userIdService: UserIdService,\n    protected userAddressConnector: UserAddressConnector,\n    protected userAddressService: UserAddressService,\n    protected messageService: GlobalMessageService,\n    protected cdcJsService: CdcJsService\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  LoggerService,\n  normalizeHttpError,\n} from '@spartacus/core';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { CdcAuthService } from '../../auth/facade/cdc-auth.service';\nimport { CdcUserAuthenticationTokenService } from '../../auth/services/user-authentication/cdc-user-authentication-token.service';\nimport { CdcAuthActions } from '../actions/index';\n\n@Injectable()\nexport class CdcUserTokenEffects {\n  protected logger = inject(LoggerService);\n\n  loadCdcUserToken$: Observable<CdcAuthActions.CdcUserTokenAction> =\n    createEffect(() =>\n      this.actions$.pipe(\n        ofType(CdcAuthActions.LOAD_CDC_USER_TOKEN),\n        map((action: CdcAuthActions.LoadCdcUserToken) => action.payload),\n        mergeMap((payload) =>\n          this.userTokenService\n            .loadTokenUsingCustomFlow(\n              payload.UID,\n              payload.UIDSignature,\n              payload.signatureTimestamp,\n              payload.idToken,\n              payload.baseSite\n            )\n            .pipe(\n              switchMap((token) => {\n                this.cdcAuthService.loginWithToken(token);\n                return EMPTY;\n              }),\n              catchError((error) => {\n                this.globalMessageService.add(\n                  { key: 'httpHandlers.badGateway' },\n                  GlobalMessageType.MSG_TYPE_ERROR\n                );\n                return of(\n                  new CdcAuthActions.LoadCdcUserTokenFail({\n                    error: normalizeHttpError(error, this.logger),\n                    initialActionPayload: payload,\n                  })\n                );\n              })\n            )\n        )\n      )\n    );\n\n  constructor(\n    private actions$: Actions,\n    private userTokenService: CdcUserAuthenticationTokenService,\n    private globalMessageService: GlobalMessageService,\n    private cdcAuthService: CdcAuthService\n  ) {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CdcUserAddressesEffects } from './cdc-user-addresses.effect';\nimport { CdcUserTokenEffects } from './cdc-user-token.effect';\n\nexport const effects: any[] = [CdcUserTokenEffects, CdcUserAddressesEffects];\n\nexport * from './cdc-user-addresses.effect';\nexport * from './cdc-user-token.effect';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CdcAuthModule } from '../auth/cdc-auth.module';\nimport { CdcAuthService } from '../auth/facade/cdc-auth.service';\nimport { effects } from './effects/index';\n\n@NgModule({\n  imports: [CommonModule, CdcAuthModule, EffectsModule.forFeature(effects)],\n  providers: [CdcAuthService],\n})\nexport class CdcStoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { CdcAuthModule } from './auth/cdc-auth.module';\nimport { facadeProviders } from './auth/facade/facade-providers';\nimport { CdcEventModule } from './events/cdc-event.module';\nimport { CdcStoreModule } from './store/cdc-store.module';\n\n@NgModule({\n  imports: [CdcAuthModule, CdcEventModule, CdcStoreModule],\n  providers: [...facadeProviders],\n})\nexport class CdcCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-event.builder';\nexport * from './cdc-event.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CmsComponent } from '@spartacus/core';\n\nexport interface GigyaRaasComponentData extends CmsComponent {\n  uid?: string; // Unique identifier of the Component\n  name?: string; // Name of the Component\n  screenSet?: string; // Name of the Screen set which is to be displayed\n  profileEdit?: string; // Determines if screen is for profile edit\n  embed?: string; // Display screen in embed way\n  startScreen?: string; // Starting screen which will be displayed on rendering the screen set\n  containerID?: string; // Container name in which CDC screen will be displayed\n  linkText?: string; // Text of the button for the screen set when rendered in pop-up way\n  advancedConfiguration?: string; // Advanced configuration for the screen set\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './auth/index';\nexport * from './cdc-core.module';\nexport * from './events/index';\nexport * from './models/cms.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["CdcAuthActions.LoadCdcUserToken","i1","CdcAuthActions.LOAD_CDC_USER_TOKEN_FAIL","i1.CdcEventBuilder","CdcAuthActions.LOAD_CDC_USER_TOKEN","CdcAuthActions.LoadCdcUserTokenFail","i2.CdcUserAuthenticationTokenService","i3","i4.CdcAuthService"],"mappings":"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"}