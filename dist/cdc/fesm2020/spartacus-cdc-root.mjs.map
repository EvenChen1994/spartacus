{"version":3,"file":"spartacus-cdc-root.mjs","sources":["../../../integration-libs/cdc/root/consent-management/converters/cdc-user-preference.serializer.ts","../../../integration-libs/cdc/root/consent-management/services/cdc-consents-local-storage.service.ts","../../../integration-libs/cdc/root/consent-management/services/cdc-consent-management-component.service.ts","../../../integration-libs/cdc/root/consent-management/converters/converter.ts","../../../integration-libs/cdc/root/config/cdc-config.ts","../../../integration-libs/cdc/root/consent-management/model/cdc-consent-management.model.ts","../../../integration-libs/cdc/root/consent-management/model/index.ts","../../../integration-libs/cdc/root/consent-management/services/index.ts","../../../integration-libs/cdc/root/consent-management/converters/index.ts","../../../integration-libs/cdc/root/consent-management/index.ts","../../../integration-libs/cdc/root/events/cdc-event.ts","../../../integration-libs/cdc/root/events/index.ts","../../../integration-libs/cdc/root/feature-name.ts","../../../integration-libs/cdc/root/facade/cdc-auth.facade.ts","../../../integration-libs/cdc/root/service/cdc-js.service.ts","../../../integration-libs/cdc/root/service/index.ts","../../../integration-libs/cdc/root/consent-management/services/cdc-user-consent.service.ts","../../../integration-libs/cdc/root/consent-management/cdc-user-consent.adapter.ts","../../../integration-libs/cdc/root/consent-management/cdc-consent.module.ts","../../../integration-libs/cdc/root/config/default-cdc-routing-config.ts","../../../integration-libs/cdc/root/guards/cdc-logout.guard.ts","../../../integration-libs/cdc/root/cdc-root.module.ts","../../../integration-libs/cdc/root/config/index.ts","../../../integration-libs/cdc/root/facade/index.ts","../../../integration-libs/cdc/root/guards/index.ts","../../../integration-libs/cdc/root/public_api.ts","../../../integration-libs/cdc/root/spartacus-cdc-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ConsentTemplate, Converter } from '@spartacus/core';\n\n@Injectable({ providedIn: 'root' })\nexport class CdcUserPreferenceSerializer\n  implements Converter<ConsentTemplate, any>\n{\n  constructor() {\n    // Intentional empty constructor\n  }\n\n  convert(source: ConsentTemplate, target?: any): any {\n    if (source) {\n      const preference = source.id?.concat('.isConsentGranted');\n      let giveConsent: boolean = false;\n      if (preference) {\n        if (source.currentConsent?.consentGivenDate) {\n          giveConsent = true;\n        }\n        target = this.convertToCdcPreference(preference, giveConsent);\n      }\n    }\n\n    return target;\n  }\n  /**\n   * converts a dot separated string to deeply nested object\n   * @param path : dot separated string\n   * @param value : true if consent is given, false if consent is withdrawn\n   * @returns preference object compatible for cdc\n   * example:\n   * input path x.y.z.isConsentGranted\n   * input value: true\n   * output=  x:{y:{z:{isConsentGranted: true}}}\n   */\n  private convertToCdcPreference(path: string, value: any): any {\n    const target: any = {};\n    let consentCode = target;\n    const list = path.split('.');\n    const len = list.length;\n    for (let i = 0; i < len - 1; i++) {\n      const elem = list[i];\n      if (!consentCode[elem]) {\n        consentCode[elem] = {};\n      }\n      consentCode = consentCode[elem];\n    }\n    consentCode[list[len - 1]] = value;\n    return target;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { of, Subscription } from 'rxjs';\nimport { StatePersistenceService } from '@spartacus/core';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport {\n  CdcLocalStorageTemplate,\n  CdcSiteConsentTemplate,\n} from '../model/index';\n\nconst KEY = 'cdc-consents-list';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcConsentsLocalStorageService implements OnDestroy {\n  constructor(protected statePersistenceService: StatePersistenceService) {}\n  protected subscription = new Subscription();\n\n  /**\n   * saves active cdc consents to storage\n   * @param siteConsent - cdc site consent details\n   */\n  persistCdcConsentsToStorage(siteConsent: CdcSiteConsentTemplate) {\n    const consents: CdcLocalStorageTemplate[] = [];\n    const siteDetails = siteConsent.siteConsentDetails;\n    for (const key in siteDetails) {\n      //key will be a string with dot separated IDs\n      if (\n        Object.hasOwn(siteDetails, key) &&\n        siteDetails[key]?.isActive === true\n      ) {\n        const consent: any = {};\n        consent.id = key;\n        consent.required = siteDetails[key]?.isMandatory;\n        consents.push(consent);\n      }\n    }\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage<\n        CdcLocalStorageTemplate[] | undefined\n      >({\n        key: KEY,\n        state$: of(consents),\n      })\n    );\n  }\n\n  /**\n   * Returns cdc consents from storage\n   * @returns cdc consents\n   */\n  readCdcConsentsFromStorage(): CdcLocalStorageTemplate[] {\n    return this.statePersistenceService.readStateFromStorage({\n      key: KEY,\n    }) as CdcLocalStorageTemplate[];\n  }\n\n  /**\n   * Returns true if input consent is present in storage, else returns false\n   * @param consentId - cdc consent id\n   * @returns - returns true/false\n   */\n  checkIfConsentExists(consentId: string): boolean {\n    const consents = this.readCdcConsentsFromStorage();\n    let result: boolean = false;\n    consents.forEach((consent) => {\n      if (consent.id === consentId) {\n        result = true;\n      }\n    });\n    return result;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { ConsentTemplate } from '@spartacus/core';\nimport { ConsentManagementComponentService } from '@spartacus/storefront';\nimport { CdcLocalStorageTemplate } from '../model/index';\nimport { CdcConsentsLocalStorageService } from './cdc-consents-local-storage.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcConsentManagementComponentService extends ConsentManagementComponentService {\n  constructor(protected store: CdcConsentsLocalStorageService) {\n    super();\n  }\n  getRequiredConsents(templateList: ConsentTemplate[]): string[] {\n    const requiredConsents: string[] = [];\n    const cdcConsents = this.getCdcConsentIDs(true);\n    requiredConsents.push(...super.getRequiredConsents(templateList));\n    requiredConsents.push(...cdcConsents);\n    return requiredConsents;\n  }\n\n  /**\n   * Returns cdc consents from store\n   * @param mandatoryConsents - if passed true, only mandatory consents will be returned.\n   * if passed false, all active consents (irrespective of whether they are mandatory or not)\n   * @returns array of consents\n   */\n  getCdcConsentIDs(mandatoryConsents: boolean = false): string[] {\n    const consentIDs: string[] = [];\n    const consents: CdcLocalStorageTemplate[] =\n      this.store.readCdcConsentsFromStorage() || [];\n    consents.forEach((consent) => {\n      if (mandatoryConsents === true) {\n        if (consent.required === true) {\n          consentIDs.push(consent.id);\n        }\n      } else {\n        consentIDs.push(consent.id);\n      }\n    });\n    return consentIDs;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter, ConsentTemplate } from '@spartacus/core';\n\n//maintaining target as any because 'preferences' in cdc can have any structure\nexport const CDC_USER_PREFERENCE_SERIALIZER = new InjectionToken<\n  Converter<ConsentTemplate, any>\n>('CdcUserPreferenceSerializer');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class CdcConfig {\n  cdc?: {\n    baseSite: string;\n    javascriptUrl: string;\n    sessionExpiration: number;\n  }[];\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends CdcConfig {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare module '@spartacus/storefront' {\n  const enum LAUNCH_CALLER {\n    CDC_RECONSENT = 'CDC_RECONSENT',\n  }\n}\n\ndeclare module '@spartacus/user/profile/root' {\n  export interface UserSignUp {\n    firstName?: string;\n    lastName?: string;\n    password?: string;\n    titleCode?: string;\n    uid?: string;\n    preferences?: any;\n  }\n}\nexport interface CdcSiteConsentTemplate {\n  siteConsentDetails: {\n    [key: string]: { isMandatory: boolean; isActive: boolean };\n  };\n}\n\nexport interface CdcLocalStorageTemplate {\n  id: string;\n  required: boolean;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-consent-management.model';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-consent-management-component.service';\nexport * from './cdc-consents-local-storage.service';\nexport * from './cdc-user-consent.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-user-preference.serializer';\nexport * from './converter';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-user-consent.adapter';\nexport * from './model/index';\nexport * from './cdc-consent.module';\nexport * from './services/index';\nexport * from './converters/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CxEvent } from '@spartacus/core';\n\n/**\n * Indicates the failure during the loading of the user token.\n */\nexport class CdcLoadUserTokenFailEvent extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CdcLoadUserTokenFailEvent';\n}\n\nexport class CdcReConsentEvent extends CxEvent {\n  /**\n   * Event's type\n   */\n  static readonly type = 'CdcReConsentEvent';\n  user: string;\n  password: string;\n  consentIds: string[];\n  errorMessage: string;\n  regToken: string;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-event';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport const CDC_FEATURE = 'cdc';\nexport const CDC_CORE_FEATURE = 'cdcCore';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { AuthToken, facadeFactory } from '@spartacus/core';\nimport { CDC_CORE_FEATURE } from '../feature-name';\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: () =>\n    facadeFactory({\n      facade: CdcAuthFacade,\n      feature: CDC_CORE_FEATURE,\n      methods: ['loginWithCustomCdcFlow', 'loginWithToken'],\n      async: true,\n    }),\n})\nexport abstract class CdcAuthFacade {\n  abstract loginWithCustomCdcFlow(\n    UID: string,\n    UIDSignature: string,\n    signatureTimestamp: string,\n    idToken: string,\n    baseSite: string\n  ): void;\n\n  abstract loginWithToken(\n    token: Partial<AuthToken> & { expires_in?: number }\n  ): void;\n}\n","/*\n * SPDX-FileCopyrightText: 2022 SAP Spartacus team <spartacus-team@sap.com>\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n} from '@angular/core';\nimport {\n  AuthService,\n  BaseSiteService,\n  EventService,\n  GlobalMessageService,\n  GlobalMessageType,\n  LanguageService,\n  ScriptLoader,\n  User,\n  WindowRef,\n} from '@spartacus/core';\nimport { OrganizationUserRegistrationForm } from '@spartacus/organization/user-registration/root';\nimport { UserProfileFacade, UserSignUp } from '@spartacus/user/profile/root';\nimport {\n  combineLatest,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n} from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\nimport { CdcConfig } from '../config/cdc-config';\nimport { CdcConsentsLocalStorageService } from '../consent-management';\nimport { CdcSiteConsentTemplate } from '../consent-management/model/index';\nimport { CdcReConsentEvent } from '../events';\nimport { CdcAuthFacade } from '../facade/cdc-auth.facade';\n\nconst defaultSessionTimeOut = 3600;\nconst setAccountInfoAPI = 'accounts.setAccountInfo';\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcJsService implements OnDestroy {\n  protected loaded$ = new ReplaySubject<boolean>(1);\n  protected errorLoading$ = new ReplaySubject<boolean>(1);\n  protected subscription: Subscription = new Subscription();\n  protected gigyaSDK: { [key: string]: any };\n\n  constructor(\n    protected cdcConfig: CdcConfig,\n    protected baseSiteService: BaseSiteService,\n    protected languageService: LanguageService,\n    protected scriptLoader: ScriptLoader,\n    protected winRef: WindowRef,\n    protected cdcAuth: CdcAuthFacade,\n    protected auth: AuthService,\n    protected zone: NgZone,\n    protected userProfileFacade: UserProfileFacade,\n    @Inject(PLATFORM_ID) protected platform: any,\n    protected globalMessageService: GlobalMessageService,\n    protected eventService: EventService,\n    protected consentStore: CdcConsentsLocalStorageService\n  ) {}\n\n  /**\n   * Initialize CDC script\n   */\n  initialize(): void {\n    this.loadCdcJavascript();\n  }\n\n  /**\n   * Returns observable with the information if CDC script is loaded.\n   */\n  didLoad(): Observable<boolean> {\n    return this.loaded$.asObservable();\n  }\n\n  /**\n   * Returns observable with the information if CDC script failed to load.\n   */\n  didScriptFailToLoad(): Observable<boolean> {\n    return this.errorLoading$.asObservable();\n  }\n\n  /**\n   * Method which loads the CDC Script\n   */\n  loadCdcJavascript(): void {\n    // Only load the script on client side (no SSR)\n    if (isPlatformBrowser(this.platform)) {\n      this.subscription.add(\n        combineLatest([\n          this.baseSiteService.getActive(),\n          this.languageService.getActive(),\n        ])\n          .pipe(take(1))\n          .subscribe(([baseSite, language]) => {\n            const scriptForBaseSite =\n              this.getJavascriptUrlForCurrentSite(baseSite);\n            if (scriptForBaseSite) {\n              const javascriptUrl = `${scriptForBaseSite}&lang=${language}`;\n              this.scriptLoader.embedScript({\n                src: javascriptUrl,\n                params: undefined,\n                attributes: { type: 'text/javascript' },\n                callback: () => {\n                  this.registerEventListeners(baseSite);\n                  this.getSiteConsentDetails(true).subscribe(); //fetch CDC consents and persist to local storage\n                  this.loaded$.next(true);\n                  this.errorLoading$.next(false);\n                },\n                errorCallback: () => {\n                  this.errorLoading$.next(true);\n                  this.loaded$.next(false);\n                },\n              });\n              if (this.winRef?.nativeWindow !== undefined) {\n                (this.winRef.nativeWindow as { [key: string]: any })[\n                  '__gigyaConf'\n                ] = {\n                  include: 'id_token, missing-required-fields',\n                };\n              }\n            }\n          })\n      );\n    }\n  }\n\n  /**\n   * Method obtains the CDC SDK URL for a base site\n   * @param baseSite\n   * @returns CDC SDK URL\n   */\n  private getJavascriptUrlForCurrentSite(baseSite: string): string {\n    const filteredConfigs = (this.cdcConfig.cdc ?? []).filter(\n      (conf) => conf.baseSite === baseSite\n    );\n    if (filteredConfigs && filteredConfigs.length > 0) {\n      return filteredConfigs[0].javascriptUrl;\n    }\n    return '';\n  }\n\n  /**\n   * Register login event listeners for CDC login\n   *\n   * @param baseSite\n   */\n  protected registerEventListeners(baseSite: string): void {\n    this.addCdcEventHandlers(baseSite);\n  }\n\n  /**\n   * Method to register CDC event handlers\n   *\n   * @param baseSite\n   */\n  protected addCdcEventHandlers(baseSite: string): void {\n    this.gigyaSDK = (this.winRef.nativeWindow as { [key: string]: any })?.[\n      'gigya'\n    ];\n    this.gigyaSDK?.accounts?.addEventHandlers({\n      onLogin: (...params: any[]) =>\n        this.zone.run(() => this.onLoginEventHandler(baseSite, ...params)),\n    });\n  }\n\n  /**\n   * Trigger login to Commerce once an onLogin event is triggered by CDC Screen Set.\n   *\n   * @param baseSite\n   * @param response\n   */\n  protected onLoginEventHandler(baseSite: string, response?: any) {\n    if (response && !response?.context?.skipOccAuth) {\n      //skip re-authentication during reset email\n      this.cdcAuth.loginWithCustomCdcFlow(\n        response.UID,\n        response.UIDSignature,\n        response.signatureTimestamp,\n        response.id_token !== undefined ? response.id_token : '',\n        baseSite\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC User registration and log in using CDC APIs.\n   *\n   * @param user: UserSignUp\n   */\n  registerUserWithoutScreenSet(\n    user: UserSignUp\n  ): Observable<{ status: string }> {\n    if (!user.uid || !user.password) {\n      return throwError(null);\n    } else {\n      return this.invokeAPI('accounts.initRegistration', {}).pipe(\n        switchMap((response) => this.onInitRegistrationHandler(user, response))\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC User registration using CDC APIs.\n   *\n   * @param user\n   * @param response\n   */\n  protected onInitRegistrationHandler(\n    user: UserSignUp,\n    response: any\n  ): Observable<{ status: string }> {\n    if (!response?.regToken || !user?.uid || !user?.password) {\n      return throwError(null);\n    } else {\n      const regSource: string = this.winRef.nativeWindow?.location?.href || '';\n      return this.invokeAPI('accounts.register', {\n        email: user.uid,\n        password: user.password,\n        profile: {\n          firstName: user.firstName,\n          lastName: user.lastName,\n        },\n        preferences: user.preferences,\n        regSource: regSource,\n        regToken: response.regToken,\n        finalizeRegistration: true,\n      }).pipe(\n        take(1),\n        tap({\n          error: (errorResponse) => this.handleRegisterError(errorResponse),\n        })\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC User log in using CDC APIs.\n   *\n   * @param email\n   * @param password\n   * @param context (optional) - indicates the user flow\n   */\n  loginUserWithoutScreenSet(\n    email: string,\n    password: string,\n    context?: any\n  ): Observable<{ status: string }> {\n    const missingConsentErrorCode = 206001;\n    let ignoreInterruptions = false;\n    const channel = this.getCurrentBaseSiteChannel();\n    if (channel && channel === 'B2C') {\n      ignoreInterruptions = true;\n    }\n    return this.getSessionExpirationValue().pipe(\n      switchMap((sessionExpiration) => {\n        return this.invokeAPI('accounts.login', {\n          loginID: email,\n          password: password,\n          ignoreInterruptions: ignoreInterruptions,\n          ...(context && { context: context }),\n          sessionExpiry: sessionExpiration,\n        }).pipe(\n          take(1),\n          tap({\n            error: (response) => {\n              if (response.errorCode !== missingConsentErrorCode) {\n                this.handleLoginError(response);\n              } else {\n                this.raiseCdcReconsentEvent(\n                  email,\n                  password,\n                  response.missingRequiredFields,\n                  response.errorMessage,\n                  response.regToken\n                );\n              }\n            },\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Trigger CDC Organisation registration using CDC APIs.\n   *\n   * @param orgInfo\n   */\n  registerOrganisationWithoutScreenSet(\n    orgInfo: OrganizationUserRegistrationForm\n  ): Observable<{ status: string }> {\n    if (\n      !orgInfo?.companyName ||\n      !orgInfo?.email ||\n      !orgInfo?.firstName ||\n      !orgInfo?.lastName\n    ) {\n      return throwError('Organization details not provided');\n    } else {\n      const regSource: string = this.winRef.nativeWindow?.location?.href || '';\n      const message = orgInfo.message;\n      let department = null;\n      let position = null;\n      if (message) {\n        ({ department, position } = this.parseMessage(message));\n      }\n\n      return this.invokeAPI('accounts.b2b.registerOrganization', {\n        organization: {\n          name: orgInfo.companyName,\n          street_address: orgInfo.addressLine1 + ' ' + orgInfo.addressLine2,\n          city: orgInfo.town,\n          state: orgInfo.region,\n          zip_code: orgInfo.postalCode,\n          country: orgInfo.country,\n        },\n        requester: {\n          firstName: orgInfo.firstName,\n          lastName: orgInfo.lastName,\n          email: orgInfo.email,\n          ...(orgInfo.phoneNumber &&\n            orgInfo.phoneNumber.length > 0 && { phone: orgInfo.phoneNumber }),\n          department: department,\n          jobFunction: position,\n        },\n        regSource: regSource,\n      }).pipe(\n        take(1),\n        tap({\n          error: (errorResponse) => this.handleRegisterError(errorResponse),\n        })\n      );\n    }\n  }\n\n  /**\n   * Retrieves the organization selected by the logged in user\n   *\n   */\n  getOrganizationContext(): Observable<{ orgId: string }> {\n    return this.invokeAPI('accounts.b2b.getOrganizationContext', {});\n  }\n  /**\n   * Opens the Organization Management dashboard and logs in the user\n   * if they currently have a valid Gigya session on the site\n   *\n   * @param orgId\n   */\n  openDelegatedAdminLogin(orgId: string) {\n    return this.zone.run(() =>\n      this.gigyaSDK?.accounts?.b2b?.openDelegatedAdminLogin({\n        orgId: orgId,\n      })\n    );\n  }\n\n  /**\n   * Show failure message to the user in case registration fails.\n   *\n   * @param response\n   */\n  protected handleRegisterError(response: any) {\n    if (response && response.status === 'FAIL') {\n      const errorMessage =\n        (response.validationErrors &&\n          response.validationErrors.length > 0 &&\n          response.validationErrors[response.validationErrors.length - 1]\n            .message) ||\n        'Error';\n      this.globalMessageService.add(\n        errorMessage,\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  /**\n   * Show failure message to the user in case login fails.\n   *\n   * @param response\n   */\n  protected handleLoginError(response: any) {\n    if (response && response.status === 'FAIL') {\n      this.globalMessageService.add(\n        {\n          key: 'httpHandlers.badRequestPleaseLoginAgain',\n          params: {\n            errorMessage: response.errorMessage,\n          },\n        },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  protected getSessionExpirationValue(): Observable<number> {\n    if (this.cdcConfig?.cdc !== undefined) {\n      const filteredConfigs: any = this.cdcConfig.cdc.filter(\n        (conf) => conf.baseSite === this.getCurrentBaseSite()\n      );\n      if (filteredConfigs && filteredConfigs.length > 0) {\n        return of(filteredConfigs[0].sessionExpiration);\n      }\n    }\n    // Return a default value\n    return of(defaultSessionTimeOut);\n  }\n\n  private parseMessage(message: string): {\n    department: string;\n    position: string;\n  } {\n    const msgList = message.replace('\\n', '').split(';');\n    let department = '';\n    let position = '';\n    for (const msg of msgList) {\n      if (msg.trim().toLowerCase().search('department') === 0) {\n        department = msg.split(':')[1].trim();\n      } else if (msg.trim().toLowerCase().search('position') === 0) {\n        position = msg.split(':')[1].trim();\n      }\n    }\n    return { department, position };\n  }\n\n  private getCurrentBaseSite(): string {\n    let baseSite: string = '';\n    this.baseSiteService\n      .getActive()\n      .pipe(take(1))\n      .subscribe((data) => (baseSite = data));\n    return baseSite;\n  }\n\n  private getCurrentBaseSiteChannel(): string {\n    let channel: string = '';\n    const baseSiteUid: string = this.getCurrentBaseSite();\n    this.baseSiteService\n      .get(baseSiteUid)\n      .pipe(take(1))\n      .subscribe((data) => (channel = data?.channel ?? ''));\n    return channel;\n  }\n\n  /**\n   * Trigger CDC forgot password using CDC APIs.\n   *\n   * @param email\n   */\n  resetPasswordWithoutScreenSet(email: string): Observable<{ status: string }> {\n    if (!email || email?.length === 0) {\n      return throwError('No email provided');\n    } else {\n      return this.invokeAPI('accounts.resetPassword', {\n        loginID: email,\n      }).pipe(\n        take(1),\n        tap({\n          error: (response) => this.handleResetPassResponse(response),\n        })\n      );\n    }\n  }\n\n  /**\n   * Response handler for forgot password\n   * @param response\n   */\n  protected handleResetPassResponse(response: any) {\n    if (response && response.status === 'OK') {\n      this.globalMessageService.add(\n        { key: 'forgottenPassword.passwordResetEmailSent' },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    } else {\n      const errorMessage = response?.errorMessage || {\n        key: 'httpHandlers.unknownError',\n      };\n      this.globalMessageService.add(\n        errorMessage,\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC Profile update.\n   *\n   * @param firstName\n   * @param lastName\n   */\n  updateProfileWithoutScreenSet(user: User): Observable<{ status: string }> {\n    if (\n      !user?.firstName ||\n      user?.firstName?.length === 0 ||\n      !user?.lastName ||\n      user?.lastName?.length === 0\n    ) {\n      return throwError('User details not provided');\n    } else {\n      const profileObj = {\n        profile: {\n          firstName: user.firstName,\n          lastName: user.lastName,\n        },\n      };\n      return this.invokeAPI(setAccountInfoAPI, {\n        ...profileObj,\n      }).pipe(\n        take(1),\n        tap(() =>\n          this.userProfileFacade.update(user).subscribe({\n            error: (error) => of(error),\n          })\n        )\n      );\n    }\n  }\n\n  /**\n   * Trigger CDC User Password update.\n   *\n   * @param oldPassword\n   * @param newPassword\n   */\n  updateUserPasswordWithoutScreenSet(\n    oldPassword: string,\n    newPassword: string\n  ): Observable<{ status: string }> {\n    if (\n      !oldPassword ||\n      oldPassword?.length === 0 ||\n      !newPassword ||\n      newPassword?.length === 0\n    ) {\n      return throwError('No passwords provided');\n    } else {\n      return this.invokeAPI(setAccountInfoAPI, {\n        password: oldPassword,\n        newPassword: newPassword,\n      }).pipe(\n        tap({\n          error: (error) => of(error),\n        })\n      );\n    }\n  }\n\n  /**\n   * Updates user details using the existing User API\n   *\n   * @param response\n   */\n  onProfileUpdateEventHandler(response?: any) {\n    if (response) {\n      const userDetails: User = {};\n      userDetails.firstName = response.profile.firstName;\n      userDetails.lastName = response.profile.lastName;\n      userDetails.uid = response.profile.email;\n      //logout the user only in case of email update.\n      this.getLoggedInUserEmail().subscribe((user) => {\n        const currentEmail = user?.uid;\n        this.userProfileFacade.update(userDetails).subscribe(() => {\n          if (currentEmail !== userDetails.uid) {\n            this.logoutUser();\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Trigger CDC user email update.\n   *\n   * @param password\n   * @param newEmail\n   */\n  updateUserEmailWithoutScreenSet(\n    password: string,\n    newEmail: string\n  ): Observable<{ status: string }> {\n    if (\n      !password ||\n      password?.length === 0 ||\n      !newEmail ||\n      newEmail?.length === 0\n    ) {\n      return throwError('Email or password not provided');\n    } else {\n      //Verify the password by attempting to login\n      return this.getLoggedInUserEmail().pipe(\n        switchMap((user) => {\n          const email = user?.uid;\n          if (!email || email?.length === 0) {\n            return throwError('Email or password not provided');\n          }\n          // Verify the password by attempting to login\n          // - CDC doesn't require to verify password before changing an email, but the default Spartacus requires it.\n          // - CDC doesn't have any specific api, for verifying a password, so as a _workaround_ we call the login API of CDC.\n          //   We pass a special `context` parameter `'{ skipOccAuth: true }'`\n          //   to avoid the full CDC login flow.\n          //   Instead we want only half of the CDC login flow, just to verify if the password was correct.\n          return this.loginUserWithoutScreenSet(email, password, {\n            skipOccAuth: true,\n          }).pipe(\n            switchMap(() =>\n              this.invokeAPI(setAccountInfoAPI, {\n                profile: {\n                  email: newEmail,\n                },\n              }).pipe(\n                take(1),\n                tap({\n                  next: () =>\n                    this.userProfileFacade.update({ uid: newEmail }).pipe(\n                      take(1),\n                      tap({\n                        error: (error) => of(error),\n                        complete: () => {\n                          this.logoutUser();\n                        },\n                      })\n                    ),\n                })\n              )\n            )\n          );\n        })\n      );\n    }\n  }\n\n  /**\n   * Obtain the email of the currently logged in user\n   * @returns emailID of the loggedIn user\n   */\n  protected getLoggedInUserEmail(): Observable<User> {\n    return this.userProfileFacade.get().pipe(\n      filter((user): user is User => Boolean(user)),\n      take(1)\n    );\n  }\n\n  /**\n   * Trigger CDC address update.\n   *\n   * @param address\n   */\n  updateAddressWithoutScreenSet(\n    formattedAddress: string,\n    zipCode?: string,\n    city?: string,\n    country?: string\n  ): Observable<{ status: string }> {\n    if (!formattedAddress || formattedAddress?.length === 0) {\n      return throwError('No address provided');\n    } else {\n      const profileObj = {\n        address: formattedAddress,\n        ...(city && { city: city }),\n        ...(country && { country: country }),\n        ...(zipCode && { zip: zipCode }),\n      };\n      return this.invokeAPI(setAccountInfoAPI, {\n        profile: profileObj,\n      });\n    }\n  }\n\n  /**\n   * Obtain the CDC SDK Method from the input method name as string\n   * @param methodName\n   * @returns CDC SDK Function\n   */\n  protected getSdkFunctionFromName(\n    methodName: string\n  ): (payload: Object) => void {\n    //accounts.setAccountInfo or accounts.b2b.openDelegatedAdmin\n    const nestedMethods = methodName.split('.');\n    let cdcAPI: any = this.gigyaSDK;\n    nestedMethods.forEach((method) => {\n      if (cdcAPI && cdcAPI.hasOwnProperty(method)) {\n        cdcAPI = cdcAPI[method];\n      }\n    });\n\n    return cdcAPI;\n  }\n\n  /**\n   * Invoke the CDC SDK Method and convert the callback to an Observable\n   * @param methodName - method to be invoked\n   * @param payload - Object payload\n   * @returns - Observable with the response\n   */\n  protected invokeAPI(methodName: string, payload: Object): Observable<any> {\n    return new Observable<any>((result) => {\n      const actualAPI = this.getSdkFunctionFromName(methodName);\n      if (typeof actualAPI != 'function') {\n        result.error('CDC API name is incorrect');\n        return;\n      }\n      actualAPI({\n        ...payload,\n        callback: (response: any) => {\n          this.zone.run(() => {\n            if (response?.status === 'OK') {\n              result.next(response);\n              result.complete();\n            } else {\n              result.error(response);\n            }\n          });\n        },\n      });\n    });\n  }\n\n  /**\n   * Retrieves consent statements for logged in CDC site (based on CDC site API Key)\n   * @param persistToLocalStorage - set this to true, if you want to save the fetched CDC consents to a local storage\n   * @returns - Observable with site consent details\n   */\n  getSiteConsentDetails(\n    persistToLocalStorage: boolean = false\n  ): Observable<CdcSiteConsentTemplate> {\n    const baseSite: string = this.getCurrentBaseSite();\n    const javascriptURL: string = this.getJavascriptUrlForCurrentSite(baseSite);\n    const queryParams = new URLSearchParams(\n      javascriptURL.substring(javascriptURL.indexOf('?'))\n    );\n    const siteApiKey: string | null = queryParams.get('apikey');\n    return this.invokeAPI('accounts.getSiteConsentDetails', {\n      apiKey: siteApiKey,\n    }).pipe(\n      tap({\n        next: (response) => {\n          if (persistToLocalStorage) {\n            this.consentStore.persistCdcConsentsToStorage(response);\n          }\n        },\n      })\n    );\n  }\n\n  /**\n   * Triggers the update (give/withdraw) of a CDC consent for a user\n   * @param uid - user ID of the logged in user\n   * @param lang - current storefront language\n   * @param preferences - object containing the preference details\n   * @param regToken - optional parameter, which is necessary when reconsent is provided during login scenario\n   * @returns - returns Observable with error code and status\n   */\n  setUserConsentPreferences(\n    uid: string,\n    lang: string,\n    preferences: any,\n    regToken?: string\n  ): Observable<{ errorCode: number; errorMessage: string }> {\n    const regSource: string = this.winRef.nativeWindow?.location?.href || '';\n    return this.invokeAPI(setAccountInfoAPI, {\n      uid: uid,\n      lang: lang,\n      preferences: preferences,\n      regSource: regSource,\n      regToken: regToken,\n    }).pipe(\n      tap({\n        error: (error) => {\n          throwError(error);\n        },\n      })\n    );\n  }\n\n  /**\n   * Dispatch an event when reconsent is required during login. This will be listened\n   * by reconsent module to show reconsent pop-up\n   * @param user - user ID provided in login screen\n   * @param password - password provided in login screen\n   * @param reconsentIds - missing required cdc consent IDs\n   * @param errorMessage - error message indicating that reconsent is required\n   * @param regToken - token of the login session\n   */\n  raiseCdcReconsentEvent(\n    user: string,\n    password: string,\n    reconsentIds: string[],\n    errorMessage: string,\n    regToken: string\n  ): void {\n    const consentIds: string[] = [];\n    reconsentIds.forEach((template) => {\n      const removePreference = template.replace('preferences.', '');\n      const removeIsConsentGranted = removePreference.replace(\n        '.isConsentGranted',\n        ''\n      );\n      consentIds.push(removeIsConsentGranted);\n    });\n    const newReConsentEvent = new CdcReConsentEvent();\n    newReConsentEvent.user = user;\n    newReConsentEvent.password = password;\n    newReConsentEvent.consentIds = consentIds;\n    newReConsentEvent.errorMessage = errorMessage;\n    newReConsentEvent.regToken = regToken;\n    this.eventService.dispatch(newReConsentEvent);\n  }\n\n  protected logoutUser() {\n    this.auth.logout();\n    this.invokeAPI('accounts.logout', {});\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-js.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  ConsentTemplate,\n  ConverterService,\n  LanguageService,\n} from '@spartacus/core';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { Observable, throwError } from 'rxjs';\nimport { CdcConsentsLocalStorageService } from './cdc-consents-local-storage.service';\nimport { CDC_USER_PREFERENCE_SERIALIZER } from '../converters/converter';\nimport { tap } from 'rxjs/operators';\nimport { CdcJsService } from '../../service';\n\n@Injectable({ providedIn: 'root' })\nexport class CdcUserConsentService {\n  constructor(\n    protected languageService: LanguageService,\n    protected userProfileFacade: UserProfileFacade,\n    protected cdcJsService: CdcJsService,\n    protected converter: ConverterService,\n    protected cdcConsentsStorage: CdcConsentsLocalStorageService\n  ) {}\n\n  /**\n   *\n   * @param isConsentGranted - set true - if consent is given; false - if consent is withdrawn\n   * @param consentCodes - array of cdc consent ids\n   * @param user - If user is not passed, the logged in user id will be fetched and used. If passed, it will be considered.\n   * @param regToken - token\n   * @returns - returns Observable with error code and status\n   */\n  updateCdcConsent(\n    isConsentGranted: boolean,\n    consentCodes: string[],\n    user?: string,\n    regToken?: string\n  ): Observable<{ errorCode: number; errorMessage: string }> {\n    let consent: ConsentTemplate;\n    let serializedPreference: any = {};\n    for (const consentCode of consentCodes) {\n      consent = {};\n      consent.id = consentCode;\n      consent.currentConsent = {};\n      if (isConsentGranted) {\n        consent.currentConsent.consentGivenDate = new Date();\n      } else {\n        consent.currentConsent.consentWithdrawnDate = new Date();\n      }\n      const preference: any = this.converter.convert(\n        consent,\n        CDC_USER_PREFERENCE_SERIALIZER\n      );\n      serializedPreference = Object.assign(serializedPreference, preference);\n    }\n    let userId: string = '';\n    if (user === undefined) {\n      userId = this.getUserID() ?? '';\n    } else if (user !== undefined) {\n      userId = user;\n    }\n\n    const currentLanguage = this.getActiveLanguage();\n\n    return this.cdcJsService\n      .setUserConsentPreferences(\n        userId,\n        currentLanguage,\n        serializedPreference,\n        regToken\n      )\n      .pipe(\n        tap({\n          error: (error) => {\n            throwError(error);\n          },\n        })\n      );\n  }\n\n  /**\n   * Returns logged in User ID\n   * @returns user id\n   */\n  getUserID(): string | undefined {\n    let uid: string | undefined;\n    this.userProfileFacade.get().subscribe((user) => {\n      uid = user?.uid;\n    });\n    return uid;\n  }\n\n  /**\n   * Returns current language of the current site\n   * @returns language iso code\n   */\n  getActiveLanguage(): string {\n    let currentLanguage: string = '';\n    this.languageService\n      .getActive()\n      .subscribe((language) => (currentLanguage = language))\n      .unsubscribe();\n    return currentLanguage;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ConsentTemplate,\n  ConverterService,\n  OccEndpointsService,\n  OccUserConsentAdapter,\n} from '@spartacus/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { CdcConsentsLocalStorageService } from './services/cdc-consents-local-storage.service';\nimport { CdcUserConsentService } from './services/cdc-user-consent.service';\n\n@Injectable({ providedIn: 'root' })\nexport class CdcUserConsentAdapter extends OccUserConsentAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService,\n    protected cdcUserConsentService: CdcUserConsentService,\n    protected cdcConsentsStorage: CdcConsentsLocalStorageService\n  ) {\n    super(http, occEndpoints, converter);\n  }\n\n  loadConsents(userId: string): Observable<ConsentTemplate[]> {\n    return super.loadConsents(userId);\n  }\n  giveConsent(\n    userId: string,\n    consentTemplateId: string,\n    consentTemplateVersion: number\n  ): Observable<ConsentTemplate> {\n    if (!this.cdcConsentsStorage.checkIfConsentExists(consentTemplateId)) {\n      return super.giveConsent(\n        userId,\n        consentTemplateId,\n        consentTemplateVersion\n      );\n    } else {\n      return this.cdcUserConsentService\n        .updateCdcConsent(true, [consentTemplateId])\n        .pipe(\n          catchError((error: any) => throwError(error)),\n          switchMap((result) => {\n            if (result?.errorCode === 0) {\n              return super.giveConsent(\n                userId,\n                consentTemplateId,\n                consentTemplateVersion\n              );\n            }\n            return EMPTY;\n          })\n        );\n    }\n  }\n\n  withdrawConsent(\n    userId: string,\n    consentCode: string,\n    consentId?: string\n  ): Observable<{}> {\n    if (!this.cdcConsentsStorage.checkIfConsentExists(consentId ?? '')) {\n      return super.withdrawConsent(userId, consentCode);\n    } else {\n      return this.cdcUserConsentService\n        .updateCdcConsent(false, consentId ? [consentId] : [])\n        .pipe(\n          catchError((error: any) => throwError(error)),\n          switchMap((result) => {\n            if (result?.errorCode === 0) {\n              return super.withdrawConsent(userId, consentCode);\n            }\n            return EMPTY;\n          })\n        );\n    }\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { I18nModule, UserConsentAdapter } from '@spartacus/core';\nimport { CdcUserPreferenceSerializer } from './converters/cdc-user-preference.serializer';\nimport { CommonModule } from '@angular/common';\nimport { CdcConsentManagementComponentService } from './services/cdc-consent-management-component.service';\nimport { ConsentManagementComponentService } from '@spartacus/storefront';\nimport { CDC_USER_PREFERENCE_SERIALIZER } from './converters/converter';\nimport { CdcUserConsentAdapter } from './cdc-user-consent.adapter';\n\n@NgModule({\n  imports: [CommonModule, I18nModule],\n  providers: [\n    { provide: UserConsentAdapter, useClass: CdcUserConsentAdapter },\n    {\n      provide: ConsentManagementComponentService,\n      useClass: CdcConsentManagementComponentService,\n    },\n    {\n      provide: CDC_USER_PREFERENCE_SERIALIZER,\n      useExisting: CdcUserPreferenceSerializer,\n      multi: true,\n    },\n  ],\n})\nexport class CdcConsentManagementModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { RoutesConfig, RoutingConfig } from '@spartacus/core';\n\nexport const cdcRoutesConfig: RoutesConfig = {\n  cdcLogin: {\n    paths: ['/cdc/login'],\n    protected: false,\n    authFlow: true,\n  },\n  cdcCheckoutLogin: {\n    paths: ['/cdc/checkout-login'],\n    protected: false,\n    authFlow: true,\n  },\n  cdcOrgRegistration: {\n    paths: ['/cdc/register-org'],\n    protected: false,\n    authFlow: true,\n  },\n};\n\nexport const defaultCdcRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: cdcRoutesConfig,\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  AuthService,\n  CmsService,\n  ProtectedRoutesService,\n  SemanticPathService,\n  WindowRef,\n} from '@spartacus/core';\nimport { LogoutGuard } from '@spartacus/storefront';\n\n/**\n * @override\n *\n * CDC version of logout guard. In addition to token revocation we invoke logout method from CDC JS lib.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CdcLogoutGuard extends LogoutGuard {\n  constructor(\n    protected auth: AuthService,\n    protected cms: CmsService,\n    protected semanticPathService: SemanticPathService,\n    protected protectedRoutes: ProtectedRoutesService,\n    protected router: Router,\n    protected winRef: WindowRef\n  ) {\n    super(auth, cms, semanticPathService, protectedRoutes, router);\n  }\n\n  /**\n   * Logout user from CDC\n   */\n  protected logoutFromCdc(): void {\n    (this.winRef.nativeWindow as { [key: string]: any })?.[\n      'gigya'\n    ]?.accounts?.logout();\n  }\n\n  /**\n   * @override\n   * @returns promise to resolve after complete logout\n   */\n  protected logout(): Promise<any> {\n    return Promise.all([super.logout(), this.logoutFromCdc()]);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport {\n  CmsConfig,\n  Config,\n  ConfigInitializerService,\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n} from '@spartacus/core';\nimport { LogoutGuard } from '@spartacus/storefront';\nimport { tap } from 'rxjs/operators';\nimport { CdcConsentManagementModule } from './consent-management/cdc-consent.module';\nimport { defaultCdcRoutingConfig } from './config/default-cdc-routing-config';\nimport { CDC_CORE_FEATURE, CDC_FEATURE } from './feature-name';\nimport { CdcLogoutGuard } from './guards/cdc-logout.guard';\nimport { CdcJsService } from './service/cdc-js.service';\n\nexport function cdcJsFactory(\n  cdcJsService: CdcJsService,\n  configInit: ConfigInitializerService\n): () => Promise<Config> {\n  const func = () =>\n    configInit\n      .getStable('context', 'cdc')\n      .pipe(\n        tap(() => {\n          cdcJsService.initialize();\n        })\n      )\n      .toPromise();\n  return func;\n}\n\nexport function defaultCdcComponentsConfig(): CmsConfig {\n  const config: CmsConfig = {\n    featureModules: {\n      [CDC_FEATURE]: {\n        cmsComponents: ['GigyaRaasComponent'],\n      },\n      // by default core is bundled together with components\n      [CDC_CORE_FEATURE]: CDC_FEATURE,\n    },\n  };\n  return config;\n}\n\n@NgModule({\n  imports: [CdcConsentManagementModule],\n  providers: [\n    provideDefaultConfigFactory(defaultCdcComponentsConfig),\n    { provide: LogoutGuard, useExisting: CdcLogoutGuard },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: cdcJsFactory,\n      deps: [CdcJsService, ConfigInitializerService],\n      multi: true,\n    },\n    provideDefaultConfig(defaultCdcRoutingConfig),\n  ],\n})\nexport class CdcRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-config';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-auth.facade';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-logout.guard';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './cdc-root.module';\nexport * from './config/index';\nexport * from './events/index';\nexport * from './facade/index';\nexport * from './feature-name';\nexport * from './guards/index';\nexport * from './service/index';\nexport * from './consent-management';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i1.CdcConsentsLocalStorageService","i5.CdcConsentsLocalStorageService","i2","i3.CdcJsService","i4.CdcConsentsLocalStorageService","i3.CdcUserConsentService"],"mappings":";;;;;;;;;;;;AAAA;;;;AAIG;MAMU,2BAA2B,CAAA;AAGtC,IAAA,WAAA,GAAA;;KAEC;IAED,OAAO,CAAC,MAAuB,EAAE,MAAY,EAAA;AAC3C,QAAA,IAAI,MAAM,EAAE;YACV,MAAM,UAAU,GAAG,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;YAC1D,IAAI,WAAW,GAAY,KAAK,CAAC;AACjC,YAAA,IAAI,UAAU,EAAE;AACd,gBAAA,IAAI,MAAM,CAAC,cAAc,EAAE,gBAAgB,EAAE;oBAC3C,WAAW,GAAG,IAAI,CAAC;AACpB,iBAAA;gBACD,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;AAC/D,aAAA;AACF,SAAA;AAED,QAAA,OAAO,MAAM,CAAC;KACf;AACD;;;;;;;;;AASG;IACK,sBAAsB,CAAC,IAAY,EAAE,KAAU,EAAA;QACrD,MAAM,MAAM,GAAQ,EAAE,CAAC;QACvB,IAAI,WAAW,GAAG,MAAM,CAAC;QACzB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC7B,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AACxB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAChC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AACtB,gBAAA,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;AACxB,aAAA;AACD,YAAA,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AACjC,SAAA;QACD,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;AACnC,QAAA,OAAO,MAAM,CAAC;KACf;;wHA7CU,2BAA2B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAA3B,2BAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,2BAA2B,cADd,MAAM,EAAA,CAAA,CAAA;2FACnB,2BAA2B,EAAA,UAAA,EAAA,CAAA;kBADvC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAA;;;ACTlC;;;;AAIG;AAUH,MAAM,GAAG,GAAG,mBAAmB,CAAC;MAKnB,8BAA8B,CAAA;AACzC,IAAA,WAAA,CAAsB,uBAAgD,EAAA;QAAhD,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAyB;AAC5D,QAAA,IAAA,CAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;KAD8B;AAG1E;;;AAGG;AACH,IAAA,2BAA2B,CAAC,WAAmC,EAAA;QAC7D,MAAM,QAAQ,GAA8B,EAAE,CAAC;AAC/C,QAAA,MAAM,WAAW,GAAG,WAAW,CAAC,kBAAkB,CAAC;AACnD,QAAA,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;;AAE7B,YAAA,IACE,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC;AAC/B,gBAAA,WAAW,CAAC,GAAG,CAAC,EAAE,QAAQ,KAAK,IAAI,EACnC;gBACA,MAAM,OAAO,GAAQ,EAAE,CAAC;AACxB,gBAAA,OAAO,CAAC,EAAE,GAAG,GAAG,CAAC;gBACjB,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;AACjD,gBAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACxB,aAAA;AACF,SAAA;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAE1C;AACA,YAAA,GAAG,EAAE,GAAG;AACR,YAAA,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAC;AACrB,SAAA,CAAC,CACH,CAAC;KACH;AAED;;;AAGG;IACH,0BAA0B,GAAA;AACxB,QAAA,OAAO,IAAI,CAAC,uBAAuB,CAAC,oBAAoB,CAAC;AACvD,YAAA,GAAG,EAAE,GAAG;AACT,SAAA,CAA8B,CAAC;KACjC;AAED;;;;AAIG;AACH,IAAA,oBAAoB,CAAC,SAAiB,EAAA;AACpC,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACnD,IAAI,MAAM,GAAY,KAAK,CAAC;AAC5B,QAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;AAC3B,YAAA,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE;gBAC5B,MAAM,GAAG,IAAI,CAAC;AACf,aAAA;AACH,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,MAAM,CAAC;KACf;IAED,WAAW,GAAA;AACT,QAAA,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;;2HA7DU,8BAA8B,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,uBAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAA9B,8BAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,8BAA8B,cAF7B,MAAM,EAAA,CAAA,CAAA;2FAEP,8BAA8B,EAAA,UAAA,EAAA,CAAA;kBAH1C,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;AClBD;;;;AAIG;AAWG,MAAO,oCAAqC,SAAQ,iCAAiC,CAAA;AACzF,IAAA,WAAA,CAAsB,KAAqC,EAAA;AACzD,QAAA,KAAK,EAAE,CAAC;QADY,IAAK,CAAA,KAAA,GAAL,KAAK,CAAgC;KAE1D;AACD,IAAA,mBAAmB,CAAC,YAA+B,EAAA;QACjD,MAAM,gBAAgB,GAAa,EAAE,CAAC;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAChD,gBAAgB,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC;AAClE,QAAA,gBAAgB,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;AACtC,QAAA,OAAO,gBAAgB,CAAC;KACzB;AAED;;;;;AAKG;IACH,gBAAgB,CAAC,oBAA6B,KAAK,EAAA;QACjD,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,QAAQ,GACZ,IAAI,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,EAAE,CAAC;AAChD,QAAA,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,KAAI;YAC3B,IAAI,iBAAiB,KAAK,IAAI,EAAE;AAC9B,gBAAA,IAAI,OAAO,CAAC,QAAQ,KAAK,IAAI,EAAE;AAC7B,oBAAA,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC7B,iBAAA;AACF,aAAA;AAAM,iBAAA;AACL,gBAAA,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC7B,aAAA;AACH,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,UAAU,CAAC;KACnB;;iIAhCU,oCAAoC,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAC,8BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAApC,oCAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,oCAAoC,cAFnC,MAAM,EAAA,CAAA,CAAA;2FAEP,oCAAoC,EAAA,UAAA,EAAA,CAAA;kBAHhD,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACdD;;;;AAIG;AAKH;MACa,8BAA8B,GAAG,IAAI,cAAc,CAE9D,6BAA6B;;ACZ/B;;;;AAIG;MASmB,SAAS,CAAA;;sGAAT,SAAS,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;0GAAT,SAAS,EAAA,UAAA,EAHjB,MAAM,EAAA,WAAA,EACL,MAAM,EAAA,CAAA,CAAA;2FAEC,SAAS,EAAA,UAAA,EAAA,CAAA;kBAJ9B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,WAAW,EAAE,MAAM;AACpB,iBAAA,CAAA;;;ACZD;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;AAIH;;AAEG;AACG,MAAO,yBAA0B,SAAQ,OAAO,CAAA;;AACpD;;AAEG;AACa,yBAAI,CAAA,IAAA,GAAG,2BAA2B,CAAC;AAG/C,MAAO,iBAAkB,SAAQ,OAAO,CAAA;;AAC5C;;AAEG;AACa,iBAAI,CAAA,IAAA,GAAG,mBAAmB;;ACtB5C;;;;AAIG;;ACJH;;;;AAIG;AAEI,MAAM,WAAW,GAAG,MAAM;AAC1B,MAAM,gBAAgB,GAAG;;ACPhC;;;;AAIG;MAgBmB,aAAa,CAAA;;0GAAb,aAAa,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAb,aAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,cATrB,MAAM,EAAA,UAAA,EACN,MACV,aAAa,CAAC;AACZ,QAAA,MAAM,EAAE,aAAa;AACrB,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,OAAO,EAAE,CAAC,wBAAwB,EAAE,gBAAgB,CAAC;AACrD,QAAA,KAAK,EAAE,IAAI;KACZ,CAAC,EAAA,CAAA,CAAA;2FAEgB,aAAa,EAAA,UAAA,EAAA,CAAA;kBAVlC,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AAClB,oBAAA,UAAU,EAAE,MACV,aAAa,CAAC;AACZ,wBAAA,MAAM,EAAe,aAAA;AACrB,wBAAA,OAAO,EAAE,gBAAgB;AACzB,wBAAA,OAAO,EAAE,CAAC,wBAAwB,EAAE,gBAAgB,CAAC;AACrD,wBAAA,KAAK,EAAE,IAAI;qBACZ,CAAC;AACL,iBAAA,CAAA;;;ACnBD;;;;;AAKG;AAsCH,MAAM,qBAAqB,GAAG,IAAI,CAAC;AACnC,MAAM,iBAAiB,GAAG,yBAAyB,CAAC;MAIvC,YAAY,CAAA;IAMvB,WACY,CAAA,SAAoB,EACpB,eAAgC,EAChC,eAAgC,EAChC,YAA0B,EAC1B,MAAiB,EACjB,OAAsB,EACtB,IAAiB,EACjB,IAAY,EACZ,iBAAoC,EACf,QAAa,EAClC,oBAA0C,EAC1C,YAA0B,EAC1B,YAA4C,EAAA;QAZ5C,IAAS,CAAA,SAAA,GAAT,SAAS,CAAW;QACpB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;QAChC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;QAChC,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAC1B,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;QACjB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAe;QACtB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAa;QACjB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;QACZ,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACf,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAK;QAClC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAC1B,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAgC;AAlB9C,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;AACxC,QAAA,IAAA,CAAA,aAAa,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;AAC9C,QAAA,IAAA,CAAA,YAAY,GAAiB,IAAI,YAAY,EAAE,CAAC;KAiBtD;AAEJ;;AAEG;IACH,UAAU,GAAA;QACR,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;AAED;;AAEG;IACH,OAAO,GAAA;AACL,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KACpC;AAED;;AAEG;IACH,mBAAmB,GAAA;AACjB,QAAA,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;KAC1C;AAED;;AAEG;IACH,iBAAiB,GAAA;;AAEf,QAAA,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AACpC,YAAA,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,aAAa,CAAC;AACZ,gBAAA,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;AAChC,gBAAA,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE;aACjC,CAAC;AACC,iBAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACb,SAAS,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAI;gBAClC,MAAM,iBAAiB,GACrB,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;AAChD,gBAAA,IAAI,iBAAiB,EAAE;AACrB,oBAAA,MAAM,aAAa,GAAG,CAAA,EAAG,iBAAiB,CAAS,MAAA,EAAA,QAAQ,EAAE,CAAC;AAC9D,oBAAA,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC;AAC5B,wBAAA,GAAG,EAAE,aAAa;AAClB,wBAAA,MAAM,EAAE,SAAS;AACjB,wBAAA,UAAU,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE;wBACvC,QAAQ,EAAE,MAAK;AACb,4BAAA,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;4BACtC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;AAC7C,4BAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,4BAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBAChC;wBACD,aAAa,EAAE,MAAK;AAClB,4BAAA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,4BAAA,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBAC1B;AACF,qBAAA,CAAC,CAAC;AACH,oBAAA,IAAI,IAAI,CAAC,MAAM,EAAE,YAAY,KAAK,SAAS,EAAE;AAC1C,wBAAA,IAAI,CAAC,MAAM,CAAC,YAAuC,CAClD,aAAa,CACd,GAAG;AACF,4BAAA,OAAO,EAAE,mCAAmC;yBAC7C,CAAC;AACH,qBAAA;AACF,iBAAA;aACF,CAAC,CACL,CAAC;AACH,SAAA;KACF;AAED;;;;AAIG;AACK,IAAA,8BAA8B,CAAC,QAAgB,EAAA;QACrD,MAAM,eAAe,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,EAAE,EAAE,MAAM,CACvD,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,KAAK,QAAQ,CACrC,CAAC;AACF,QAAA,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;AACjD,YAAA,OAAO,eAAe,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;AACzC,SAAA;AACD,QAAA,OAAO,EAAE,CAAC;KACX;AAED;;;;AAIG;AACO,IAAA,sBAAsB,CAAC,QAAgB,EAAA;AAC/C,QAAA,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;KACpC;AAED;;;;AAIG;AACO,IAAA,mBAAmB,CAAC,QAAgB,EAAA;AAC5C,QAAA,IAAI,CAAC,QAAQ,GAAI,IAAI,CAAC,MAAM,CAAC,YAAuC,GAClE,OAAO,CACR,CAAC;AACF,QAAA,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,CAAC;YACxC,OAAO,EAAE,CAAC,GAAG,MAAa,KACxB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,CAAC;AACrE,SAAA,CAAC,CAAC;KACJ;AAED;;;;;AAKG;IACO,mBAAmB,CAAC,QAAgB,EAAE,QAAc,EAAA;QAC5D,IAAI,QAAQ,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;;AAE/C,YAAA,IAAI,CAAC,OAAO,CAAC,sBAAsB,CACjC,QAAQ,CAAC,GAAG,EACZ,QAAQ,CAAC,YAAY,EACrB,QAAQ,CAAC,kBAAkB,EAC3B,QAAQ,CAAC,QAAQ,KAAK,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,EAAE,EACxD,QAAQ,CACT,CAAC;AACH,SAAA;KACF;AAED;;;;AAIG;AACH,IAAA,4BAA4B,CAC1B,IAAgB,EAAA;QAEhB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC/B,YAAA,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;AACzB,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC,IAAI,CACzD,SAAS,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,yBAAyB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CACxE,CAAC;AACH,SAAA;KACF;AAED;;;;;AAKG;IACO,yBAAyB,CACjC,IAAgB,EAChB,QAAa,EAAA;AAEb,QAAA,IAAI,CAAC,QAAQ,EAAE,QAAQ,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE;AACxD,YAAA,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;AACzB,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,SAAS,GAAW,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC;AACzE,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE;gBACzC,KAAK,EAAE,IAAI,CAAC,GAAG;gBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,gBAAA,OAAO,EAAE;oBACP,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACxB,iBAAA;gBACD,WAAW,EAAE,IAAI,CAAC,WAAW;AAC7B,gBAAA,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;AAC3B,gBAAA,oBAAoB,EAAE,IAAI;aAC3B,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;gBACF,KAAK,EAAE,CAAC,aAAa,KAAK,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC;AAClE,aAAA,CAAC,CACH,CAAC;AACH,SAAA;KACF;AAED;;;;;;AAMG;AACH,IAAA,yBAAyB,CACvB,KAAa,EACb,QAAgB,EAChB,OAAa,EAAA;QAEb,MAAM,uBAAuB,GAAG,MAAM,CAAC;QACvC,IAAI,mBAAmB,GAAG,KAAK,CAAC;AAChC,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;AACjD,QAAA,IAAI,OAAO,IAAI,OAAO,KAAK,KAAK,EAAE;YAChC,mBAAmB,GAAG,IAAI,CAAC;AAC5B,SAAA;AACD,QAAA,OAAO,IAAI,CAAC,yBAAyB,EAAE,CAAC,IAAI,CAC1C,SAAS,CAAC,CAAC,iBAAiB,KAAI;AAC9B,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE;AACtC,gBAAA,OAAO,EAAE,KAAK;AACd,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,mBAAmB,EAAE,mBAAmB;gBACxC,IAAI,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACpC,gBAAA,aAAa,EAAE,iBAAiB;aACjC,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;AACF,gBAAA,KAAK,EAAE,CAAC,QAAQ,KAAI;AAClB,oBAAA,IAAI,QAAQ,CAAC,SAAS,KAAK,uBAAuB,EAAE;AAClD,wBAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACjC,qBAAA;AAAM,yBAAA;AACL,wBAAA,IAAI,CAAC,sBAAsB,CACzB,KAAK,EACL,QAAQ,EACR,QAAQ,CAAC,qBAAqB,EAC9B,QAAQ,CAAC,YAAY,EACrB,QAAQ,CAAC,QAAQ,CAClB,CAAC;AACH,qBAAA;iBACF;AACF,aAAA,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;AAED;;;;AAIG;AACH,IAAA,oCAAoC,CAClC,OAAyC,EAAA;QAEzC,IACE,CAAC,OAAO,EAAE,WAAW;YACrB,CAAC,OAAO,EAAE,KAAK;YACf,CAAC,OAAO,EAAE,SAAS;YACnB,CAAC,OAAO,EAAE,QAAQ,EAClB;AACA,YAAA,OAAO,UAAU,CAAC,mCAAmC,CAAC,CAAC;AACxD,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,SAAS,GAAW,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC;AACzE,YAAA,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAChC,IAAI,UAAU,GAAG,IAAI,CAAC;YACtB,IAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,YAAA,IAAI,OAAO,EAAE;AACX,gBAAA,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;AACzD,aAAA;AAED,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,mCAAmC,EAAE;AACzD,gBAAA,YAAY,EAAE;oBACZ,IAAI,EAAE,OAAO,CAAC,WAAW;oBACzB,cAAc,EAAE,OAAO,CAAC,YAAY,GAAG,GAAG,GAAG,OAAO,CAAC,YAAY;oBACjE,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,KAAK,EAAE,OAAO,CAAC,MAAM;oBACrB,QAAQ,EAAE,OAAO,CAAC,UAAU;oBAC5B,OAAO,EAAE,OAAO,CAAC,OAAO;AACzB,iBAAA;AACD,gBAAA,SAAS,EAAE;oBACT,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,IAAI,OAAO,CAAC,WAAW;AACrB,wBAAA,OAAO,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC;AACnE,oBAAA,UAAU,EAAE,UAAU;AACtB,oBAAA,WAAW,EAAE,QAAQ;AACtB,iBAAA;AACD,gBAAA,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;gBACF,KAAK,EAAE,CAAC,aAAa,KAAK,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC;AAClE,aAAA,CAAC,CACH,CAAC;AACH,SAAA;KACF;AAED;;;AAGG;IACH,sBAAsB,GAAA;QACpB,OAAO,IAAI,CAAC,SAAS,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC;KAClE;AACD;;;;;AAKG;AACH,IAAA,uBAAuB,CAAC,KAAa,EAAA;AACnC,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MACnB,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,GAAG,EAAE,uBAAuB,CAAC;AACpD,YAAA,KAAK,EAAE,KAAK;AACb,SAAA,CAAC,CACH,CAAC;KACH;AAED;;;;AAIG;AACO,IAAA,mBAAmB,CAAC,QAAa,EAAA;AACzC,QAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;AAC1C,YAAA,MAAM,YAAY,GAChB,CAAC,QAAQ,CAAC,gBAAgB;AACxB,gBAAA,QAAQ,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC;gBACpC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5D,qBAAA,OAAO;AACZ,gBAAA,OAAO,CAAC;YACV,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAC3B,YAAY,EACZ,iBAAiB,CAAC,cAAc,CACjC,CAAC;AACH,SAAA;KACF;AAED;;;;AAIG;AACO,IAAA,gBAAgB,CAAC,QAAa,EAAA;AACtC,QAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;AAC1C,YAAA,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAC3B;AACE,gBAAA,GAAG,EAAE,yCAAyC;AAC9C,gBAAA,MAAM,EAAE;oBACN,YAAY,EAAE,QAAQ,CAAC,YAAY;AACpC,iBAAA;AACF,aAAA,EACD,iBAAiB,CAAC,cAAc,CACjC,CAAC;AACH,SAAA;KACF;IAES,yBAAyB,GAAA;AACjC,QAAA,IAAI,IAAI,CAAC,SAAS,EAAE,GAAG,KAAK,SAAS,EAAE;YACrC,MAAM,eAAe,GAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CACpD,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,kBAAkB,EAAE,CACtD,CAAC;AACF,YAAA,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjD,OAAO,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC;AACjD,aAAA;AACF,SAAA;;AAED,QAAA,OAAO,EAAE,CAAC,qBAAqB,CAAC,CAAC;KAClC;AAEO,IAAA,YAAY,CAAC,OAAe,EAAA;AAIlC,QAAA,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,QAAA,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;AACzB,YAAA,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;AACvD,gBAAA,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACvC,aAAA;AAAM,iBAAA,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;AAC5D,gBAAA,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACrC,aAAA;AACF,SAAA;AACD,QAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;KACjC;IAEO,kBAAkB,GAAA;QACxB,IAAI,QAAQ,GAAW,EAAE,CAAC;AAC1B,QAAA,IAAI,CAAC,eAAe;AACjB,aAAA,SAAS,EAAE;AACX,aAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACb,aAAA,SAAS,CAAC,CAAC,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;AAC1C,QAAA,OAAO,QAAQ,CAAC;KACjB;IAEO,yBAAyB,GAAA;QAC/B,IAAI,OAAO,GAAW,EAAE,CAAC;AACzB,QAAA,MAAM,WAAW,GAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;AACtD,QAAA,IAAI,CAAC,eAAe;aACjB,GAAG,CAAC,WAAW,CAAC;AAChB,aAAA,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACb,aAAA,SAAS,CAAC,CAAC,IAAI,MAAM,OAAO,GAAG,IAAI,EAAE,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;AACxD,QAAA,OAAO,OAAO,CAAC;KAChB;AAED;;;;AAIG;AACH,IAAA,6BAA6B,CAAC,KAAa,EAAA;QACzC,IAAI,CAAC,KAAK,IAAI,KAAK,EAAE,MAAM,KAAK,CAAC,EAAE;AACjC,YAAA,OAAO,UAAU,CAAC,mBAAmB,CAAC,CAAC;AACxC,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,wBAAwB,EAAE;AAC9C,gBAAA,OAAO,EAAE,KAAK;aACf,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;gBACF,KAAK,EAAE,CAAC,QAAQ,KAAK,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC;AAC5D,aAAA,CAAC,CACH,CAAC;AACH,SAAA;KACF;AAED;;;AAGG;AACO,IAAA,uBAAuB,CAAC,QAAa,EAAA;AAC7C,QAAA,IAAI,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,EAAE;AACxC,YAAA,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAC3B,EAAE,GAAG,EAAE,0CAA0C,EAAE,EACnD,iBAAiB,CAAC,qBAAqB,CACxC,CAAC;AACH,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,YAAY,GAAG,QAAQ,EAAE,YAAY,IAAI;AAC7C,gBAAA,GAAG,EAAE,2BAA2B;aACjC,CAAC;YACF,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAC3B,YAAY,EACZ,iBAAiB,CAAC,cAAc,CACjC,CAAC;AACH,SAAA;KACF;AAED;;;;;AAKG;AACH,IAAA,6BAA6B,CAAC,IAAU,EAAA;QACtC,IACE,CAAC,IAAI,EAAE,SAAS;AAChB,YAAA,IAAI,EAAE,SAAS,EAAE,MAAM,KAAK,CAAC;YAC7B,CAAC,IAAI,EAAE,QAAQ;AACf,YAAA,IAAI,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC,EAC5B;AACA,YAAA,OAAO,UAAU,CAAC,2BAA2B,CAAC,CAAC;AAChD,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,UAAU,GAAG;AACjB,gBAAA,OAAO,EAAE;oBACP,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACxB,iBAAA;aACF,CAAC;AACF,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACvC,gBAAA,GAAG,UAAU;aACd,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC,MACF,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;gBAC5C,KAAK,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC;aAC5B,CAAC,CACH,CACF,CAAC;AACH,SAAA;KACF;AAED;;;;;AAKG;IACH,kCAAkC,CAChC,WAAmB,EACnB,WAAmB,EAAA;AAEnB,QAAA,IACE,CAAC,WAAW;YACZ,WAAW,EAAE,MAAM,KAAK,CAAC;AACzB,YAAA,CAAC,WAAW;AACZ,YAAA,WAAW,EAAE,MAAM,KAAK,CAAC,EACzB;AACA,YAAA,OAAO,UAAU,CAAC,uBAAuB,CAAC,CAAC;AAC5C,SAAA;AAAM,aAAA;AACL,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACvC,gBAAA,QAAQ,EAAE,WAAW;AACrB,gBAAA,WAAW,EAAE,WAAW;AACzB,aAAA,CAAC,CAAC,IAAI,CACL,GAAG,CAAC;gBACF,KAAK,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC;AAC5B,aAAA,CAAC,CACH,CAAC;AACH,SAAA;KACF;AAED;;;;AAIG;AACH,IAAA,2BAA2B,CAAC,QAAc,EAAA;AACxC,QAAA,IAAI,QAAQ,EAAE;YACZ,MAAM,WAAW,GAAS,EAAE,CAAC;YAC7B,WAAW,CAAC,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC;YACnD,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjD,WAAW,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;;YAEzC,IAAI,CAAC,oBAAoB,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,KAAI;AAC7C,gBAAA,MAAM,YAAY,GAAG,IAAI,EAAE,GAAG,CAAC;gBAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,MAAK;AACxD,oBAAA,IAAI,YAAY,KAAK,WAAW,CAAC,GAAG,EAAE;wBACpC,IAAI,CAAC,UAAU,EAAE,CAAC;AACnB,qBAAA;AACH,iBAAC,CAAC,CAAC;AACL,aAAC,CAAC,CAAC;AACJ,SAAA;KACF;AAED;;;;;AAKG;IACH,+BAA+B,CAC7B,QAAgB,EAChB,QAAgB,EAAA;AAEhB,QAAA,IACE,CAAC,QAAQ;YACT,QAAQ,EAAE,MAAM,KAAK,CAAC;AACtB,YAAA,CAAC,QAAQ;AACT,YAAA,QAAQ,EAAE,MAAM,KAAK,CAAC,EACtB;AACA,YAAA,OAAO,UAAU,CAAC,gCAAgC,CAAC,CAAC;AACrD,SAAA;AAAM,aAAA;;AAEL,YAAA,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,CACrC,SAAS,CAAC,CAAC,IAAI,KAAI;AACjB,gBAAA,MAAM,KAAK,GAAG,IAAI,EAAE,GAAG,CAAC;gBACxB,IAAI,CAAC,KAAK,IAAI,KAAK,EAAE,MAAM,KAAK,CAAC,EAAE;AACjC,oBAAA,OAAO,UAAU,CAAC,gCAAgC,CAAC,CAAC;AACrD,iBAAA;;;;;;;AAOD,gBAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,QAAQ,EAAE;AACrD,oBAAA,WAAW,EAAE,IAAI;AAClB,iBAAA,CAAC,CAAC,IAAI,CACL,SAAS,CAAC,MACR,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;AAChC,oBAAA,OAAO,EAAE;AACP,wBAAA,KAAK,EAAE,QAAQ;AAChB,qBAAA;iBACF,CAAC,CAAC,IAAI,CACL,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;oBACF,IAAI,EAAE,MACJ,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,CACnD,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC;wBACF,KAAK,EAAE,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC;wBAC3B,QAAQ,EAAE,MAAK;4BACb,IAAI,CAAC,UAAU,EAAE,CAAC;yBACnB;AACF,qBAAA,CAAC,CACH;iBACJ,CAAC,CACH,CACF,CACF,CAAC;aACH,CAAC,CACH,CAAC;AACH,SAAA;KACF;AAED;;;AAGG;IACO,oBAAoB,GAAA;QAC5B,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,IAAI,CACtC,MAAM,CAAC,CAAC,IAAI,KAAmB,OAAO,CAAC,IAAI,CAAC,CAAC,EAC7C,IAAI,CAAC,CAAC,CAAC,CACR,CAAC;KACH;AAED;;;;AAIG;AACH,IAAA,6BAA6B,CAC3B,gBAAwB,EACxB,OAAgB,EAChB,IAAa,EACb,OAAgB,EAAA;QAEhB,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,EAAE,MAAM,KAAK,CAAC,EAAE;AACvD,YAAA,OAAO,UAAU,CAAC,qBAAqB,CAAC,CAAC;AAC1C,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,UAAU,GAAG;AACjB,gBAAA,OAAO,EAAE,gBAAgB;gBACzB,IAAI,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBAC3B,IAAI,OAAO,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;gBACpC,IAAI,OAAO,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;aACjC,CAAC;AACF,YAAA,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACvC,gBAAA,OAAO,EAAE,UAAU;AACpB,aAAA,CAAC,CAAC;AACJ,SAAA;KACF;AAED;;;;AAIG;AACO,IAAA,sBAAsB,CAC9B,UAAkB,EAAA;;QAGlB,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC5C,QAAA,IAAI,MAAM,GAAQ,IAAI,CAAC,QAAQ,CAAC;AAChC,QAAA,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;YAC/B,IAAI,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAC3C,gBAAA,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AACzB,aAAA;AACH,SAAC,CAAC,CAAC;AAEH,QAAA,OAAO,MAAM,CAAC;KACf;AAED;;;;;AAKG;IACO,SAAS,CAAC,UAAkB,EAAE,OAAe,EAAA;AACrD,QAAA,OAAO,IAAI,UAAU,CAAM,CAAC,MAAM,KAAI;YACpC,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC;AAC1D,YAAA,IAAI,OAAO,SAAS,IAAI,UAAU,EAAE;AAClC,gBAAA,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAC1C,OAAO;AACR,aAAA;AACD,YAAA,SAAS,CAAC;AACR,gBAAA,GAAG,OAAO;AACV,gBAAA,QAAQ,EAAE,CAAC,QAAa,KAAI;AAC1B,oBAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAK;AACjB,wBAAA,IAAI,QAAQ,EAAE,MAAM,KAAK,IAAI,EAAE;AAC7B,4BAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BACtB,MAAM,CAAC,QAAQ,EAAE,CAAC;AACnB,yBAAA;AAAM,6BAAA;AACL,4BAAA,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACxB,yBAAA;AACH,qBAAC,CAAC,CAAC;iBACJ;AACF,aAAA,CAAC,CAAC;AACL,SAAC,CAAC,CAAC;KACJ;AAED;;;;AAIG;IACH,qBAAqB,CACnB,wBAAiC,KAAK,EAAA;AAEtC,QAAA,MAAM,QAAQ,GAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACnD,MAAM,aAAa,GAAW,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;AAC5E,QAAA,MAAM,WAAW,GAAG,IAAI,eAAe,CACrC,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CACpD,CAAC;QACF,MAAM,UAAU,GAAkB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC5D,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,gCAAgC,EAAE;AACtD,YAAA,MAAM,EAAE,UAAU;AACnB,SAAA,CAAC,CAAC,IAAI,CACL,GAAG,CAAC;AACF,YAAA,IAAI,EAAE,CAAC,QAAQ,KAAI;AACjB,gBAAA,IAAI,qBAAqB,EAAE;AACzB,oBAAA,IAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;AACzD,iBAAA;aACF;AACF,SAAA,CAAC,CACH,CAAC;KACH;AAED;;;;;;;AAOG;AACH,IAAA,yBAAyB,CACvB,GAAW,EACX,IAAY,EACZ,WAAgB,EAChB,QAAiB,EAAA;AAEjB,QAAA,MAAM,SAAS,GAAW,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,IAAI,EAAE,CAAC;AACzE,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;AACvC,YAAA,GAAG,EAAE,GAAG;AACR,YAAA,IAAI,EAAE,IAAI;AACV,YAAA,WAAW,EAAE,WAAW;AACxB,YAAA,SAAS,EAAE,SAAS;AACpB,YAAA,QAAQ,EAAE,QAAQ;AACnB,SAAA,CAAC,CAAC,IAAI,CACL,GAAG,CAAC;AACF,YAAA,KAAK,EAAE,CAAC,KAAK,KAAI;gBACf,UAAU,CAAC,KAAK,CAAC,CAAC;aACnB;AACF,SAAA,CAAC,CACH,CAAC;KACH;AAED;;;;;;;;AAQG;IACH,sBAAsB,CACpB,IAAY,EACZ,QAAgB,EAChB,YAAsB,EACtB,YAAoB,EACpB,QAAgB,EAAA;QAEhB,MAAM,UAAU,GAAa,EAAE,CAAC;AAChC,QAAA,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAI;YAChC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAC9D,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,OAAO,CACrD,mBAAmB,EACnB,EAAE,CACH,CAAC;AACF,YAAA,UAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAC1C,SAAC,CAAC,CAAC;AACH,QAAA,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAClD,QAAA,iBAAiB,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,QAAA,iBAAiB,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACtC,QAAA,iBAAiB,CAAC,UAAU,GAAG,UAAU,CAAC;AAC1C,QAAA,iBAAiB,CAAC,YAAY,GAAG,YAAY,CAAC;AAC9C,QAAA,iBAAiB,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACtC,QAAA,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;KAC/C;IAES,UAAU,GAAA;AAClB,QAAA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;AACnB,QAAA,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;KACvC;IAED,WAAW,GAAA;QACT,IAAI,IAAI,CAAC,YAAY,EAAE;AACrB,YAAA,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;AACjC,SAAA;KACF;;AA5wBU,YAAA,CAAA,IAAA,GAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,uQAgBb,WAAW,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,YAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,8BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAhBV,YAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,YAAY,cAFX,MAAM,EAAA,CAAA,CAAA;2FAEP,YAAY,EAAA,UAAA,EAAA,CAAA;kBAHxB,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;0BAiBI,MAAM;2BAAC,WAAW,CAAA;;;AChEvB;;;;AAIG;;ACJH;;;;AAIG;MAgBU,qBAAqB,CAAA;IAChC,WACY,CAAA,eAAgC,EAChC,iBAAoC,EACpC,YAA0B,EAC1B,SAA2B,EAC3B,kBAAkD,EAAA;QAJlD,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;QAChC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAC1B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAkB;QAC3B,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAgC;KAC1D;AAEJ;;;;;;;AAOG;AACH,IAAA,gBAAgB,CACd,gBAAyB,EACzB,YAAsB,EACtB,IAAa,EACb,QAAiB,EAAA;AAEjB,QAAA,IAAI,OAAwB,CAAC;QAC7B,IAAI,oBAAoB,GAAQ,EAAE,CAAC;AACnC,QAAA,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;YACtC,OAAO,GAAG,EAAE,CAAC;AACb,YAAA,OAAO,CAAC,EAAE,GAAG,WAAW,CAAC;AACzB,YAAA,OAAO,CAAC,cAAc,GAAG,EAAE,CAAC;AAC5B,YAAA,IAAI,gBAAgB,EAAE;gBACpB,OAAO,CAAC,cAAc,CAAC,gBAAgB,GAAG,IAAI,IAAI,EAAE,CAAC;AACtD,aAAA;AAAM,iBAAA;gBACL,OAAO,CAAC,cAAc,CAAC,oBAAoB,GAAG,IAAI,IAAI,EAAE,CAAC;AAC1D,aAAA;AACD,YAAA,MAAM,UAAU,GAAQ,IAAI,CAAC,SAAS,CAAC,OAAO,CAC5C,OAAO,EACP,8BAA8B,CAC/B,CAAC;YACF,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,UAAU,CAAC,CAAC;AACxE,SAAA;QACD,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,IAAI,IAAI,KAAK,SAAS,EAAE;AACtB,YAAA,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC;AACjC,SAAA;aAAM,IAAI,IAAI,KAAK,SAAS,EAAE;YAC7B,MAAM,GAAG,IAAI,CAAC;AACf,SAAA;AAED,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAEjD,OAAO,IAAI,CAAC,YAAY;aACrB,yBAAyB,CACxB,MAAM,EACN,eAAe,EACf,oBAAoB,EACpB,QAAQ,CACT;aACA,IAAI,CACH,GAAG,CAAC;AACF,YAAA,KAAK,EAAE,CAAC,KAAK,KAAI;gBACf,UAAU,CAAC,KAAK,CAAC,CAAC;aACnB;AACF,SAAA,CAAC,CACH,CAAC;KACL;AAED;;;AAGG;IACH,SAAS,GAAA;AACP,QAAA,IAAI,GAAuB,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,IAAI,KAAI;AAC9C,YAAA,GAAG,GAAG,IAAI,EAAE,GAAG,CAAC;AAClB,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,GAAG,CAAC;KACZ;AAED;;;AAGG;IACH,iBAAiB,GAAA;QACf,IAAI,eAAe,GAAW,EAAE,CAAC;AACjC,QAAA,IAAI,CAAC,eAAe;AACjB,aAAA,SAAS,EAAE;aACX,SAAS,CAAC,CAAC,QAAQ,MAAM,eAAe,GAAG,QAAQ,CAAC,CAAC;AACrD,aAAA,WAAW,EAAE,CAAC;AACjB,QAAA,OAAO,eAAe,CAAC;KACxB;;kHAxFU,qBAAqB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAF,EAAA,CAAA,eAAA,EAAA,EAAA,EAAA,KAAA,EAAAG,EAAA,CAAA,iBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,YAAA,EAAA,EAAA,EAAA,KAAA,EAAAJ,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAAK,8BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAArB,qBAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,qBAAqB,cADR,MAAM,EAAA,CAAA,CAAA;2FACnB,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBADjC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAA;;;ACnBlC;;;;AAIG;AAgBG,MAAO,qBAAsB,SAAQ,qBAAqB,CAAA;IAC9D,WACY,CAAA,IAAgB,EAChB,YAAiC,EACjC,SAA2B,EAC3B,qBAA4C,EAC5C,kBAAkD,EAAA;AAE5D,QAAA,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;QAN3B,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAY;QAChB,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAqB;QACjC,IAAS,CAAA,SAAA,GAAT,SAAS,CAAkB;QAC3B,IAAqB,CAAA,qBAAA,GAArB,qBAAqB,CAAuB;QAC5C,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAgC;KAG7D;AAED,IAAA,YAAY,CAAC,MAAc,EAAA;AACzB,QAAA,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KACnC;AACD,IAAA,WAAW,CACT,MAAc,EACd,iBAAyB,EACzB,sBAA8B,EAAA;QAE9B,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,EAAE;YACpE,OAAO,KAAK,CAAC,WAAW,CACtB,MAAM,EACN,iBAAiB,EACjB,sBAAsB,CACvB,CAAC;AACH,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,qBAAqB;AAC9B,iBAAA,gBAAgB,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,CAAC;AAC3C,iBAAA,IAAI,CACH,UAAU,CAAC,CAAC,KAAU,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,EAC7C,SAAS,CAAC,CAAC,MAAM,KAAI;AACnB,gBAAA,IAAI,MAAM,EAAE,SAAS,KAAK,CAAC,EAAE;oBAC3B,OAAO,KAAK,CAAC,WAAW,CACtB,MAAM,EACN,iBAAiB,EACjB,sBAAsB,CACvB,CAAC;AACH,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;aACd,CAAC,CACH,CAAC;AACL,SAAA;KACF;AAED,IAAA,eAAe,CACb,MAAc,EACd,WAAmB,EACnB,SAAkB,EAAA;QAElB,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,SAAS,IAAI,EAAE,CAAC,EAAE;YAClE,OAAO,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACnD,SAAA;AAAM,aAAA;YACL,OAAO,IAAI,CAAC,qBAAqB;AAC9B,iBAAA,gBAAgB,CAAC,KAAK,EAAE,SAAS,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;AACrD,iBAAA,IAAI,CACH,UAAU,CAAC,CAAC,KAAU,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,EAC7C,SAAS,CAAC,CAAC,MAAM,KAAI;AACnB,gBAAA,IAAI,MAAM,EAAE,SAAS,KAAK,CAAC,EAAE;oBAC3B,OAAO,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACnD,iBAAA;AACD,gBAAA,OAAO,KAAK,CAAC;aACd,CAAC,CACH,CAAC;AACL,SAAA;KACF;;kHAhEU,qBAAqB,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,KAAA,EAAA,EAAA,CAAA,gBAAA,EAAA,EAAA,EAAA,KAAA,EAAAC,qBAAA,EAAA,EAAA,EAAA,KAAA,EAAAD,8BAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAArB,qBAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,qBAAqB,cADR,MAAM,EAAA,CAAA,CAAA;2FACnB,qBAAqB,EAAA,UAAA,EAAA,CAAA;kBADjC,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAA;;;ACnBlC;;;;AAIG;MA0BU,0BAA0B,CAAA;;uHAA1B,0BAA0B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;wHAA1B,0BAA0B,EAAA,OAAA,EAAA,CAd3B,YAAY,EAAE,UAAU,CAAA,EAAA,CAAA,CAAA;AAcvB,0BAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,0BAA0B,EAb1B,SAAA,EAAA;AACT,QAAA,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,qBAAqB,EAAE;AAChE,QAAA;AACE,YAAA,OAAO,EAAE,iCAAiC;AAC1C,YAAA,QAAQ,EAAE,oCAAoC;AAC/C,SAAA;AACD,QAAA;AACE,YAAA,OAAO,EAAE,8BAA8B;AACvC,YAAA,WAAW,EAAE,2BAA2B;AACxC,YAAA,KAAK,EAAE,IAAI;AACZ,SAAA;KACF,EAZS,OAAA,EAAA,CAAA,YAAY,EAAE,UAAU,CAAA,EAAA,CAAA,CAAA;2FAcvB,0BAA0B,EAAA,UAAA,EAAA,CAAA;kBAftC,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;AACR,oBAAA,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;AACnC,oBAAA,SAAS,EAAE;AACT,wBAAA,EAAE,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,qBAAqB,EAAE;AAChE,wBAAA;AACE,4BAAA,OAAO,EAAE,iCAAiC;AAC1C,4BAAA,QAAQ,EAAE,oCAAoC;AAC/C,yBAAA;AACD,wBAAA;AACE,4BAAA,OAAO,EAAE,8BAA8B;AACvC,4BAAA,WAAW,EAAE,2BAA2B;AACxC,4BAAA,KAAK,EAAE,IAAI;AACZ,yBAAA;AACF,qBAAA;AACF,iBAAA,CAAA;;;AC7BD;;;;AAIG;AAII,MAAM,eAAe,GAAiB;AAC3C,IAAA,QAAQ,EAAE;QACR,KAAK,EAAE,CAAC,YAAY,CAAC;AACrB,QAAA,SAAS,EAAE,KAAK;AAChB,QAAA,QAAQ,EAAE,IAAI;AACf,KAAA;AACD,IAAA,gBAAgB,EAAE;QAChB,KAAK,EAAE,CAAC,qBAAqB,CAAC;AAC9B,QAAA,SAAS,EAAE,KAAK;AAChB,QAAA,QAAQ,EAAE,IAAI;AACf,KAAA;AACD,IAAA,kBAAkB,EAAE;QAClB,KAAK,EAAE,CAAC,mBAAmB,CAAC;AAC5B,QAAA,SAAS,EAAE,KAAK;AAChB,QAAA,QAAQ,EAAE,IAAI;AACf,KAAA;CACF,CAAC;AAEK,MAAM,uBAAuB,GAAkB;AACpD,IAAA,OAAO,EAAE;AACP,QAAA,MAAM,EAAE,eAAe;AACxB,KAAA;CACF;;AC9BD;;;;AAIG;AAaH;;;;AAIG;AAIG,MAAO,cAAe,SAAQ,WAAW,CAAA;IAC7C,WACY,CAAA,IAAiB,EACjB,GAAe,EACf,mBAAwC,EACxC,eAAuC,EACvC,MAAc,EACd,MAAiB,EAAA;QAE3B,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,mBAAmB,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;QAPrD,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAa;QACjB,IAAG,CAAA,GAAA,GAAH,GAAG,CAAY;QACf,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAwB;QACvC,IAAM,CAAA,MAAA,GAAN,MAAM,CAAQ;QACd,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;KAG5B;AAED;;AAEG;IACO,aAAa,GAAA;AACpB,QAAA,IAAI,CAAC,MAAM,CAAC,YAAuC,GAClD,OAAO,CACR,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;KACvB;AAED;;;AAGG;IACO,MAAM,GAAA;AACd,QAAA,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;KAC5D;;2GA3BU,cAAc,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAAL,EAAA,CAAA,WAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,UAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,KAAA,EAAAA,EAAA,CAAA,sBAAA,EAAA,EAAA,EAAA,KAAA,EAAAG,IAAA,CAAA,MAAA,EAAA,EAAA,EAAA,KAAA,EAAAH,EAAA,CAAA,SAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAd,cAAA,CAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAc,cAFb,MAAM,EAAA,CAAA,CAAA;2FAEP,cAAc,EAAA,UAAA,EAAA,CAAA;kBAH1B,UAAU;AAAC,YAAA,IAAA,EAAA,CAAA;AACV,oBAAA,UAAU,EAAE,MAAM;AACnB,iBAAA,CAAA;;;ACxBD;;;;AAIG;AAkBa,SAAA,YAAY,CAC1B,YAA0B,EAC1B,UAAoC,EAAA;AAEpC,IAAA,MAAM,IAAI,GAAG,MACX,UAAU;AACP,SAAA,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC;AAC3B,SAAA,IAAI,CACH,GAAG,CAAC,MAAK;QACP,YAAY,CAAC,UAAU,EAAE,CAAC;AAC5B,KAAC,CAAC,CACH;AACA,SAAA,SAAS,EAAE,CAAC;AACjB,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;SAEe,0BAA0B,GAAA;AACxC,IAAA,MAAM,MAAM,GAAc;AACxB,QAAA,cAAc,EAAE;YACd,CAAC,WAAW,GAAG;gBACb,aAAa,EAAE,CAAC,oBAAoB,CAAC;AACtC,aAAA;;YAED,CAAC,gBAAgB,GAAG,WAAW;AAChC,SAAA;KACF,CAAC;AACF,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;MAgBY,aAAa,CAAA;;0GAAb,aAAa,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAb,aAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,YAbd,0BAA0B,CAAA,EAAA,CAAA,CAAA;AAazB,aAAA,CAAA,IAAA,GAAA,EAAA,CAAA,mBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,aAAa,EAZb,SAAA,EAAA;QACT,2BAA2B,CAAC,0BAA0B,CAAC;AACvD,QAAA,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE;AACrD,QAAA;AACE,YAAA,OAAO,EAAE,eAAe;AACxB,YAAA,UAAU,EAAE,YAAY;AACxB,YAAA,IAAI,EAAE,CAAC,YAAY,EAAE,wBAAwB,CAAC;AAC9C,YAAA,KAAK,EAAE,IAAI;AACZ,SAAA;QACD,oBAAoB,CAAC,uBAAuB,CAAC;AAC9C,KAAA,EAAA,OAAA,EAAA,CAXS,0BAA0B,CAAA,EAAA,CAAA,CAAA;2FAazB,aAAa,EAAA,UAAA,EAAA,CAAA;kBAdzB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACR,OAAO,EAAE,CAAC,0BAA0B,CAAC;AACrC,oBAAA,SAAS,EAAE;wBACT,2BAA2B,CAAC,0BAA0B,CAAC;AACvD,wBAAA,EAAE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE;AACrD,wBAAA;AACE,4BAAA,OAAO,EAAE,eAAe;AACxB,4BAAA,UAAU,EAAE,YAAY;AACxB,4BAAA,IAAI,EAAE,CAAC,YAAY,EAAE,wBAAwB,CAAC;AAC9C,4BAAA,KAAK,EAAE,IAAI;AACZ,yBAAA;wBACD,oBAAoB,CAAC,uBAAuB,CAAC;AAC9C,qBAAA;AACF,iBAAA,CAAA;;;AChED;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;;;AAIG;;ACJH;;AAEG;;;;"}