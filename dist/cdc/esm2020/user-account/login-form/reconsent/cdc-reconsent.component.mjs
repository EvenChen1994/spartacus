/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { UntypedFormGroup } from '@angular/forms';
import { AnonymousConsentsService } from '@spartacus/core';
import { ICON_TYPE, LaunchDialogService, } from '@spartacus/storefront';
import { of, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { CdcReconsentComponentService } from './cdc-reconsent-component.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/core";
import * as i3 from "./cdc-reconsent-component.service";
import * as i4 from "@angular/common";
export class CdcReconsentComponent {
    constructor(launchDialogService, anonymousConsentsService, cdcReconsentService) {
        this.launchDialogService = launchDialogService;
        this.anonymousConsentsService = anonymousConsentsService;
        this.cdcReconsentService = cdcReconsentService;
        this.subscription = new Subscription();
        this.form = new UntypedFormGroup({});
        this.iconTypes = ICON_TYPE;
        this.loaded$ = of(false);
        this.reconsentEvent = {};
        this.selectedConsents = [];
        this.disableSubmitButton = true;
        this.totalConsents = 0;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'button',
            focusOnEscape: true,
        };
    }
    ngOnInit() {
        this.subscription.add(this.launchDialogService.data$.subscribe((data) => {
            this.reconsentEvent['user'] = data.user;
            this.reconsentEvent['password'] = data.password;
            this.reconsentEvent['regToken'] = data.regToken;
            this.reconsentEvent['errorMessage'] = data.errorMessage;
            this.loadConsents(data.consentIds);
        }));
    }
    loadConsents(reconsentIds) {
        this.templateList$ = this.anonymousConsentsService.getTemplates(true).pipe(map((templateList) => {
            const output = [];
            templateList.forEach((template) => {
                if (template.id && reconsentIds.includes(template.id)) {
                    output.push(template);
                }
            });
            this.totalConsents = output.length;
            return output;
        }));
        this.loaded$ = of(true);
    }
    onConsentChange(event) {
        if (event.given === false && event.template?.id) {
            const index = this.selectedConsents.indexOf(event.template.id);
            if (index !== -1) {
                this.selectedConsents.splice(index, 1);
            }
        }
        else if (event.given === true && event.template?.id) {
            this.selectedConsents.push(event.template.id);
        }
        if (this.totalConsents === this.selectedConsents.length) {
            this.disableSubmitButton = false;
        }
        else {
            this.disableSubmitButton = true;
        }
    }
    dismissDialog(reason, message) {
        if (reason === 'Proceed To Login') {
            this.loaded$ = of(false);
            this.cdcReconsentService.saveConsentAndLogin(this.selectedConsents, this.reconsentEvent);
        }
        else {
            this.cdcReconsentService.handleReconsentUpdateError(reason, message);
        }
    }
    ngOnDestroy() {
        this.subscription?.unsubscribe();
    }
}
CdcReconsentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CdcReconsentComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.AnonymousConsentsService }, { token: i3.CdcReconsentComponentService }], target: i0.ɵɵFactoryTarget.Component });
CdcReconsentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: CdcReconsentComponent, selector: "cx-anonymous-consent-dialog", ngImport: i0, template: "<div\n  class=\"cx-anonymous-consent-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"dismissDialog('Escape pressed', reconsentEvent.errorMessage)\"\n>\n  <div class=\"cx-dialog-content\">\n    <!-- Modal Header -->\n    <ng-container *ngIf=\"loaded$ | async; else loading\">\n      <div class=\"cx-dialog-header\">\n        <h3>\n          {{ 'reconsent.dialog.title' | cxTranslate }}\n        </h3>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissDialog('Cross click', reconsentEvent.errorMessage)\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n      <div class=\"cx-dialog-description\">\n        {{ 'reconsent.dialog.description' | cxTranslate }}\n        <div\n          class=\"cx-dialog-separator col-sm-12 d-xs-block d-sm-block d-md-none\"\n        ></div>\n      </div>\n      <div class=\"cx-dialog-buttons\"></div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body\" *ngIf=\"templateList$ | async as templateList\">\n        <div\n          class=\"cx-dialog-row col-sm-12 col-md-6\"\n          *ngFor=\"let consentTemplate of templateList\"\n        >\n          <cx-consent-management-form\n            [consentTemplate]=\"consentTemplate\"\n            (consentChanged)=\"onConsentChange($event)\"\n          ></cx-consent-management-form>\n        </div>\n      </div>\n      <!-- Actions -->\n      <div class=\"cx-dialog-buttons\">\n        <a\n          [class.disabled]=\"disableSubmitButton\"\n          (click)=\"\n            dismissDialog('Proceed To Login', reconsentEvent.errorMessage)\n          \"\n          class=\"btn btn-primary\"\n          autofocus\n          >{{ 'common.submit' | cxTranslate }}</a\n        >\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #loading>\n    <cx-spinner></cx-spinner>\n  </ng-template>\n</div>\n", dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.SpinnerComponent, selector: "cx-spinner" }, { kind: "component", type: i1.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "component", type: i1.ConsentManagementFormComponent, selector: "cx-consent-management-form", inputs: ["consentTemplate", "requiredConsents", "consent"], outputs: ["consentChanged"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CdcReconsentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-anonymous-consent-dialog', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"cx-anonymous-consent-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"dismissDialog('Escape pressed', reconsentEvent.errorMessage)\"\n>\n  <div class=\"cx-dialog-content\">\n    <!-- Modal Header -->\n    <ng-container *ngIf=\"loaded$ | async; else loading\">\n      <div class=\"cx-dialog-header\">\n        <h3>\n          {{ 'reconsent.dialog.title' | cxTranslate }}\n        </h3>\n        <button\n          type=\"button\"\n          class=\"close\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"dismissDialog('Cross click', reconsentEvent.errorMessage)\"\n        >\n          <span aria-hidden=\"true\">\n            <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n          </span>\n        </button>\n      </div>\n      <div class=\"cx-dialog-description\">\n        {{ 'reconsent.dialog.description' | cxTranslate }}\n        <div\n          class=\"cx-dialog-separator col-sm-12 d-xs-block d-sm-block d-md-none\"\n        ></div>\n      </div>\n      <div class=\"cx-dialog-buttons\"></div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body\" *ngIf=\"templateList$ | async as templateList\">\n        <div\n          class=\"cx-dialog-row col-sm-12 col-md-6\"\n          *ngFor=\"let consentTemplate of templateList\"\n        >\n          <cx-consent-management-form\n            [consentTemplate]=\"consentTemplate\"\n            (consentChanged)=\"onConsentChange($event)\"\n          ></cx-consent-management-form>\n        </div>\n      </div>\n      <!-- Actions -->\n      <div class=\"cx-dialog-buttons\">\n        <a\n          [class.disabled]=\"disableSubmitButton\"\n          (click)=\"\n            dismissDialog('Proceed To Login', reconsentEvent.errorMessage)\n          \"\n          class=\"btn btn-primary\"\n          autofocus\n          >{{ 'common.submit' | cxTranslate }}</a\n        >\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #loading>\n    <cx-spinner></cx-spinner>\n  </ng-template>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.AnonymousConsentsService }, { type: i3.CdcReconsentComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,