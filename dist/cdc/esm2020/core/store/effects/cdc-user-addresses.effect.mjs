/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { CdcJsService } from '@spartacus/cdc/root';
import { GlobalMessageService, GlobalMessageType, UserActions, UserAddressConnector, UserAddressService, UserIdService, } from '@spartacus/core';
import { mergeMap, switchMap, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@spartacus/core";
import * as i3 from "@spartacus/cdc/root";
export class CdcUserAddressesEffects {
    getAddresses() {
        return this.userIdService.takeUserId().pipe(take(1), switchMap((userId) => this.userAddressConnector.getAll(userId)));
    }
    getDefaultAddress(addresses) {
        return addresses.find((address) => address?.defaultAddress === true);
    }
    getCountryName(countries, countryIsocode) {
        return countries.find((country) => country.isocode === countryIsocode)
            ?.name;
    }
    updateDefaultAddressInCDC() {
        return this.getAddresses().pipe(take(1), switchMap((addresses) => {
            const defaultAddress = this.getDefaultAddress(addresses) || {};
            return this.sendAddressToCDC(defaultAddress);
        }));
    }
    sendAddressToCDC(address) {
        //send to CDC
        const formattedAddress = address.formattedAddress || ' ';
        return this.userAddressService.getDeliveryCountries().pipe(take(1), switchMap((countries) => {
            const countryName = this.getCountryName(countries, address.country?.isocode || ' ') ||
                ' ';
            return this.cdcJsService.updateAddressWithoutScreenSet(formattedAddress, address.postalCode || ' ', address.town || ' ', countryName);
        }));
    }
    showErrorMessage(error) {
        const errorMessage = error?.errorMessage || ' ';
        this.messageService.add(errorMessage, GlobalMessageType.MSG_TYPE_ERROR);
    }
    constructor(actions$, userIdService, userAddressConnector, userAddressService, messageService, cdcJsService) {
        this.actions$ = actions$;
        this.userIdService = userIdService;
        this.userAddressConnector = userAddressConnector;
        this.userAddressService = userAddressService;
        this.messageService = messageService;
        this.cdcJsService = cdcJsService;
        this.addressFieldKeys = ['line1', 'line2', 'region.name', 'town', 'postalCode'];
        this.cdcAddUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.ADD_USER_ADDRESS_SUCCESS), mergeMap(() => this.updateDefaultAddressInCDC()), tap({
            error: (error) => this.showErrorMessage(error),
        })), { dispatch: false });
        this.cdcUpdateUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS), mergeMap(() => this.updateDefaultAddressInCDC()), tap({
            error: (error) => this.showErrorMessage(error),
        })), { dispatch: false });
        this.cdcDeleteUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS), mergeMap(() => this.updateDefaultAddressInCDC()), tap({
            error: (error) => this.showErrorMessage(error),
        })), { dispatch: false });
    }
}
CdcUserAddressesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CdcUserAddressesEffects, deps: [{ token: i1.Actions }, { token: i2.UserIdService }, { token: i2.UserAddressConnector }, { token: i2.UserAddressService }, { token: i2.GlobalMessageService }, { token: i3.CdcJsService }], target: i0.ɵɵFactoryTarget.Injectable });
CdcUserAddressesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CdcUserAddressesEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CdcUserAddressesEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserIdService }, { type: i2.UserAddressConnector }, { type: i2.UserAddressService }, { type: i2.GlobalMessageService }, { type: i3.CdcJsService }]; } });
//# sourceMappingURL=data:application/json;base64,