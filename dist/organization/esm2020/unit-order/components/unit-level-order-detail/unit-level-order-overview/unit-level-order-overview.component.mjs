/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../unit-level-order-detail.service";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/storefront";
export class UnitLevelOrderOverviewComponent {
    constructor(translation, unitLevelOrderDetailsService) {
        this.translation = translation;
        this.unitLevelOrderDetailsService = unitLevelOrderDetailsService;
    }
    ngOnInit() {
        this.order$ = this.unitLevelOrderDetailsService.getOrderDetails();
    }
    getOrderCodeCardContent(orderCode) {
        return this.translation.translate('orderDetails.orderNumber').pipe(filter(() => Boolean(orderCode)), map((textTitle) => ({
            title: textTitle,
            text: [orderCode],
        })));
    }
    getOrderCurrentDateCardContent(isoDate) {
        return this.translation.translate('orderDetails.placedOn').pipe(filter(() => Boolean(isoDate)), map((textTitle) => {
            return {
                title: textTitle,
                text: [isoDate],
            };
        }));
    }
    getOrderStatusCardContent(status) {
        return combineLatest([
            this.translation.translate('orderDetails.status'),
            status
                ? this.translation.translate('orderDetails.statusDisplay_' + status)
                : of(''),
        ]).pipe(filter(() => Boolean(status)), map(([textTitle, textStatus]) => ({
            title: textTitle,
            text: [textStatus],
        })));
    }
    getPurchaseOrderNumber(poNumber) {
        return combineLatest([
            this.translation.translate('orderDetails.purchaseOrderNumber'),
            this.translation.translate('orderDetails.emptyPurchaseOrderId'),
        ]).pipe(filter(() => Boolean(poNumber)), map(([textTitle, noneTextTitle]) => ({
            title: textTitle,
            text: [poNumber ? poNumber : noneTextTitle],
        })));
    }
    getMethodOfPaymentCardContent(hasPaymentInfo) {
        return combineLatest([
            this.translation.translate('orderDetails.methodOfPayment'),
            this.translation.translate('paymentTypes.paymentType_ACCOUNT'),
            this.translation.translate('paymentTypes.paymentType_CARD'),
        ]).pipe(filter(() => Boolean(hasPaymentInfo)), map(([textTitle, textAccount, textCard]) => ({
            title: textTitle,
            text: [Boolean(hasPaymentInfo) ? textCard : textAccount],
        })));
    }
    getCostCenterCardContent(costCenter) {
        return this.translation.translate('orderDetails.costCenter').pipe(filter(() => Boolean(costCenter)), map((textTitle) => ({
            title: textTitle,
            textBold: costCenter?.name,
            text: [`(${costCenter?.unit?.name})`],
        })));
    }
    getAddressCardContent(deliveryAddress) {
        return this.translation.translate('addressCard.shipTo').pipe(filter(() => Boolean(deliveryAddress)), map((textTitle) => {
            const formattedAddress = this.normalizeFormattedAddress(deliveryAddress?.formattedAddress ?? '');
            return {
                title: textTitle,
                textBold: `${deliveryAddress?.firstName} ${deliveryAddress?.lastName}`,
                text: [formattedAddress, deliveryAddress?.country?.name],
            };
        }));
    }
    getDeliveryModeCardContent(deliveryMode) {
        return this.translation.translate('orderDetails.shippingMethod').pipe(filter(() => Boolean(deliveryMode)), map((textTitle) => ({
            title: textTitle,
            textBold: deliveryMode?.name,
            text: [
                deliveryMode?.description,
                deliveryMode?.deliveryCost?.formattedValue
                    ? deliveryMode.deliveryCost?.formattedValue
                    : '',
            ],
        })));
    }
    getPaymentInfoCardContent(payment) {
        return combineLatest([
            this.translation.translate('paymentForm.payment'),
            this.translation.translate('paymentCard.expires', {
                month: payment ? payment.expiryMonth : '',
                year: payment ? payment.expiryYear : '',
            }),
        ]).pipe(filter(() => Boolean(payment)), map(([textTitle, textExpires]) => ({
            title: textTitle,
            textBold: payment?.accountHolderName,
            text: [payment?.cardNumber, textExpires],
        })));
    }
    getBillingAddressCardContent(billingAddress) {
        return this.translation.translate('paymentForm.billingAddress').pipe(filter(() => Boolean(billingAddress)), map((textTitle) => ({
            title: textTitle,
            textBold: `${billingAddress?.firstName} ${billingAddress?.lastName}`,
            text: [
                billingAddress?.formattedAddress,
                billingAddress?.country?.name,
            ],
        })));
    }
    getBuyerNameCardContent(customer) {
        return this.translation.translate('unitLevelOrderDetails.buyer').pipe(filter(() => Boolean(customer)), map((textTitle) => ({
            title: textTitle,
            text: [customer?.name, `(${customer?.email})`],
        })));
    }
    getUnitNameCardContent(orgUnit) {
        return this.translation.translate('orderDetails.unit').pipe(filter(() => Boolean(orgUnit)), map((textTitle) => ({
            title: textTitle,
            text: [orgUnit],
        })));
    }
    normalizeFormattedAddress(formattedAddress) {
        const addresses = formattedAddress
            .split(',')
            .map((address) => address.trim());
        return addresses.filter(Boolean).join(', ');
    }
}
UnitLevelOrderOverviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UnitLevelOrderOverviewComponent, deps: [{ token: i1.TranslationService }, { token: i2.UnitLevelOrderDetailService }], target: i0.ɵɵFactoryTarget.Component });
UnitLevelOrderOverviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: UnitLevelOrderOverviewComponent, selector: "cx-unit-level-order-overview", ngImport: i0, template: "<div class=\"cx-order-summary\" *ngIf=\"order$ | async as order\">\n  <div class=\"container\">\n    <div class=\"cx-summary-card\">\n      <cx-card\n        [content]=\"getOrderCodeCardContent(order.code) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"\n          getOrderCurrentDateCardContent(order.created | cxDate) | async\n        \"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getOrderStatusCardContent(order.statusDisplay) | async\"\n      ></cx-card>\n\n      <cx-card\n        class=\"cx-display-inline\"\n        [content]=\"getBuyerNameCardContent(order.orgCustomer) | async\"\n      ></cx-card>\n    </div>\n    <div class=\"cx-summary-card\">\n      <cx-card\n        [content]=\"getUnitNameCardContent(order.orgUnit?.name) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getPurchaseOrderNumber(order.purchaseOrderNumber) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getMethodOfPaymentCardContent(order.paymentInfo) | async\"\n      ></cx-card>\n\n      <ng-container *ngIf=\"order.costCenter\">\n        <cx-card\n          [content]=\"getCostCenterCardContent(order.costCenter) | async\"\n        ></cx-card>\n      </ng-container>\n    </div>\n\n    <div class=\"cx-summary-card\">\n      <ng-container *ngIf=\"order.deliveryAddress\">\n        <cx-card\n          [content]=\"getAddressCardContent(order.deliveryAddress) | async\"\n        ></cx-card>\n      </ng-container>\n\n      <ng-container *ngIf=\"order.deliveryMode\">\n        <cx-card\n          [content]=\"getDeliveryModeCardContent(order.deliveryMode) | async\"\n        ></cx-card>\n      </ng-container>\n    </div>\n\n    <ng-container *ngIf=\"order.paymentInfo\">\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"getPaymentInfoCardContent(order.paymentInfo) | async\"\n        ></cx-card>\n\n        <cx-card\n          [content]=\"\n            getBillingAddressCardContent(order.paymentInfo?.billingAddress)\n              | async\n          \"\n        ></cx-card>\n      </div>\n    </ng-container>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit", "index"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.CxDatePipe, name: "cxDate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UnitLevelOrderOverviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-unit-level-order-overview', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"cx-order-summary\" *ngIf=\"order$ | async as order\">\n  <div class=\"container\">\n    <div class=\"cx-summary-card\">\n      <cx-card\n        [content]=\"getOrderCodeCardContent(order.code) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"\n          getOrderCurrentDateCardContent(order.created | cxDate) | async\n        \"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getOrderStatusCardContent(order.statusDisplay) | async\"\n      ></cx-card>\n\n      <cx-card\n        class=\"cx-display-inline\"\n        [content]=\"getBuyerNameCardContent(order.orgCustomer) | async\"\n      ></cx-card>\n    </div>\n    <div class=\"cx-summary-card\">\n      <cx-card\n        [content]=\"getUnitNameCardContent(order.orgUnit?.name) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getPurchaseOrderNumber(order.purchaseOrderNumber) | async\"\n      ></cx-card>\n\n      <cx-card\n        [content]=\"getMethodOfPaymentCardContent(order.paymentInfo) | async\"\n      ></cx-card>\n\n      <ng-container *ngIf=\"order.costCenter\">\n        <cx-card\n          [content]=\"getCostCenterCardContent(order.costCenter) | async\"\n        ></cx-card>\n      </ng-container>\n    </div>\n\n    <div class=\"cx-summary-card\">\n      <ng-container *ngIf=\"order.deliveryAddress\">\n        <cx-card\n          [content]=\"getAddressCardContent(order.deliveryAddress) | async\"\n        ></cx-card>\n      </ng-container>\n\n      <ng-container *ngIf=\"order.deliveryMode\">\n        <cx-card\n          [content]=\"getDeliveryModeCardContent(order.deliveryMode) | async\"\n        ></cx-card>\n      </ng-container>\n    </div>\n\n    <ng-container *ngIf=\"order.paymentInfo\">\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"getPaymentInfoCardContent(order.paymentInfo) | async\"\n        ></cx-card>\n\n        <cx-card\n          [content]=\"\n            getBillingAddressCardContent(order.paymentInfo?.billingAddress)\n              | async\n          \"\n        ></cx-card>\n      </div>\n    </ng-container>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslationService }, { type: i2.UnitLevelOrderDetailService }]; } });
//# sourceMappingURL=data:application/json;base64,