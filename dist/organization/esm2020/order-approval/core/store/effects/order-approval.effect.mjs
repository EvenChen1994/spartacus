import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { LoggerService, OCC_USER_ID_ANONYMOUS, StateUtils, normalizeHttpError, } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, filter, map, switchMap } from 'rxjs/operators';
import { OrderApprovalActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/order-approval.connector";
export class OrderApprovalEffects {
    constructor(actions$, orderApprovalConnector) {
        this.actions$ = actions$;
        this.orderApprovalConnector = orderApprovalConnector;
        this.logger = inject(LoggerService);
        this.loadOrderApproval$ = createEffect(() => this.actions$.pipe(ofType(OrderApprovalActions.LOAD_ORDER_APPROVAL), map((action) => action.payload), filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS), switchMap(({ userId, orderApprovalCode }) => {
            return this.orderApprovalConnector.get(userId, orderApprovalCode).pipe(map((orderApproval) => {
                return new OrderApprovalActions.LoadOrderApprovalSuccess([
                    orderApproval,
                ]);
            }), catchError((error) => of(new OrderApprovalActions.LoadOrderApprovalFail({
                orderApprovalCode,
                error: normalizeHttpError(error, this.logger),
            }))));
        })));
        this.loadOrderApprovals$ = createEffect(() => this.actions$.pipe(ofType(OrderApprovalActions.LOAD_ORDER_APPROVALS), map((action) => action.payload), filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS), switchMap(({ userId, params }) => this.orderApprovalConnector.getList(userId, params).pipe(switchMap((orderApprovals) => {
            const { values, page } = StateUtils.normalizeListPage(orderApprovals, 'code');
            return [
                new OrderApprovalActions.LoadOrderApprovalSuccess(values),
                new OrderApprovalActions.LoadOrderApprovalsSuccess({
                    page,
                    params,
                }),
            ];
        }), catchError((error) => of(new OrderApprovalActions.LoadOrderApprovalsFail({
            params: params,
            error: normalizeHttpError(error, this.logger),
        })))))));
        this.makeDecision$ = createEffect(() => this.actions$.pipe(ofType(OrderApprovalActions.MAKE_DECISION), map((action) => action.payload), filter((payload) => payload.userId !== OCC_USER_ID_ANONYMOUS), switchMap(({ userId, orderApprovalCode, orderApprovalDecision }) => this.orderApprovalConnector
            .makeDecision(userId, orderApprovalCode, orderApprovalDecision)
            .pipe(switchMap((orderApprovalDecisionData) => [
            new OrderApprovalActions.MakeDecisionSuccess({
                orderApprovalCode,
                orderApprovalDecision: orderApprovalDecisionData,
            }),
            new OrderApprovalActions.LoadOrderApproval({
                userId,
                orderApprovalCode,
            }),
        ]), catchError((error) => of(new OrderApprovalActions.MakeDecisionFail({
            orderApprovalCode: orderApprovalCode,
            error: normalizeHttpError(error, this.logger),
        })))))));
    }
}
OrderApprovalEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderApprovalEffects, deps: [{ token: i1.Actions }, { token: i2.OrderApprovalConnector }], target: i0.ɵɵFactoryTarget.Injectable });
OrderApprovalEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderApprovalEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderApprovalEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.OrderApprovalConnector }]; } });
//# sourceMappingURL=data:application/json;base64,