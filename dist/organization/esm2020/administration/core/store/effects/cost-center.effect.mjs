import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { LoggerService, StateUtils, normalizeHttpError, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, groupBy, map, mergeMap, switchMap } from 'rxjs/operators';
import { BudgetActions, CostCenterActions, OrganizationActions, } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/cost-center/cost-center.connector";
export class CostCenterEffects {
    constructor(actions$, costCenterConnector) {
        this.actions$ = actions$;
        this.costCenterConnector = costCenterConnector;
        this.logger = inject(LoggerService);
        this.loadCostCenter$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.LOAD_COST_CENTER), map((action) => action.payload), switchMap(({ userId, costCenterCode }) => {
            return this.costCenterConnector.get(userId, costCenterCode).pipe(map((costCenter) => {
                return new CostCenterActions.LoadCostCenterSuccess([costCenter]);
            }), catchError((error) => of(new CostCenterActions.LoadCostCenterFail({
                costCenterCode,
                error: normalizeHttpError(error, this.logger),
            }))));
        })));
        this.loadCostCenters$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.LOAD_COST_CENTERS), map((action) => action.payload), switchMap((payload) => this.costCenterConnector.getList(payload.userId, payload.params).pipe(switchMap((costCenters) => {
            const { values, page } = StateUtils.normalizeListPage(costCenters, 'code');
            return [
                new CostCenterActions.LoadCostCenterSuccess(values),
                new CostCenterActions.LoadCostCentersSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new CostCenterActions.LoadCostCentersFail({
            params: payload.params,
            error: normalizeHttpError(error, this.logger),
        })))))));
        this.createCostCenter$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.CREATE_COST_CENTER), map((action) => action.payload), switchMap((payload) => this.costCenterConnector
            .create(payload.userId, payload.costCenter)
            .pipe(switchMap((data) => [
            new CostCenterActions.CreateCostCenterSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new CostCenterActions.CreateCostCenterFail({
                costCenterCode: payload.costCenter.code ?? '',
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.updateCostCenter$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.UPDATE_COST_CENTER), map((action) => action.payload), switchMap((payload) => this.costCenterConnector
            .update(payload.userId, payload.costCenterCode, payload.costCenter)
            .pipe(switchMap((data) => [
            new CostCenterActions.UpdateCostCenterSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new CostCenterActions.UpdateCostCenterFail({
                costCenterCode: payload.costCenter.code ?? '',
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.loadAssignedBudgets$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.LOAD_ASSIGNED_BUDGETS), map((action) => action.payload), groupBy(({ costCenterCode, params }) => StateUtils.serializeParams(costCenterCode, params)), mergeMap((group) => group.pipe(switchMap(({ userId, costCenterCode, params }) => this.costCenterConnector
            .getBudgets(userId, costCenterCode, params)
            .pipe(switchMap((budgets) => {
            const { values, page } = StateUtils.normalizeListPage(budgets, 'code');
            return [
                new BudgetActions.LoadBudgetSuccess(values),
                new CostCenterActions.LoadAssignedBudgetsSuccess({
                    costCenterCode,
                    page,
                    params,
                }),
            ];
        }), catchError((error) => of(new CostCenterActions.LoadAssignedBudgetsFail({
            costCenterCode,
            params,
            error: normalizeHttpError(error, this.logger),
        })))))))));
        this.assignBudgetToCostCenter$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.ASSIGN_BUDGET), map((action) => action.payload), mergeMap(({ userId, costCenterCode, budgetCode }) => this.costCenterConnector
            .assignBudget(userId, costCenterCode, budgetCode)
            .pipe(switchMap(() => [
            new CostCenterActions.AssignBudgetSuccess({
                code: budgetCode,
                selected: true,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new CostCenterActions.AssignBudgetFail({
                budgetCode,
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.unassignBudgetToCostCenter$ = createEffect(() => this.actions$.pipe(ofType(CostCenterActions.UNASSIGN_BUDGET), map((action) => action.payload), mergeMap(({ userId, costCenterCode, budgetCode }) => this.costCenterConnector
            .unassignBudget(userId, costCenterCode, budgetCode)
            .pipe(switchMap(() => [
            new CostCenterActions.UnassignBudgetSuccess({
                code: budgetCode,
                selected: false,
            }),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new CostCenterActions.UnassignBudgetFail({
                budgetCode,
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
    }
}
CostCenterEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CostCenterEffects, deps: [{ token: i1.Actions }, { token: i2.CostCenterConnector }], target: i0.ɵɵFactoryTarget.Injectable });
CostCenterEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CostCenterEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CostCenterEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CostCenterConnector }]; } });
//# sourceMappingURL=data:application/json;base64,