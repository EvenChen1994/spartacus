import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { LoggerService, StateUtils, normalizeHttpError, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { BudgetActions, OrganizationActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/budget/budget.connector";
export class BudgetEffects {
    constructor(actions$, budgetConnector) {
        this.actions$ = actions$;
        this.budgetConnector = budgetConnector;
        this.logger = inject(LoggerService);
        this.loadBudget$ = createEffect(() => this.actions$.pipe(ofType(BudgetActions.LOAD_BUDGET), map((action) => action.payload), switchMap(({ userId, budgetCode }) => {
            return this.budgetConnector.get(userId, budgetCode).pipe(map((budget) => {
                return new BudgetActions.LoadBudgetSuccess([budget]);
            }), catchError((error) => of(new BudgetActions.LoadBudgetFail({
                budgetCode,
                error: normalizeHttpError(error, this.logger),
            }))));
        })));
        this.loadBudgets$ = createEffect(() => this.actions$.pipe(ofType(BudgetActions.LOAD_BUDGETS), map((action) => action.payload), switchMap((payload) => this.budgetConnector.getList(payload.userId, payload.params).pipe(switchMap((budgets) => {
            const { values, page } = StateUtils.normalizeListPage(budgets, 'code');
            return [
                new BudgetActions.LoadBudgetSuccess(values),
                new BudgetActions.LoadBudgetsSuccess({
                    page,
                    params: payload.params,
                }),
            ];
        }), catchError((error) => of(new BudgetActions.LoadBudgetsFail({
            params: payload.params,
            error: normalizeHttpError(error, this.logger),
        })))))));
        this.createBudget$ = createEffect(() => this.actions$.pipe(ofType(BudgetActions.CREATE_BUDGET), map((action) => action.payload), switchMap((payload) => this.budgetConnector.create(payload.userId, payload.budget).pipe(switchMap((data) => [
            new BudgetActions.CreateBudgetSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new BudgetActions.CreateBudgetFail({
                budgetCode: payload.budget.code ?? '',
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
        this.updateBudget$ = createEffect(() => this.actions$.pipe(ofType(BudgetActions.UPDATE_BUDGET), map((action) => action.payload), switchMap((payload) => this.budgetConnector
            .update(payload.userId, payload.budgetCode, payload.budget)
            .pipe(switchMap((data) => [
            new BudgetActions.UpdateBudgetSuccess(data),
            new OrganizationActions.OrganizationClearData(),
        ]), catchError((error) => from([
            new BudgetActions.UpdateBudgetFail({
                budgetCode: payload.budget.code ?? '',
                error: normalizeHttpError(error, this.logger),
            }),
            new OrganizationActions.OrganizationClearData(),
        ]))))));
    }
}
BudgetEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetEffects, deps: [{ token: i1.Actions }, { token: i2.BudgetConnector }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.BudgetConnector }]; } });
//# sourceMappingURL=data:application/json;base64,