/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { BudgetActions } from '../store/index';
import { getBudget, getBudgetList, getBudgetValue, } from '../store/selectors/budget.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class BudgetService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    loadBudget(budgetCode) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new BudgetActions.LoadBudget({ userId, budgetCode })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadBudgets(params) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new BudgetActions.LoadBudgets({ userId, params })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getBudgetState(budgetCode) {
        return this.store.select(getBudget(budgetCode));
    }
    getBudgetValue(budgetCode) {
        return this.store
            .select(getBudgetValue(budgetCode))
            .pipe(filter((budget) => Boolean(budget)));
    }
    getBudgetList(params) {
        return this.store.select(getBudgetList(params));
    }
    get(budgetCode) {
        const loading$ = this.getBudgetState(budgetCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadBudget(budgetCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getBudgetValue(budgetCode));
    }
    getList(params) {
        return this.getBudgetList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadBudgets(params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getCostCenters(budgetCode) {
        return this.get(budgetCode).pipe(map((budget) => ({
            values: budget.costCenters ?? [],
        })));
    }
    getErrorState(budgetCode) {
        return this.getBudgetState(budgetCode).pipe(map((state) => state.error ?? false));
    }
    create(budget) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new BudgetActions.CreateBudget({ userId, budget })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    update(budgetCode, budget) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new BudgetActions.UpdateBudget({ userId, budgetCode, budget })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getLoadingStatus(budgetCode) {
        return getItemStatus(this.getBudgetState(budgetCode));
    }
}
BudgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
BudgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: BudgetService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,