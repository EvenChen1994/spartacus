/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { UserGroupActions } from '../store/actions/index';
import { getAvailableOrderApprovalPermissions, getAvailableOrgCustomers, getUserGroup, getUserGroupList, getUserGroupState, getUserGroupValue, } from '../store/selectors/user-group.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class UserGroupService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    load(userGroupId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.LoadUserGroup({
                userId,
                userGroupId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadList(params) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.LoadUserGroups({ userId, params })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getUserGroup(userGroupId) {
        return this.store.select(getUserGroup(userGroupId));
    }
    getUserGroupValue(userGroupId) {
        return this.store
            .select(getUserGroupValue(userGroupId))
            .pipe(filter((userGroup) => Boolean(userGroup)));
    }
    getUserGroupList(params) {
        return this.store.select(getUserGroupList(params));
    }
    getAvailableOrgCustomersList(userGroupId, params) {
        return this.store.select(getAvailableOrgCustomers(userGroupId, params));
    }
    getAvailableOrderApprovalPermissionsList(userGroupId, params) {
        return this.store.select(getAvailableOrderApprovalPermissions(userGroupId, params));
    }
    get(userGroupUid) {
        const loading$ = this.getUserGroup(userGroupUid).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(userGroupUid);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getUserGroupValue(userGroupUid));
    }
    getList(params) {
        return this.getUserGroupList(params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList(params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    create(userGroup) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.CreateUserGroup({
                userId,
                userGroup,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    update(userGroupId, userGroup) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.UpdateUserGroup({
                userId,
                userGroupId,
                userGroup,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getLoadingStatus(budgetCode) {
        return getItemStatus(this.getUserGroup(budgetCode));
    }
    delete(userGroupId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.DeleteUserGroup({
                userId,
                userGroupId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadAvailableOrgCustomers(userGroupId, params) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.LoadAvailableOrgCustomers({
                userId,
                userGroupId,
                params,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadAvailableOrderApprovalPermissions(userGroupId, params) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.LoadPermissions({
                userId,
                userGroupId,
                params,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getAvailableOrgCustomers(userGroupId, params) {
        return this.getAvailableOrgCustomersList(userGroupId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadAvailableOrgCustomers(userGroupId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getAvailableOrderApprovalPermissions(userGroupId, params) {
        return this.getAvailableOrderApprovalPermissionsList(userGroupId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadAvailableOrderApprovalPermissions(userGroupId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    assignMember(userGroupId, customerId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.AssignMember({
                userId,
                userGroupId,
                customerId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    unassignMember(userGroupId, customerId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.UnassignMember({
                userId,
                userGroupId,
                customerId,
            })),
            error: () => {
                // Intentional empty arrow function
            },
        });
    }
    unassignAllMembers(userGroupId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.UnassignAllMembers({
                userId,
                userGroupId,
            })),
            error: () => {
                // Intentional empty arrow function
            },
        });
    }
    assignPermission(userGroupId, permissionUid) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.AssignPermission({
                userId,
                userGroupId,
                permissionUid,
            })),
            error: () => {
                // Intentional empty arrow function
            },
        });
    }
    unassignPermission(userGroupId, permissionUid) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new UserGroupActions.UnassignPermission({
                userId,
                userGroupId,
                permissionUid,
            })),
            error: () => {
                // Intentional empty arrow function
            },
        });
    }
    getUserGroupState(code) {
        return this.store.select(getUserGroupState(code));
    }
    getErrorState(code) {
        return this.getUserGroupState(code).pipe(map((state) => state.error ?? false));
    }
}
UserGroupService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserGroupService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
UserGroupService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserGroupService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserGroupService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,