/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { queueScheduler, using } from 'rxjs';
import { auditTime, filter, map, observeOn, tap } from 'rxjs/operators';
import { OrgUnitActions } from '../store/actions/index';
import { getApprovalProcesses, getAssignedUsers, getB2BAddress, getB2BAddresses, getOrgUnit, getOrgUnitList, getOrgUnitState, getOrgUnitTree, getOrgUnitValue, } from '../store/selectors/org-unit.selector';
import { getItemStatus } from '../utils/get-item-status';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class OrgUnitService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    clearAssignedUsersList(orgUnitId, roleId, params) {
        this.store.dispatch(new OrgUnitActions.ClearAssignedUsers({ orgUnitId, roleId, params }));
    }
    load(orgUnitId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadList() {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnitNodes({ userId })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadTree() {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadTree({ userId })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadApprovalProcesses() {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadApprovalProcesses({ userId })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadUsers(orgUnitId, roleId, params) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadAssignedUsers({
                userId,
                orgUnitId,
                roleId,
                params,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    loadAddresses(orgUnitId) {
        // TODO: replace it after turn on loadAddresses$
        // this.store.dispatch(
        //   new OrgUnitActions.LoadAddresses({ userId, orgUnitId })
        // );
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.LoadOrgUnit({ userId, orgUnitId })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getOrgUnit(orgUnitId) {
        return this.store.select(getOrgUnit(orgUnitId));
    }
    getOrgUnitValue(orgUnitId) {
        return this.store
            .select(getOrgUnitValue(orgUnitId))
            .pipe(filter((orgUnit) => Boolean(orgUnit)));
    }
    getTreeState() {
        return this.store.select(getOrgUnitTree());
    }
    getOrgUnitsList() {
        return this.store.select(getOrgUnitList());
    }
    getAddressesState(orgUnitId) {
        return this.store.select(getB2BAddresses(orgUnitId));
    }
    getAddressState(addressId) {
        return this.store.select(getB2BAddress(addressId));
    }
    getAssignedUsers(orgUnitId, roleId, params) {
        return this.store.select(getAssignedUsers(orgUnitId, roleId, params));
    }
    getApprovalProcessesList() {
        return this.store.select(getApprovalProcesses());
    }
    get(orgUnitId) {
        const loading$ = this.getOrgUnit(orgUnitId).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.load(orgUnitId);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getOrgUnitValue(orgUnitId));
    }
    getCostCenters(orgUnitId) {
        return this.get(orgUnitId).pipe(map((orgUnit) => ({
            values: orgUnit.costCenters ?? [],
        })));
    }
    findUnitChildrenInTree(orginitId, unit) {
        return unit.id === orginitId
            ? unit.children ?? []
            : (unit.children ?? []).flatMap((child) => this.findUnitChildrenInTree(orginitId, child));
    }
    getChildUnits(orgUnitId) {
        return this.getTree().pipe(map((tree) => ({
            values: tree ? this.findUnitChildrenInTree(orgUnitId, tree) : [],
        })));
    }
    getTree() {
        return this.getTreeState().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadTree();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getApprovalProcesses() {
        return this.getApprovalProcessesList().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadApprovalProcesses();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getList() {
        return this.getOrgUnitsList().pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadList();
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getActiveUnitList() {
        return this.getList().pipe(map((units) => units?.filter((unit) => unit.active)), map((units) => units?.sort(this.sortUnitList)));
    }
    sortUnitList(a, b) {
        return (a.id ?? '').toLowerCase() < (b.id ?? '').toLowerCase()
            ? -1
            : (a.id ?? '').toLowerCase() > (b.id ?? '').toLowerCase()
                ? 1
                : 0;
    }
    getUsers(orgUnitId, roleId, params) {
        return this.getAssignedUsers(orgUnitId, roleId, params).pipe(observeOn(queueScheduler), tap((process) => {
            if (!(process.loading || process.success || process.error)) {
                this.loadUsers(orgUnitId, roleId, params);
            }
        }), filter((process) => Boolean(process.success || process.error)), map((result) => result.value));
    }
    getErrorState(orgCustomerId) {
        return this.getOrgUnitState(orgCustomerId).pipe(map((state) => state.error ?? false));
    }
    create(unit) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.CreateUnit({ userId, unit })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    update(unitCode, unit) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.UpdateUnit({ userId, unitCode, unit })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getLoadingStatus(orgUnitId) {
        return getItemStatus(this.getOrgUnit(orgUnitId));
    }
    assignRole(orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.AssignRole({
                userId,
                orgCustomerId,
                roleId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    unassignRole(orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.UnassignRole({
                userId,
                orgCustomerId,
                roleId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    assignApprover(orgUnitId, orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.AssignApprover({
                orgUnitId,
                userId,
                orgCustomerId,
                roleId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    unassignApprover(orgUnitId, orgCustomerId, roleId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.UnassignApprover({
                orgUnitId,
                userId,
                orgCustomerId,
                roleId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    createAddress(orgUnitId, address) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.CreateAddress({
                userId,
                orgUnitId,
                address,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getAddresses(orgUnitId) {
        return this.getAddressesState(orgUnitId).pipe(observeOn(queueScheduler), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadAddresses(orgUnitId);
            }
        }), filter((state) => Boolean(state.success || state.error)), map((state) => state.value));
    }
    getAddress(orgUnitId, addressId) {
        return this.getAddressState(addressId).pipe(observeOn(queueScheduler), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadAddresses(orgUnitId);
            }
        }), filter((state) => Boolean(state.success || state.error)), map((state) => state.value));
    }
    updateAddress(orgUnitId, addressId, address) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.UpdateAddress({
                userId,
                orgUnitId,
                addressId,
                address,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getAddressLoadingStatus(addressId) {
        return getItemStatus(this.getAddressState(addressId));
    }
    deleteAddress(orgUnitId, addressId) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrgUnitActions.DeleteAddress({
                userId,
                orgUnitId,
                addressId,
            })),
            error: () => {
                // TODO: for future releases, refactor this part to thrown errors
            },
        });
    }
    getOrgUnitState(orgUnitId) {
        return this.store.select(getOrgUnitState(orgUnitId));
    }
    isUpdatingUnitAllowed() {
        return true;
    }
}
OrgUnitService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrgUnitService, deps: [{ token: i1.Store }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
OrgUnitService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrgUnitService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrgUnitService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,