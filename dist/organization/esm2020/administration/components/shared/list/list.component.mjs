/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import { ICON_TYPE, TrapFocus, } from '@spartacus/storefront';
import { tap } from 'rxjs/operators';
import { CreateButtonType } from './list.service';
import * as i0 from "@angular/core";
import * as i1 from "./list.service";
import * as i2 from "../item.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@ng-select/ng-select";
import * as i7 from "@angular/forms";
import * as i8 from "@spartacus/core";
export class ListComponent {
    constructor(service, organizationItemService) {
        this.service = service;
        this.organizationItemService = organizationItemService;
        this.trapFocus = TrapFocus;
        this.hasGhostData = false;
        this.viewType = this.service.viewType;
        this.domainType = this.service.domainType;
        this.iconTypes = ICON_TYPE;
        this.createButtonAllTypes = CreateButtonType;
        this.createButtonType = this.service.getCreateButtonType();
        /**
         * The current key represents the current selected item from the dataset.
         * This key is used to load the item details as well as highlight the item in
         * a list of items.
         */
        this.currentKey$ = this.organizationItemService.key$;
        this.structure$ = this.service.getStructure();
        this.listData$ = this.service
            .getData()
            .pipe(tap((data) => {
            this.sortCode = data?.pagination?.sort;
            this.hasGhostData = this.service.hasGhostData(data);
        }));
        this.key = this.service.key();
        this.hideAddButton = false;
    }
    /**
     * Returns the total number of items.
     */
    getListCount(dataTable) {
        return dataTable.pagination?.totalResults;
    }
    /**
     * Browses to the given page number
     */
    browse(pagination, pageNumber) {
        if (pagination) {
            this.service.view(pagination, pageNumber);
        }
    }
    /**
     * Navigates to the detailed view of the selected list item.
     */
    launchItem(event) {
        this.organizationItemService.launchDetails(event);
    }
    /**
     * Sorts the list.
     */
    sort(pagination) {
        if (pagination) {
            this.service.sort({
                ...pagination,
                ...{ sort: this.sortCode },
            });
        }
    }
    /**
     * Function to call when 'Manage Users' button is clicked
     */
    onCreateButtonClick() {
        this.service.onCreateButtonClick();
    }
    /**
     * Returns the label for Create button
     */
    getCreateButtonLabel() {
        return this.service.getCreateButtonLabel();
    }
}
ListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ListComponent, deps: [{ token: i1.ListService }, { token: i2.ItemService }], target: i0.ɵɵFactoryTarget.Component });
ListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ListComponent, selector: "cx-org-list", inputs: { key: "key", hideAddButton: "hideAddButton" }, host: { properties: { "class.ghost": "this.hasGhostData", "class": "this.viewType" } }, ngImport: i0, template: "<cx-split-view [hideMode]=\"false\">\n  <ng-container *ngIf=\"structure$ | async as structure\">\n    <cx-view class=\"list\" *ngIf=\"listData$ | async as data\">\n      <div class=\"header\">\n        <div class=\"title\">\n          <h3>\n            {{\n              viewType + '.header' | cxTranslate: { count: getListCount(data) }\n            }}\n            <button\n              [cxPopover]=\"listHint\"\n              [cxPopoverOptions]=\"{\n                placement: 'auto',\n                class: 'hint-popover',\n                appendToBody: true,\n                displayCloseButton: true\n              }\"\n              [attr.aria-label]=\"'organization.information' | cxTranslate\"\n            >\n              <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n            </button>\n          </h3>\n        </div>\n\n        <div class=\"actions\">\n          <label>\n            <span *ngIf=\"data.pagination?.sort\">{{\n              structure.type + '.sortBy' | cxTranslate\n            }}</span>\n            <ng-select\n              name=\"sort\"\n              class=\"sort\"\n              *ngIf=\"data.pagination?.sort\"\n              [searchable]=\"false\"\n              [clearable]=\"false\"\n              (change)=\"sort($any(data.pagination))\"\n              [tabIndex]=\"0\"\n              [(ngModel)]=\"sortCode\"\n              [attr.aria-label]=\"\n                (sortCode\n                  ? structure.type + '.sort.' + sortCode\n                  : structure.type + '.sortBy'\n                ) | cxTranslate\n              \"\n            >\n              <ng-option *ngFor=\"let sort of data.sorts\" [value]=\"sort.code\">\n                {{ structure.type + '.sort.' + sort.code | cxTranslate }}\n              </ng-option>\n            </ng-select>\n          </label>\n\n          <ng-content select=\"[actions]\"></ng-content>\n\n          <ng-container\n            *ngIf=\"\n              createButtonType === createButtonAllTypes.LINK;\n              else showButton\n            \"\n          >\n            <a\n              *ngIf=\"!hideAddButton\"\n              class=\"button primary create\"\n              [routerLink]=\"{ cxRoute: structure.type + 'Create' } | cxUrl\"\n              routerLinkActive=\"disabled\"\n            >\n              {{ getCreateButtonLabel() | cxTranslate }}\n            </a>\n          </ng-container>\n        </div>\n      </div>\n\n      <cx-table\n        *ngIf=\"data.values && data.values.length > 0; else emptyList\"\n        [structure]=\"structure\"\n        [data]=\"data.values\"\n        [i18nRoot]=\"domainType\"\n        [currentItem]=\"{ property: key, value: currentKey$ | async }\"\n        (launch)=\"launchItem($event)\"\n        [cxFocus]=\"{ trap: trapFocus.both }\"\n      >\n      </cx-table>\n\n      <div class=\"footer\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse($any(data.pagination), $event)\"\n        ></cx-pagination>\n      </div>\n    </cx-view>\n\n    <!-- nested split views are rendered inside child routes -->\n    <router-outlet></router-outlet>\n  </ng-container>\n</cx-split-view>\n\n<ng-template #emptyList>\n  <p class=\"instruction is-empty\">\n    {{ 'organization.messages.emptyList' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #listHint>\n  <p>\n    {{ viewType + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #showButton>\n  <button\n    *ngIf=\"!hideAddButton\"\n    class=\"button primary create\"\n    (click)=\"onCreateButtonClick()\"\n  >\n    {{ getCreateButtonLabel() | cxTranslate }}\n  </button>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.RouterOutlet, selector: "router-outlet", inputs: ["name"], outputs: ["activate", "deactivate", "attach", "detach"], exportAs: ["outlet"] }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i4.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "ariaCurrentWhenActive", "routerLinkActive"], outputs: ["isActiveChange"], exportAs: ["routerLinkActive"] }, { kind: "component", type: i5.SplitViewComponent, selector: "cx-split-view", inputs: ["hideMode"] }, { kind: "component", type: i5.ViewComponent, selector: "cx-view", inputs: ["position", "hidden"], outputs: ["hiddenChange"] }, { kind: "component", type: i5.TableComponent, selector: "cx-table", inputs: ["structure", "data", "i18nRoot", "currentItem"], outputs: ["launch"] }, { kind: "component", type: i5.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "component", type: i5.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "component", type: i6.NgOptionComponent, selector: "ng-option", inputs: ["value", "disabled"] }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i5.PopoverDirective, selector: "[cxPopover]", inputs: ["cxPopover", "cxPopoverOptions"], outputs: ["openPopover", "closePopover"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i8.UrlPipe, name: "cxUrl" }, { kind: "pipe", type: i8.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-org-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<cx-split-view [hideMode]=\"false\">\n  <ng-container *ngIf=\"structure$ | async as structure\">\n    <cx-view class=\"list\" *ngIf=\"listData$ | async as data\">\n      <div class=\"header\">\n        <div class=\"title\">\n          <h3>\n            {{\n              viewType + '.header' | cxTranslate: { count: getListCount(data) }\n            }}\n            <button\n              [cxPopover]=\"listHint\"\n              [cxPopoverOptions]=\"{\n                placement: 'auto',\n                class: 'hint-popover',\n                appendToBody: true,\n                displayCloseButton: true\n              }\"\n              [attr.aria-label]=\"'organization.information' | cxTranslate\"\n            >\n              <cx-icon [type]=\"iconTypes.INFO\"> </cx-icon>\n            </button>\n          </h3>\n        </div>\n\n        <div class=\"actions\">\n          <label>\n            <span *ngIf=\"data.pagination?.sort\">{{\n              structure.type + '.sortBy' | cxTranslate\n            }}</span>\n            <ng-select\n              name=\"sort\"\n              class=\"sort\"\n              *ngIf=\"data.pagination?.sort\"\n              [searchable]=\"false\"\n              [clearable]=\"false\"\n              (change)=\"sort($any(data.pagination))\"\n              [tabIndex]=\"0\"\n              [(ngModel)]=\"sortCode\"\n              [attr.aria-label]=\"\n                (sortCode\n                  ? structure.type + '.sort.' + sortCode\n                  : structure.type + '.sortBy'\n                ) | cxTranslate\n              \"\n            >\n              <ng-option *ngFor=\"let sort of data.sorts\" [value]=\"sort.code\">\n                {{ structure.type + '.sort.' + sort.code | cxTranslate }}\n              </ng-option>\n            </ng-select>\n          </label>\n\n          <ng-content select=\"[actions]\"></ng-content>\n\n          <ng-container\n            *ngIf=\"\n              createButtonType === createButtonAllTypes.LINK;\n              else showButton\n            \"\n          >\n            <a\n              *ngIf=\"!hideAddButton\"\n              class=\"button primary create\"\n              [routerLink]=\"{ cxRoute: structure.type + 'Create' } | cxUrl\"\n              routerLinkActive=\"disabled\"\n            >\n              {{ getCreateButtonLabel() | cxTranslate }}\n            </a>\n          </ng-container>\n        </div>\n      </div>\n\n      <cx-table\n        *ngIf=\"data.values && data.values.length > 0; else emptyList\"\n        [structure]=\"structure\"\n        [data]=\"data.values\"\n        [i18nRoot]=\"domainType\"\n        [currentItem]=\"{ property: key, value: currentKey$ | async }\"\n        (launch)=\"launchItem($event)\"\n        [cxFocus]=\"{ trap: trapFocus.both }\"\n      >\n      </cx-table>\n\n      <div class=\"footer\">\n        <cx-pagination\n          [pagination]=\"data.pagination\"\n          (viewPageEvent)=\"browse($any(data.pagination), $event)\"\n        ></cx-pagination>\n      </div>\n    </cx-view>\n\n    <!-- nested split views are rendered inside child routes -->\n    <router-outlet></router-outlet>\n  </ng-container>\n</cx-split-view>\n\n<ng-template #emptyList>\n  <p class=\"instruction is-empty\">\n    {{ 'organization.messages.emptyList' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #listHint>\n  <p>\n    {{ viewType + '.hint' | cxTranslate }}\n  </p>\n</ng-template>\n\n<ng-template #showButton>\n  <button\n    *ngIf=\"!hideAddButton\"\n    class=\"button primary create\"\n    (click)=\"onCreateButtonClick()\"\n  >\n    {{ getCreateButtonLabel() | cxTranslate }}\n  </button>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ListService }, { type: i2.ItemService }]; }, propDecorators: { hasGhostData: [{
                type: HostBinding,
                args: ['class.ghost']
            }], viewType: [{
                type: HostBinding,
                args: ['class']
            }], key: [{
                type: Input
            }], hideAddButton: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,