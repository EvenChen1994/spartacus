/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import { LoadStatus, } from '@spartacus/organization/administration/core';
import { filter, map, take, tap } from 'rxjs/operators';
import { ItemService } from '../../../../shared/item.service';
import { MessageService } from '../../../../shared/message/services/message.service';
import { UnitUserRolesItemService } from './unit-user-roles-item.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../../shared/item.service";
import * as i2 from "./unit-user-roles-form.service";
import * as i3 from "@spartacus/organization/administration/core";
import * as i4 from "../../../../user/services/user-item.service";
import * as i5 from "@angular/common";
import * as i6 from "../../../../shared/card/card.component";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/router";
import * as i9 from "@spartacus/storefront";
import * as i10 from "@spartacus/core";
export class UnitUserRolesFormComponent {
    constructor(itemService, formService, userService, userItemService) {
        this.itemService = itemService;
        this.formService = formService;
        this.userService = userService;
        this.userItemService = userItemService;
        this.form$ = this.itemService.current$.pipe(tap((item) => {
            if (!this.item) {
                this.item = item;
            }
            if (this.item?.roles?.join() !== item?.roles?.join()) {
                this.item = { ...this.item, ...item };
            }
        }), map((item) => this.formService.getForm(item)));
        this.availableRoles = this.userService.getAllRoles();
        this.availableRights = this.userService.getAllRights();
    }
    save(form) {
        form.disable();
        const rolesAndRights = [
            ...this.availableRoles,
            ...this.availableRights,
        ].filter((role) => !!form.get(role)?.value);
        this.userItemService
            .update(this.item?.customerId ?? '', { roles: rolesAndRights })
            .pipe(take(1), filter((data) => data.status === LoadStatus.SUCCESS))
            .subscribe((data) => {
            this.notify({ ...this.item, ...data.item });
            form.enable();
        });
    }
    notify(item) {
        this.messageService.add({
            message: {
                key: 'orgUnitUserRoles.messages.rolesUpdated',
                params: { item },
            },
        });
    }
}
UnitUserRolesFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UnitUserRolesFormComponent, deps: [{ token: i1.ItemService }, { token: i2.UnitUserRolesFormService }, { token: i3.B2BUserService }, { token: i4.UserItemService }], target: i0.ɵɵFactoryTarget.Component });
UnitUserRolesFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: UnitUserRolesFormComponent, selector: "cx-org-unit-user-roles", host: { classAttribute: "content-wrapper" }, providers: [
        {
            provide: ItemService,
            useExisting: UnitUserRolesItemService,
        },
    ], viewQueries: [{ propertyName: "messageService", first: true, predicate: MessageService, descendants: true, read: MessageService }], ngImport: i0, template: "<form *ngIf=\"form$ | async as form\" (submit)=\"save(form)\">\n  <cx-org-card\n    #card\n    [previous]=\"false\"\n    i18nRoot=\"orgUnitUserRoles\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <a actions routerLink=\"../../\">\n      <span (click)=\"card.closeView($event)\">\n        {{ 'organization.done' | cxTranslate }}\n      </span>\n    </a>\n\n    <section main class=\"details\" [formGroup]=\"form\">\n      <fieldset class=\"full-width\">\n        <legend class=\"label-content required\">\n          {{ 'orgUser.roles' | cxTranslate }}\n        </legend>\n        <label class=\"form-check\" *ngFor=\"let role of availableRoles\">\n          <input\n            type=\"checkbox\"\n            [formControlName]=\"role\"\n            (change)=\"save(form)\"\n          />\n          <span class=\"form-check-label\">\n            {{ 'organization.userRoles.' + role | cxTranslate }}\n          </span>\n        </label>\n      </fieldset>\n      <fieldset class=\"full-width\">\n        <legend class=\"label-content required\">\n          {{ 'orgUser.rights' | cxTranslate }}\n        </legend>\n        <label class=\"form-check\" *ngFor=\"let right of availableRights\">\n          <input\n            type=\"checkbox\"\n            [formControlName]=\"right\"\n            (change)=\"save(form)\"\n          />\n          <span class=\"form-check-label\">\n            {{ 'organization.userRights.' + right | cxTranslate }}\n          </span>\n        </label>\n      </fieldset>\n    </section>\n  </cx-org-card>\n</form>\n", dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.CardComponent, selector: "cx-org-card", inputs: ["i18nRoot", "previous", "subtitle", "showHint"] }, { kind: "directive", type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i7.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i7.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i8.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i9.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UnitUserRolesFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-org-unit-user-roles', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'content-wrapper' }, providers: [
                        {
                            provide: ItemService,
                            useExisting: UnitUserRolesItemService,
                        },
                    ], template: "<form *ngIf=\"form$ | async as form\" (submit)=\"save(form)\">\n  <cx-org-card\n    #card\n    [previous]=\"false\"\n    i18nRoot=\"orgUnitUserRoles\"\n    [cxFocus]=\"{ autofocus: 'input', refreshFocus: form }\"\n  >\n    <a actions routerLink=\"../../\">\n      <span (click)=\"card.closeView($event)\">\n        {{ 'organization.done' | cxTranslate }}\n      </span>\n    </a>\n\n    <section main class=\"details\" [formGroup]=\"form\">\n      <fieldset class=\"full-width\">\n        <legend class=\"label-content required\">\n          {{ 'orgUser.roles' | cxTranslate }}\n        </legend>\n        <label class=\"form-check\" *ngFor=\"let role of availableRoles\">\n          <input\n            type=\"checkbox\"\n            [formControlName]=\"role\"\n            (change)=\"save(form)\"\n          />\n          <span class=\"form-check-label\">\n            {{ 'organization.userRoles.' + role | cxTranslate }}\n          </span>\n        </label>\n      </fieldset>\n      <fieldset class=\"full-width\">\n        <legend class=\"label-content required\">\n          {{ 'orgUser.rights' | cxTranslate }}\n        </legend>\n        <label class=\"form-check\" *ngFor=\"let right of availableRights\">\n          <input\n            type=\"checkbox\"\n            [formControlName]=\"right\"\n            (change)=\"save(form)\"\n          />\n          <span class=\"form-check-label\">\n            {{ 'organization.userRights.' + right | cxTranslate }}\n          </span>\n        </label>\n      </fieldset>\n    </section>\n  </cx-org-card>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ItemService }, { type: i2.UnitUserRolesFormService }, { type: i3.B2BUserService }, { type: i4.UserItemService }]; }, propDecorators: { messageService: [{
                type: ViewChild,
                args: [MessageService, { read: MessageService }]
            }] } });
//# sourceMappingURL=data:application/json;base64,