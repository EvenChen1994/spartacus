import { Injectable, inject } from '@angular/core';
import { LoggerService, normalizeHttpError, } from '@spartacus/core';
import { ACCOUNT_SUMMARY_DOCUMENT_NORMALIZER, ACCOUNT_SUMMARY_NORMALIZER, } from '@spartacus/organization/account-summary/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccAccountSummaryAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.logger = inject(LoggerService);
    }
    getAccountSummary(userId, orgUnitId) {
        return this.http
            .get(this.buildAccountSummaryUrl(userId, orgUnitId))
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(ACCOUNT_SUMMARY_NORMALIZER));
    }
    getDocumentList(userId, orgUnitId, params) {
        return this.http
            .get(this.buildDocumentListUrl(userId, orgUnitId, params))
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(ACCOUNT_SUMMARY_DOCUMENT_NORMALIZER));
    }
    getDocumentAttachment(userId, orgUnitId, orgDocumentId, orgDocumentAttachmentId) {
        const options = {
            responseType: 'blob',
        };
        return this.http
            .get(this.buildDocumentAttachmentUrl(userId, orgUnitId, orgDocumentId, orgDocumentAttachmentId), options)
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    buildAccountSummaryUrl(userId, orgUnitId) {
        return this.occEndpoints.buildUrl('accountSummary', {
            urlParams: { userId, orgUnitId },
        });
    }
    buildDocumentListUrl(userId, orgUnitId, queryParams) {
        return this.occEndpoints.buildUrl('accountSummaryDocument', {
            urlParams: { userId, orgUnitId },
            queryParams,
        });
    }
    buildDocumentAttachmentUrl(userId, orgUnitId, orgDocumentId, orgDocumentAttachmentId) {
        return this.occEndpoints.buildUrl('accountSummaryDocumentAttachment', {
            urlParams: { userId, orgUnitId, orgDocumentId, orgDocumentAttachmentId },
        });
    }
}
OccAccountSummaryAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccAccountSummaryAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccAccountSummaryAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccAccountSummaryAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccAccountSummaryAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWFjY291bnQtc3VtbWFyeS5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hY2NvdW50LXN1bW1hcnkvb2NjL2FkYXB0ZXJzL29jYy1hY2NvdW50LXN1bW1hcnkuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBRUwsYUFBYSxFQUViLGtCQUFrQixHQUNuQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFDTCxtQ0FBbUMsRUFDbkMsMEJBQTBCLEdBRTNCLE1BQU0sOENBQThDLENBQUM7QUFNdEQsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFHNUMsTUFBTSxPQUFPLHdCQUF3QjtJQUduQyxZQUNZLElBQWdCLEVBQ2hCLFlBQWlDLEVBQ2pDLFNBQTJCO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBTDdCLFdBQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFNdEMsQ0FBQztJQUVKLGlCQUFpQixDQUNmLE1BQWMsRUFDZCxTQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQy9DO2FBQ0EsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUN0QyxVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNuRCxFQUNELElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQ3BELENBQUM7SUFDTixDQUFDO0lBRUQsZUFBZSxDQUNiLE1BQWMsRUFDZCxTQUFpQixFQUNqQixNQUEyQjtRQUUzQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUNyRDthQUNBLElBQUksQ0FDSCxVQUFVLENBQUMsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FDdEMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDbkQsRUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUM3RCxDQUFDO0lBQ04sQ0FBQztJQUVELHFCQUFxQixDQUNuQixNQUFjLEVBQ2QsU0FBaUIsRUFDakIsYUFBcUIsRUFDckIsdUJBQStCO1FBRS9CLE1BQU0sT0FBTyxHQUFHO1lBQ2QsWUFBWSxFQUFFLE1BQWdCO1NBQy9CLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQywwQkFBMEIsQ0FDN0IsTUFBTSxFQUNOLFNBQVMsRUFDVCxhQUFhLEVBQ2IsdUJBQXVCLENBQ3hCLEVBQ0QsT0FBTyxDQUNSO2FBQ0EsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUN0QyxVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNuRCxDQUNGLENBQUM7SUFDTixDQUFDO0lBRU8sc0JBQXNCLENBQUMsTUFBYyxFQUFFLFNBQWlCO1FBQzlELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7WUFDbEQsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtTQUNqQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sb0JBQW9CLENBQzFCLE1BQWMsRUFDZCxTQUFpQixFQUNqQixXQUFnQztRQUVoQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLHdCQUF3QixFQUFFO1lBQzFELFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7WUFDaEMsV0FBVztTQUNaLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTywwQkFBMEIsQ0FDaEMsTUFBYyxFQUNkLFNBQWlCLEVBQ2pCLGFBQXFCLEVBQ3JCLHVCQUErQjtRQUUvQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGtDQUFrQyxFQUFFO1lBQ3BFLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixFQUFFO1NBQ3pFLENBQUMsQ0FBQztJQUNMLENBQUM7O3FIQS9GVSx3QkFBd0I7eUhBQXhCLHdCQUF3QjsyRkFBeEIsd0JBQXdCO2tCQURwQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENvbnZlcnRlclNlcnZpY2UsXG4gIExvZ2dlclNlcnZpY2UsXG4gIE9jY0VuZHBvaW50c1NlcnZpY2UsXG4gIG5vcm1hbGl6ZUh0dHBFcnJvcixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIEFDQ09VTlRfU1VNTUFSWV9ET0NVTUVOVF9OT1JNQUxJWkVSLFxuICBBQ0NPVU5UX1NVTU1BUllfTk9STUFMSVpFUixcbiAgQWNjb3VudFN1bW1hcnlBZGFwdGVyLFxufSBmcm9tICdAc3BhcnRhY3VzL29yZ2FuaXphdGlvbi9hY2NvdW50LXN1bW1hcnkvY29yZSc7XG5pbXBvcnQge1xuICBBY2NvdW50U3VtbWFyeURldGFpbHMsXG4gIEFjY291bnRTdW1tYXJ5TGlzdCxcbiAgRG9jdW1lbnRRdWVyeVBhcmFtcyxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmdhbml6YXRpb24vYWNjb3VudC1zdW1tYXJ5L3Jvb3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9jY0FjY291bnRTdW1tYXJ5QWRhcHRlciBpbXBsZW1lbnRzIEFjY291bnRTdW1tYXJ5QWRhcHRlciB7XG4gIHByb3RlY3RlZCBsb2dnZXIgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJvdGVjdGVkIG9jY0VuZHBvaW50czogT2NjRW5kcG9pbnRzU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlXG4gICkge31cblxuICBnZXRBY2NvdW50U3VtbWFyeShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPEFjY291bnRTdW1tYXJ5RGV0YWlscz4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQ8QWNjb3VudFN1bW1hcnlEZXRhaWxzPihcbiAgICAgICAgdGhpcy5idWlsZEFjY291bnRTdW1tYXJ5VXJsKHVzZXJJZCwgb3JnVW5pdElkKVxuICAgICAgKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkgPT5cbiAgICAgICAgICB0aHJvd0Vycm9yKG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciwgdGhpcy5sb2dnZXIpKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmNvbnZlcnRlci5waXBlYWJsZShBQ0NPVU5UX1NVTU1BUllfTk9STUFMSVpFUilcbiAgICAgICk7XG4gIH1cblxuICBnZXREb2N1bWVudExpc3QoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBEb2N1bWVudFF1ZXJ5UGFyYW1zXG4gICk6IE9ic2VydmFibGU8QWNjb3VudFN1bW1hcnlMaXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxBY2NvdW50U3VtbWFyeUxpc3Q+KFxuICAgICAgICB0aGlzLmJ1aWxkRG9jdW1lbnRMaXN0VXJsKHVzZXJJZCwgb3JnVW5pdElkLCBwYXJhbXMpXG4gICAgICApXG4gICAgICAucGlwZShcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PlxuICAgICAgICAgIHRocm93RXJyb3Iobm9ybWFsaXplSHR0cEVycm9yKGVycm9yLCB0aGlzLmxvZ2dlcikpXG4gICAgICAgICksXG4gICAgICAgIHRoaXMuY29udmVydGVyLnBpcGVhYmxlKEFDQ09VTlRfU1VNTUFSWV9ET0NVTUVOVF9OT1JNQUxJWkVSKVxuICAgICAgKTtcbiAgfVxuXG4gIGdldERvY3VtZW50QXR0YWNobWVudChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBvcmdVbml0SWQ6IHN0cmluZyxcbiAgICBvcmdEb2N1bWVudElkOiBzdHJpbmcsXG4gICAgb3JnRG9jdW1lbnRBdHRhY2htZW50SWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPEJsb2I+IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicgYXMgJ2pzb24nLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0PEJsb2I+KFxuICAgICAgICB0aGlzLmJ1aWxkRG9jdW1lbnRBdHRhY2htZW50VXJsKFxuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICBvcmdVbml0SWQsXG4gICAgICAgICAgb3JnRG9jdW1lbnRJZCxcbiAgICAgICAgICBvcmdEb2N1bWVudEF0dGFjaG1lbnRJZFxuICAgICAgICApLFxuICAgICAgICBvcHRpb25zXG4gICAgICApXG4gICAgICAucGlwZShcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PlxuICAgICAgICAgIHRocm93RXJyb3Iobm9ybWFsaXplSHR0cEVycm9yKGVycm9yLCB0aGlzLmxvZ2dlcikpXG4gICAgICAgIClcbiAgICAgICk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkQWNjb3VudFN1bW1hcnlVcmwodXNlcklkOiBzdHJpbmcsIG9yZ1VuaXRJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vY2NFbmRwb2ludHMuYnVpbGRVcmwoJ2FjY291bnRTdW1tYXJ5Jywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCwgb3JnVW5pdElkIH0sXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkRG9jdW1lbnRMaXN0VXJsKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9yZ1VuaXRJZDogc3RyaW5nLFxuICAgIHF1ZXJ5UGFyYW1zOiBEb2N1bWVudFF1ZXJ5UGFyYW1zXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMub2NjRW5kcG9pbnRzLmJ1aWxkVXJsKCdhY2NvdW50U3VtbWFyeURvY3VtZW50Jywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCwgb3JnVW5pdElkIH0sXG4gICAgICBxdWVyeVBhcmFtcyxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGREb2N1bWVudEF0dGFjaG1lbnRVcmwoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3JnVW5pdElkOiBzdHJpbmcsXG4gICAgb3JnRG9jdW1lbnRJZDogc3RyaW5nLFxuICAgIG9yZ0RvY3VtZW50QXR0YWNobWVudElkOiBzdHJpbmdcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vY2NFbmRwb2ludHMuYnVpbGRVcmwoJ2FjY291bnRTdW1tYXJ5RG9jdW1lbnRBdHRhY2htZW50Jywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCwgb3JnVW5pdElkLCBvcmdEb2N1bWVudElkLCBvcmdEb2N1bWVudEF0dGFjaG1lbnRJZCB9LFxuICAgIH0pO1xuICB9XG59XG4iXX0=