/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { DocumentStatus, FilterByOptions, } from '@spartacus/organization/account-summary/root';
import { Subscription, zip } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/common";
import * as i4 from "@ng-select/ng-select";
import * as i5 from "@spartacus/storefront";
export class AccountSummaryDocumentFilterComponent {
    set initialFilters(initialFilters) {
        this.initializeForm(initialFilters);
    }
    constructor(translation, fb) {
        this.translation = translation;
        this.fb = fb;
        this.filterListEvent = new EventEmitter();
        /* For Enum use in HTML */
        this.FilterByOptions = FilterByOptions;
        this.subscription = new Subscription();
    }
    ngOnInit() {
        this.subscription.add(this.getStatusOptions().subscribe((statusOptions) => (this.statusOptions = [...statusOptions])));
        this.subscription.add(this.getFilterByOptions().subscribe((filterOptions) => (this.filterByOptions = [...filterOptions])));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    formSearch() {
        const status = this.filterForm.get('status')?.value;
        const filterByKey = this.filterForm.get('filterBy')
            ?.value;
        let filterByValue;
        let startRange;
        let endRange;
        switch (filterByKey) {
            case FilterByOptions.DOCUMENT_TYPE: {
                filterByValue = this.filterForm.get('documentType')?.value;
                break;
            }
            case FilterByOptions.DOCUMENT_NUMBER: {
                filterByValue = this.filterForm.get('documentNumber')?.value;
                break;
            }
            case FilterByOptions.DOCUMENT_NUMBER_RANGE: {
                startRange = this.filterForm.get('documentNumberRange.from')?.value;
                endRange = this.filterForm.get('documentNumberRange.to')?.value;
                break;
            }
            case FilterByOptions.DATE_RANGE: {
                const from = this.filterForm.get('documentDateRange.from')?.value;
                const to = this.filterForm.get('documentDateRange.to')?.value;
                startRange = from ? this.encodeDate(from) : '';
                endRange = to ? this.encodeDate(to) : '';
                break;
            }
            case FilterByOptions.DUE_DATE_RANGE: {
                const from = this.filterForm.get('dueDateRange.from')?.value;
                const to = this.filterForm.get('dueDateRange.to')?.value;
                startRange = from ? this.encodeDate(from) : '';
                endRange = to ? this.encodeDate(to) : '';
                break;
            }
            case FilterByOptions.AMOUNT_RANGE: {
                startRange = this.filterForm.get('originalAmountRange.from')?.value;
                endRange = this.filterForm.get('originalAmountRange.to')?.value;
                break;
            }
            case FilterByOptions.OPEN_AMOUNT_RANGE: {
                startRange = this.filterForm.get('openAmountRange.from')?.value;
                endRange = this.filterForm.get('openAmountRange.to')?.value;
                break;
            }
        }
        this.filterListEvent.emit({
            status,
            filterByKey,
            filterByValue,
            startRange,
            endRange,
        });
    }
    resetForm(andSearch = false) {
        const defaults = {
            documentType: '',
            documentNumber: '',
            documentNumberRange: { from: '', to: '' },
            documentDateRange: { from: '', to: '' },
            dueDateRange: { from: '', to: '' },
            originalAmountRange: { from: '', to: '' },
            openAmountRange: { from: '', to: '' },
        };
        if (andSearch) {
            // if set, clear all fields and perform search
            this.filterForm.patchValue({
                ...defaults,
                status: DocumentStatus.OPEN,
                filterBy: FilterByOptions.DOCUMENT_NUMBER,
            });
            this.formSearch();
        }
        else {
            // otherwise just clear all fields except status and filterBy
            this.filterForm.patchValue(defaults);
        }
    }
    getStatusOptions() {
        const statusOptions = Object.values(DocumentStatus).map((code) => ({ code }));
        const translations = statusOptions.map((status) => this.translation.translate(`orgAccountSummary.statuses.${status.code}`));
        return zip(...translations).pipe(map((texts) => {
            texts.forEach((text, index) => (statusOptions[index].name = text));
            return statusOptions;
        }));
    }
    getFilterByOptions() {
        const filterByOptions = Object.values(FilterByOptions).map((code) => ({ code }));
        const translations = filterByOptions.map((status) => this.translation.translate(`orgAccountSummary.filterByOptions.${status.code}`));
        return zip(...translations).pipe(map((texts) => {
            texts.forEach((text, index) => (filterByOptions[index].name = text));
            return filterByOptions;
        }));
    }
    initializeForm({ status, filterByKey, filterByValue, startRange, endRange, }) {
        const generateRangeGroup = (filterByOption, validator) => {
            return this.fb.group({
                from: [
                    filterByKey === filterByOption && (startRange ?? ''),
                    validator?.startRange,
                ],
                to: [
                    filterByKey === filterByOption && (endRange ?? ''),
                    validator?.endRange,
                ],
            }, { validators: validator?.groupValidator });
        };
        const generateDateRangeGroup = (filterByOption, validator) => {
            return this.fb.group({
                from: [
                    filterByKey === filterByOption && startRange
                        ? this.decodeDate(startRange)
                        : '',
                    validator?.startRange,
                ],
                to: [
                    filterByKey === filterByOption && endRange
                        ? this.decodeDate(endRange)
                        : '',
                    validator?.endRange,
                ],
            }, { validators: validator?.groupValidator });
        };
        const validRange = (type) => {
            return (c) => {
                const from = c.get('from');
                const to = c.get('to');
                if (from.pristine || from.invalid || to.pristine || to.invalid) {
                    return null;
                }
                if (type === 'date' && from.value > to.value) {
                    return { toDateMustComeAfterFrom: true };
                }
                if (type === 'number') {
                    return isFromLargerThanTo(from, to)
                        ? { toAmountMustBeLargeThanFrom: true }
                        : null;
                }
                return null;
            };
        };
        function isFromLargerThanTo(from, to) {
            const fromValue = parseFloat(from.value) || 0;
            const toValue = parseFloat(to.value) || 0;
            return !isNaN(from.value) && !isNaN(to.value) && fromValue > toValue;
        }
        this.filterForm = this.fb.group({
            status: status || DocumentStatus.OPEN,
            filterBy: filterByKey || FilterByOptions.DOCUMENT_NUMBER,
            documentType: filterByKey === FilterByOptions.DOCUMENT_TYPE && (filterByValue ?? ''),
            documentNumber: filterByKey === FilterByOptions.DOCUMENT_NUMBER &&
                (filterByValue ?? ''),
            documentNumberRange: generateRangeGroup(FilterByOptions.DOCUMENT_NUMBER_RANGE),
            documentDateRange: generateDateRangeGroup(FilterByOptions.DATE_RANGE, {
                groupValidator: validRange('date'),
            }),
            dueDateRange: generateDateRangeGroup(FilterByOptions.DUE_DATE_RANGE, {
                groupValidator: validRange('date'),
            }),
            originalAmountRange: generateRangeGroup(FilterByOptions.AMOUNT_RANGE, {
                groupValidator: validRange('number'),
            }),
            openAmountRange: generateRangeGroup(FilterByOptions.OPEN_AMOUNT_RANGE, {
                groupValidator: validRange('number'),
            }),
        });
        this.subscription.add(this.filterForm
            .get('filterBy')
            ?.valueChanges.subscribe(() => this.filterByChanged()));
    }
    filterByChanged() {
        this.resetForm(false);
    }
    encodeDate(inputDate) {
        const [year, month, day] = inputDate.split('-');
        return `${month}/${day}/${year}`;
    }
    decodeDate(inputDate) {
        const [month, day, year] = inputDate.split('/');
        return `${year}-${month}-${day}`;
    }
}
AccountSummaryDocumentFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AccountSummaryDocumentFilterComponent, deps: [{ token: i1.TranslationService }, { token: i2.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
AccountSummaryDocumentFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: AccountSummaryDocumentFilterComponent, selector: "cx-account-summary-document-filter", inputs: { documentTypeOptions: "documentTypeOptions", initialFilters: "initialFilters" }, outputs: { filterListEvent: "filterListEvent" }, ngImport: i0, template: "<ng-template #rangeInput let-formGroup=\"formGroup\" let-type=\"type\">\n  <ng-container [formGroup]=\"formGroup\">\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.startRange' | cxTranslate }}</span>\n      <ng-container *ngIf=\"type === 'date'; else inputFrom\">\n        <cx-date-picker [control]=\"formGroup.controls.from\"></cx-date-picker>\n      </ng-container>\n      <ng-template #inputFrom>\n        <input\n          class=\"cx-account-summary-document-filter-form-input\"\n          [type]=\"type\"\n          formControlName=\"from\"\n        />\n        <cx-form-errors [control]=\"formGroup.controls.from\"></cx-form-errors>\n      </ng-template>\n    </label>\n\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.endRange' | cxTranslate }}</span>\n      <ng-container *ngIf=\"type === 'date'; else inputTo\">\n        <cx-date-picker [control]=\"formGroup.controls.to\"></cx-date-picker>\n      </ng-container>\n      <ng-template #inputTo>\n        <input\n          class=\"cx-account-summary-document-filter-form-input\"\n          [type]=\"type\"\n          formControlName=\"to\"\n        />\n        <cx-form-errors [control]=\"formGroup.controls.to\"></cx-form-errors>\n      </ng-template>\n      <cx-form-errors\n        [control]=\"formGroup\"\n        [prefix]=\"'orgAccountSummary.filter.errors'\"\n      ></cx-form-errors>\n    </label>\n  </ng-container>\n</ng-template>\n\n<form (ngSubmit)=\"formSearch()\" [formGroup]=\"filterForm\">\n  <div\n    class=\"cx-account-summary-document-filter-form\"\n    *ngIf=\"filterForm.controls.filterBy.value as filterBy\"\n  >\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.status' | cxTranslate }}</span>\n      <ng-select\n        formControlName=\"status\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"statusOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [cxNgSelectA11y]=\"{\n          ariaLabel: 'orgAccountSummary.filter.status' | cxTranslate,\n          ariaControls: 'cx-account-summary-document-table'\n        }\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"filterForm.controls.status\"></cx-form-errors>\n    </label>\n\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.filterBy' | cxTranslate }}</span>\n      <ng-select\n        formControlName=\"filterBy\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"filterByOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [cxNgSelectA11y]=\"{\n          ariaLabel: 'orgAccountSummary.filter.filterBy' | cxTranslate,\n          ariaControls: 'cx-account-summary-document-table'\n        }\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"filterForm.controls.filterBy\"></cx-form-errors>\n    </label>\n\n    <label\n      class=\"cx-account-summary-document-filter-form-item\"\n      *ngIf=\"filterBy === FilterByOptions.DOCUMENT_TYPE\"\n    >\n      <span>{{ 'orgAccountSummary.filter.documentType' | cxTranslate }}</span>\n      <ng-select\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"documentTypeOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        formControlName=\"documentType\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"filterForm.controls.documentType\"\n      ></cx-form-errors>\n    </label>\n\n    <label\n      class=\"cx-account-summary-document-filter-form-item\"\n      *ngIf=\"filterBy === FilterByOptions.DOCUMENT_NUMBER\"\n    >\n      <span>{{ 'orgAccountSummary.filter.documentNumber' | cxTranslate }}</span>\n      <input\n        class=\"cx-account-summary-document-filter-form-input\"\n        formControlName=\"documentNumber\"\n      />\n      <cx-form-errors\n        [control]=\"filterForm.controls.documentNumber\"\n      ></cx-form-errors>\n    </label>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DOCUMENT_NUMBER_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('documentNumberRange'),\n            type: 'text'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DATE_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('documentDateRange'),\n            type: 'date'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DUE_DATE_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: { formGroup: filterForm.get('dueDateRange'), type: 'date' }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.AMOUNT_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('originalAmountRange'),\n            type: 'number'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.OPEN_AMOUNT_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('openAmountRange'),\n            type: 'number'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <div class=\"cx-account-summary-document-filter-form-button-block\">\n      <button\n        class=\"cx-action-link clear-btn\"\n        type=\"button\"\n        (click)=\"resetForm(true)\"\n      >\n        {{ 'orgAccountSummary.filter.clear' | cxTranslate }}\n      </button>\n      <button class=\"btn btn-primary\" type=\"submit\">\n        {{ 'orgAccountSummary.filter.search' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgSelectA11yDirective, selector: "[cxNgSelectA11y]", inputs: ["cxNgSelectA11y"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i5.DatePickerComponent, selector: "cx-date-picker", inputs: ["control", "min", "max", "required"], outputs: ["update"] }, { kind: "component", type: i5.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AccountSummaryDocumentFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-account-summary-document-filter', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template #rangeInput let-formGroup=\"formGroup\" let-type=\"type\">\n  <ng-container [formGroup]=\"formGroup\">\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.startRange' | cxTranslate }}</span>\n      <ng-container *ngIf=\"type === 'date'; else inputFrom\">\n        <cx-date-picker [control]=\"formGroup.controls.from\"></cx-date-picker>\n      </ng-container>\n      <ng-template #inputFrom>\n        <input\n          class=\"cx-account-summary-document-filter-form-input\"\n          [type]=\"type\"\n          formControlName=\"from\"\n        />\n        <cx-form-errors [control]=\"formGroup.controls.from\"></cx-form-errors>\n      </ng-template>\n    </label>\n\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.endRange' | cxTranslate }}</span>\n      <ng-container *ngIf=\"type === 'date'; else inputTo\">\n        <cx-date-picker [control]=\"formGroup.controls.to\"></cx-date-picker>\n      </ng-container>\n      <ng-template #inputTo>\n        <input\n          class=\"cx-account-summary-document-filter-form-input\"\n          [type]=\"type\"\n          formControlName=\"to\"\n        />\n        <cx-form-errors [control]=\"formGroup.controls.to\"></cx-form-errors>\n      </ng-template>\n      <cx-form-errors\n        [control]=\"formGroup\"\n        [prefix]=\"'orgAccountSummary.filter.errors'\"\n      ></cx-form-errors>\n    </label>\n  </ng-container>\n</ng-template>\n\n<form (ngSubmit)=\"formSearch()\" [formGroup]=\"filterForm\">\n  <div\n    class=\"cx-account-summary-document-filter-form\"\n    *ngIf=\"filterForm.controls.filterBy.value as filterBy\"\n  >\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.status' | cxTranslate }}</span>\n      <ng-select\n        formControlName=\"status\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"statusOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [cxNgSelectA11y]=\"{\n          ariaLabel: 'orgAccountSummary.filter.status' | cxTranslate,\n          ariaControls: 'cx-account-summary-document-table'\n        }\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"filterForm.controls.status\"></cx-form-errors>\n    </label>\n\n    <label class=\"cx-account-summary-document-filter-form-item\">\n      <span>{{ 'orgAccountSummary.filter.filterBy' | cxTranslate }}</span>\n      <ng-select\n        formControlName=\"filterBy\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"filterByOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        [cxNgSelectA11y]=\"{\n          ariaLabel: 'orgAccountSummary.filter.filterBy' | cxTranslate,\n          ariaControls: 'cx-account-summary-document-table'\n        }\"\n      >\n      </ng-select>\n      <cx-form-errors [control]=\"filterForm.controls.filterBy\"></cx-form-errors>\n    </label>\n\n    <label\n      class=\"cx-account-summary-document-filter-form-item\"\n      *ngIf=\"filterBy === FilterByOptions.DOCUMENT_TYPE\"\n    >\n      <span>{{ 'orgAccountSummary.filter.documentType' | cxTranslate }}</span>\n      <ng-select\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"documentTypeOptions\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        formControlName=\"documentType\"\n      >\n      </ng-select>\n      <cx-form-errors\n        [control]=\"filterForm.controls.documentType\"\n      ></cx-form-errors>\n    </label>\n\n    <label\n      class=\"cx-account-summary-document-filter-form-item\"\n      *ngIf=\"filterBy === FilterByOptions.DOCUMENT_NUMBER\"\n    >\n      <span>{{ 'orgAccountSummary.filter.documentNumber' | cxTranslate }}</span>\n      <input\n        class=\"cx-account-summary-document-filter-form-input\"\n        formControlName=\"documentNumber\"\n      />\n      <cx-form-errors\n        [control]=\"filterForm.controls.documentNumber\"\n      ></cx-form-errors>\n    </label>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DOCUMENT_NUMBER_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('documentNumberRange'),\n            type: 'text'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DATE_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('documentDateRange'),\n            type: 'date'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.DUE_DATE_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: { formGroup: filterForm.get('dueDateRange'), type: 'date' }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.AMOUNT_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('originalAmountRange'),\n            type: 'number'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <ng-template [ngIf]=\"filterBy === FilterByOptions.OPEN_AMOUNT_RANGE\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          rangeInput;\n          context: {\n            formGroup: filterForm.get('openAmountRange'),\n            type: 'number'\n          }\n        \"\n      >\n      </ng-container>\n    </ng-template>\n\n    <div class=\"cx-account-summary-document-filter-form-button-block\">\n      <button\n        class=\"cx-action-link clear-btn\"\n        type=\"button\"\n        (click)=\"resetForm(true)\"\n      >\n        {{ 'orgAccountSummary.filter.clear' | cxTranslate }}\n      </button>\n      <button class=\"btn btn-primary\" type=\"submit\">\n        {{ 'orgAccountSummary.filter.search' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</form>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslationService }, { type: i2.FormBuilder }]; }, propDecorators: { documentTypeOptions: [{
                type: Input
            }], initialFilters: [{
                type: Input
            }], filterListEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JnYW5pemF0aW9uL2FjY291bnQtc3VtbWFyeS9jb21wb25lbnRzL2RldGFpbHMvZG9jdW1lbnQvZmlsdGVyL2FjY291bnQtc3VtbWFyeS1kb2N1bWVudC1maWx0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZ2FuaXphdGlvbi9hY2NvdW50LXN1bW1hcnkvY29tcG9uZW50cy9kZXRhaWxzL2RvY3VtZW50L2ZpbHRlci9hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBR0wsY0FBYyxFQUNkLGVBQWUsR0FDaEIsTUFBTSw4Q0FBOEMsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVV6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7QUFrQnJDLE1BQU0sT0FBTyxxQ0FBcUM7SUFNaEQsSUFDSSxjQUFjLENBQUMsY0FBbUM7UUFDcEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBZUQsWUFDWSxXQUErQixFQUMvQixFQUFlO1FBRGYsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLE9BQUUsR0FBRixFQUFFLENBQWE7UUFkM0Isb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBdUIsQ0FBQztRQUUxRCwwQkFBMEI7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SSxJQUFJLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU8sVUFBVSxDQUFDLFNBQWlCO1FBQ2xDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEQsT0FBTyxHQUFHLElBQUksSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7a0lBN1JVLHFDQUFxQztzSEFBckMscUNBQXFDLHFOQ2xEbEQsNmpNQTRMQTsyRkQxSWEscUNBQXFDO2tCQUxqRCxTQUFTOytCQUNFLG9DQUFvQyxtQkFFN0IsdUJBQXVCLENBQUMsTUFBTTttSUFNL0MsbUJBQW1CO3NCQURsQixLQUFLO2dCQUlGLGNBQWM7c0JBRGpCLEtBQUs7Z0JBTU4sZUFBZTtzQkFEZCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWNjb3VudFN1bW1hcnlEb2N1bWVudFR5cGUsXG4gIERvY3VtZW50UXVlcnlQYXJhbXMsXG4gIERvY3VtZW50U3RhdHVzLFxuICBGaWx0ZXJCeU9wdGlvbnMsXG59IGZyb20gJ0BzcGFydGFjdXMvb3JnYW5pemF0aW9uL2FjY291bnQtc3VtbWFyeS9yb290JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgemlwIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIEFic3RyYWN0Q29udHJvbCxcbiAgQWJzdHJhY3RDb250cm9sT3B0aW9ucyxcbiAgRm9ybUJ1aWxkZXIsXG4gIEZvcm1Hcm91cCxcbiAgVmFsaWRhdGlvbkVycm9ycyxcbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbnRlcmZhY2UgSXRlbVR5cGUge1xuICBjb2RlOiBzdHJpbmc7XG4gIG5hbWU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBHcm91cFZhbGlkYXRvciB7XG4gIHN0YXJ0UmFuZ2U/OiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcbiAgZW5kUmFuZ2U/OiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcbiAgZ3JvdXBWYWxpZGF0b3I/OiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEFjY291bnRTdW1tYXJ5RG9jdW1lbnRGaWx0ZXJDb21wb25lbnRcbiAgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveVxue1xuICBASW5wdXQoKVxuICBkb2N1bWVudFR5cGVPcHRpb25zOiBBcnJheTxBY2NvdW50U3VtbWFyeURvY3VtZW50VHlwZT47XG5cbiAgQElucHV0KClcbiAgc2V0IGluaXRpYWxGaWx0ZXJzKGluaXRpYWxGaWx0ZXJzOiBEb2N1bWVudFF1ZXJ5UGFyYW1zKSB7XG4gICAgdGhpcy5pbml0aWFsaXplRm9ybShpbml0aWFsRmlsdGVycyk7XG4gIH1cblxuICBAT3V0cHV0KClcbiAgZmlsdGVyTGlzdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxEb2N1bWVudFF1ZXJ5UGFyYW1zPigpO1xuXG4gIC8qIEZvciBFbnVtIHVzZSBpbiBIVE1MICovXG4gIEZpbHRlckJ5T3B0aW9ucyA9IEZpbHRlckJ5T3B0aW9ucztcblxuICBmaWx0ZXJGb3JtOiBGb3JtR3JvdXA7XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgc3RhdHVzT3B0aW9uczogSXRlbVR5cGVbXTtcbiAgZmlsdGVyQnlPcHRpb25zOiBJdGVtVHlwZVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBmYjogRm9ybUJ1aWxkZXJcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHRoaXMuZ2V0U3RhdHVzT3B0aW9ucygpLnN1YnNjcmliZShcbiAgICAgICAgKHN0YXR1c09wdGlvbnMpID0+ICh0aGlzLnN0YXR1c09wdGlvbnMgPSBbLi4uc3RhdHVzT3B0aW9uc10pXG4gICAgICApXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHRoaXMuZ2V0RmlsdGVyQnlPcHRpb25zKCkuc3Vic2NyaWJlKFxuICAgICAgICAoZmlsdGVyT3B0aW9ucykgPT4gKHRoaXMuZmlsdGVyQnlPcHRpb25zID0gWy4uLmZpbHRlck9wdGlvbnNdKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgZm9ybVNlYXJjaCgpOiB2b2lkIHtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdzdGF0dXMnKT8udmFsdWUgYXMgRG9jdW1lbnRTdGF0dXM7XG4gICAgY29uc3QgZmlsdGVyQnlLZXkgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdmaWx0ZXJCeScpXG4gICAgICA/LnZhbHVlIGFzIEZpbHRlckJ5T3B0aW9ucztcbiAgICBsZXQgZmlsdGVyQnlWYWx1ZTtcbiAgICBsZXQgc3RhcnRSYW5nZTtcbiAgICBsZXQgZW5kUmFuZ2U7XG5cbiAgICBzd2l0Y2ggKGZpbHRlckJ5S2V5KSB7XG4gICAgICBjYXNlIEZpbHRlckJ5T3B0aW9ucy5ET0NVTUVOVF9UWVBFOiB7XG4gICAgICAgIGZpbHRlckJ5VmFsdWUgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdkb2N1bWVudFR5cGUnKT8udmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBGaWx0ZXJCeU9wdGlvbnMuRE9DVU1FTlRfTlVNQkVSOiB7XG4gICAgICAgIGZpbHRlckJ5VmFsdWUgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdkb2N1bWVudE51bWJlcicpPy52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIEZpbHRlckJ5T3B0aW9ucy5ET0NVTUVOVF9OVU1CRVJfUkFOR0U6IHtcbiAgICAgICAgc3RhcnRSYW5nZSA9IHRoaXMuZmlsdGVyRm9ybS5nZXQoJ2RvY3VtZW50TnVtYmVyUmFuZ2UuZnJvbScpPy52YWx1ZTtcbiAgICAgICAgZW5kUmFuZ2UgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdkb2N1bWVudE51bWJlclJhbmdlLnRvJyk/LnZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgRmlsdGVyQnlPcHRpb25zLkRBVEVfUkFOR0U6IHtcbiAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMuZmlsdGVyRm9ybS5nZXQoJ2RvY3VtZW50RGF0ZVJhbmdlLmZyb20nKT8udmFsdWU7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5maWx0ZXJGb3JtLmdldCgnZG9jdW1lbnREYXRlUmFuZ2UudG8nKT8udmFsdWU7XG4gICAgICAgIHN0YXJ0UmFuZ2UgPSBmcm9tID8gdGhpcy5lbmNvZGVEYXRlKGZyb20pIDogJyc7XG4gICAgICAgIGVuZFJhbmdlID0gdG8gPyB0aGlzLmVuY29kZURhdGUodG8pIDogJyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBGaWx0ZXJCeU9wdGlvbnMuRFVFX0RBVEVfUkFOR0U6IHtcbiAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMuZmlsdGVyRm9ybS5nZXQoJ2R1ZURhdGVSYW5nZS5mcm9tJyk/LnZhbHVlO1xuICAgICAgICBjb25zdCB0byA9IHRoaXMuZmlsdGVyRm9ybS5nZXQoJ2R1ZURhdGVSYW5nZS50bycpPy52YWx1ZTtcbiAgICAgICAgc3RhcnRSYW5nZSA9IGZyb20gPyB0aGlzLmVuY29kZURhdGUoZnJvbSkgOiAnJztcbiAgICAgICAgZW5kUmFuZ2UgPSB0byA/IHRoaXMuZW5jb2RlRGF0ZSh0bykgOiAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIEZpbHRlckJ5T3B0aW9ucy5BTU9VTlRfUkFOR0U6IHtcbiAgICAgICAgc3RhcnRSYW5nZSA9IHRoaXMuZmlsdGVyRm9ybS5nZXQoJ29yaWdpbmFsQW1vdW50UmFuZ2UuZnJvbScpPy52YWx1ZTtcbiAgICAgICAgZW5kUmFuZ2UgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdvcmlnaW5hbEFtb3VudFJhbmdlLnRvJyk/LnZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgRmlsdGVyQnlPcHRpb25zLk9QRU5fQU1PVU5UX1JBTkdFOiB7XG4gICAgICAgIHN0YXJ0UmFuZ2UgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdvcGVuQW1vdW50UmFuZ2UuZnJvbScpPy52YWx1ZTtcbiAgICAgICAgZW5kUmFuZ2UgPSB0aGlzLmZpbHRlckZvcm0uZ2V0KCdvcGVuQW1vdW50UmFuZ2UudG8nKT8udmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmZpbHRlckxpc3RFdmVudC5lbWl0KHtcbiAgICAgIHN0YXR1cyxcbiAgICAgIGZpbHRlckJ5S2V5LFxuICAgICAgZmlsdGVyQnlWYWx1ZSxcbiAgICAgIHN0YXJ0UmFuZ2UsXG4gICAgICBlbmRSYW5nZSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0Rm9ybShhbmRTZWFyY2ggPSBmYWxzZSk6IHZvaWQge1xuICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgZG9jdW1lbnRUeXBlOiAnJyxcbiAgICAgIGRvY3VtZW50TnVtYmVyOiAnJyxcbiAgICAgIGRvY3VtZW50TnVtYmVyUmFuZ2U6IHsgZnJvbTogJycsIHRvOiAnJyB9LFxuICAgICAgZG9jdW1lbnREYXRlUmFuZ2U6IHsgZnJvbTogJycsIHRvOiAnJyB9LFxuICAgICAgZHVlRGF0ZVJhbmdlOiB7IGZyb206ICcnLCB0bzogJycgfSxcbiAgICAgIG9yaWdpbmFsQW1vdW50UmFuZ2U6IHsgZnJvbTogJycsIHRvOiAnJyB9LFxuICAgICAgb3BlbkFtb3VudFJhbmdlOiB7IGZyb206ICcnLCB0bzogJycgfSxcbiAgICB9O1xuXG4gICAgaWYgKGFuZFNlYXJjaCkge1xuICAgICAgLy8gaWYgc2V0LCBjbGVhciBhbGwgZmllbGRzIGFuZCBwZXJmb3JtIHNlYXJjaFxuICAgICAgdGhpcy5maWx0ZXJGb3JtLnBhdGNoVmFsdWUoe1xuICAgICAgICAuLi5kZWZhdWx0cyxcbiAgICAgICAgc3RhdHVzOiBEb2N1bWVudFN0YXR1cy5PUEVOLFxuICAgICAgICBmaWx0ZXJCeTogRmlsdGVyQnlPcHRpb25zLkRPQ1VNRU5UX05VTUJFUixcbiAgICAgIH0pO1xuICAgICAgdGhpcy5mb3JtU2VhcmNoKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IGNsZWFyIGFsbCBmaWVsZHMgZXhjZXB0IHN0YXR1cyBhbmQgZmlsdGVyQnlcbiAgICAgIHRoaXMuZmlsdGVyRm9ybS5wYXRjaFZhbHVlKGRlZmF1bHRzKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U3RhdHVzT3B0aW9ucygpOiBPYnNlcnZhYmxlPEl0ZW1UeXBlW10+IHtcbiAgICBjb25zdCBzdGF0dXNPcHRpb25zOiBJdGVtVHlwZVtdID0gKFxuICAgICAgT2JqZWN0LnZhbHVlcyhEb2N1bWVudFN0YXR1cykgYXMgQXJyYXk8c3RyaW5nPlxuICAgICkubWFwKChjb2RlKSA9PiAoeyBjb2RlIH0pKTtcblxuICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IHN0YXR1c09wdGlvbnMubWFwKChzdGF0dXMpID0+XG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZShgb3JnQWNjb3VudFN1bW1hcnkuc3RhdHVzZXMuJHtzdGF0dXMuY29kZX1gKVxuICAgICk7XG5cbiAgICByZXR1cm4gemlwKC4uLnRyYW5zbGF0aW9ucykucGlwZShcbiAgICAgIG1hcCgodGV4dHMpID0+IHtcbiAgICAgICAgdGV4dHMuZm9yRWFjaCgodGV4dCwgaW5kZXgpID0+IChzdGF0dXNPcHRpb25zW2luZGV4XS5uYW1lID0gdGV4dCkpO1xuICAgICAgICByZXR1cm4gc3RhdHVzT3B0aW9ucztcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRGaWx0ZXJCeU9wdGlvbnMoKTogT2JzZXJ2YWJsZTxJdGVtVHlwZVtdPiB7XG4gICAgY29uc3QgZmlsdGVyQnlPcHRpb25zOiBJdGVtVHlwZVtdID0gKFxuICAgICAgT2JqZWN0LnZhbHVlcyhGaWx0ZXJCeU9wdGlvbnMpIGFzIEFycmF5PHN0cmluZz5cbiAgICApLm1hcCgoY29kZSkgPT4gKHsgY29kZSB9KSk7XG5cbiAgICBjb25zdCB0cmFuc2xhdGlvbnMgPSBmaWx0ZXJCeU9wdGlvbnMubWFwKChzdGF0dXMpID0+XG4gICAgICB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZShcbiAgICAgICAgYG9yZ0FjY291bnRTdW1tYXJ5LmZpbHRlckJ5T3B0aW9ucy4ke3N0YXR1cy5jb2RlfWBcbiAgICAgIClcbiAgICApO1xuXG4gICAgcmV0dXJuIHppcCguLi50cmFuc2xhdGlvbnMpLnBpcGUoXG4gICAgICBtYXAoKHRleHRzKSA9PiB7XG4gICAgICAgIHRleHRzLmZvckVhY2goKHRleHQsIGluZGV4KSA9PiAoZmlsdGVyQnlPcHRpb25zW2luZGV4XS5uYW1lID0gdGV4dCkpO1xuICAgICAgICByZXR1cm4gZmlsdGVyQnlPcHRpb25zO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0aWFsaXplRm9ybSh7XG4gICAgc3RhdHVzLFxuICAgIGZpbHRlckJ5S2V5LFxuICAgIGZpbHRlckJ5VmFsdWUsXG4gICAgc3RhcnRSYW5nZSxcbiAgICBlbmRSYW5nZSxcbiAgfTogRG9jdW1lbnRRdWVyeVBhcmFtcyk6IHZvaWQge1xuICAgIGNvbnN0IGdlbmVyYXRlUmFuZ2VHcm91cCA9IChcbiAgICAgIGZpbHRlckJ5T3B0aW9uOiBGaWx0ZXJCeU9wdGlvbnMsXG4gICAgICB2YWxpZGF0b3I/OiBHcm91cFZhbGlkYXRvclxuICAgICk6IEZvcm1Hcm91cCA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5mYi5ncm91cChcbiAgICAgICAge1xuICAgICAgICAgIGZyb206IFtcbiAgICAgICAgICAgIGZpbHRlckJ5S2V5ID09PSBmaWx0ZXJCeU9wdGlvbiAmJiAoc3RhcnRSYW5nZSA/PyAnJyksXG4gICAgICAgICAgICB2YWxpZGF0b3I/LnN0YXJ0UmFuZ2UsXG4gICAgICAgICAgXSxcbiAgICAgICAgICB0bzogW1xuICAgICAgICAgICAgZmlsdGVyQnlLZXkgPT09IGZpbHRlckJ5T3B0aW9uICYmIChlbmRSYW5nZSA/PyAnJyksXG4gICAgICAgICAgICB2YWxpZGF0b3I/LmVuZFJhbmdlLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgdmFsaWRhdG9yczogdmFsaWRhdG9yPy5ncm91cFZhbGlkYXRvciB9IGFzIEFic3RyYWN0Q29udHJvbE9wdGlvbnNcbiAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdlbmVyYXRlRGF0ZVJhbmdlR3JvdXAgPSAoXG4gICAgICBmaWx0ZXJCeU9wdGlvbjogRmlsdGVyQnlPcHRpb25zLFxuICAgICAgdmFsaWRhdG9yPzogR3JvdXBWYWxpZGF0b3IgfCBudWxsXG4gICAgKTogRm9ybUdyb3VwID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmZiLmdyb3VwKFxuICAgICAgICB7XG4gICAgICAgICAgZnJvbTogW1xuICAgICAgICAgICAgZmlsdGVyQnlLZXkgPT09IGZpbHRlckJ5T3B0aW9uICYmIHN0YXJ0UmFuZ2VcbiAgICAgICAgICAgICAgPyB0aGlzLmRlY29kZURhdGUoc3RhcnRSYW5nZSlcbiAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgIHZhbGlkYXRvcj8uc3RhcnRSYW5nZSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIHRvOiBbXG4gICAgICAgICAgICBmaWx0ZXJCeUtleSA9PT0gZmlsdGVyQnlPcHRpb24gJiYgZW5kUmFuZ2VcbiAgICAgICAgICAgICAgPyB0aGlzLmRlY29kZURhdGUoZW5kUmFuZ2UpXG4gICAgICAgICAgICAgIDogJycsXG4gICAgICAgICAgICB2YWxpZGF0b3I/LmVuZFJhbmdlLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgdmFsaWRhdG9yczogdmFsaWRhdG9yPy5ncm91cFZhbGlkYXRvciB9IGFzIEFic3RyYWN0Q29udHJvbE9wdGlvbnNcbiAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IHZhbGlkUmFuZ2UgPSAodHlwZTogJ2RhdGUnIHwgJ251bWJlcicpOiBWYWxpZGF0aW9uRXJyb3JzID0+IHtcbiAgICAgIHJldHVybiAoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xuICAgICAgICBjb25zdCBmcm9tID0gYy5nZXQoJ2Zyb20nKSBhcyBBYnN0cmFjdENvbnRyb2w7XG4gICAgICAgIGNvbnN0IHRvID0gYy5nZXQoJ3RvJykgYXMgQWJzdHJhY3RDb250cm9sO1xuXG4gICAgICAgIGlmIChmcm9tLnByaXN0aW5lIHx8IGZyb20uaW52YWxpZCB8fCB0by5wcmlzdGluZSB8fCB0by5pbnZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJyAmJiBmcm9tLnZhbHVlID4gdG8udmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4geyB0b0RhdGVNdXN0Q29tZUFmdGVyRnJvbTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHJldHVybiBpc0Zyb21MYXJnZXJUaGFuVG8oZnJvbSwgdG8pXG4gICAgICAgICAgICA/IHsgdG9BbW91bnRNdXN0QmVMYXJnZVRoYW5Gcm9tOiB0cnVlIH1cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzRnJvbUxhcmdlclRoYW5UbyhcbiAgICAgIGZyb206IEFic3RyYWN0Q29udHJvbDxhbnksIGFueT4sXG4gICAgICB0bzogQWJzdHJhY3RDb250cm9sPGFueSwgYW55PlxuICAgICkge1xuICAgICAgY29uc3QgZnJvbVZhbHVlID0gcGFyc2VGbG9hdChmcm9tLnZhbHVlKSB8fCAwO1xuICAgICAgY29uc3QgdG9WYWx1ZSA9IHBhcnNlRmxvYXQodG8udmFsdWUpIHx8IDA7XG4gICAgICByZXR1cm4gIWlzTmFOKGZyb20udmFsdWUpICYmICFpc05hTih0by52YWx1ZSkgJiYgZnJvbVZhbHVlID4gdG9WYWx1ZTtcbiAgICB9XG5cbiAgICB0aGlzLmZpbHRlckZvcm0gPSB0aGlzLmZiLmdyb3VwKHtcbiAgICAgIHN0YXR1czogc3RhdHVzIHx8IERvY3VtZW50U3RhdHVzLk9QRU4sXG4gICAgICBmaWx0ZXJCeTogZmlsdGVyQnlLZXkgfHwgRmlsdGVyQnlPcHRpb25zLkRPQ1VNRU5UX05VTUJFUixcbiAgICAgIGRvY3VtZW50VHlwZTpcbiAgICAgICAgZmlsdGVyQnlLZXkgPT09IEZpbHRlckJ5T3B0aW9ucy5ET0NVTUVOVF9UWVBFICYmIChmaWx0ZXJCeVZhbHVlID8/ICcnKSxcbiAgICAgIGRvY3VtZW50TnVtYmVyOlxuICAgICAgICBmaWx0ZXJCeUtleSA9PT0gRmlsdGVyQnlPcHRpb25zLkRPQ1VNRU5UX05VTUJFUiAmJlxuICAgICAgICAoZmlsdGVyQnlWYWx1ZSA/PyAnJyksXG4gICAgICBkb2N1bWVudE51bWJlclJhbmdlOiBnZW5lcmF0ZVJhbmdlR3JvdXAoXG4gICAgICAgIEZpbHRlckJ5T3B0aW9ucy5ET0NVTUVOVF9OVU1CRVJfUkFOR0VcbiAgICAgICksXG4gICAgICBkb2N1bWVudERhdGVSYW5nZTogZ2VuZXJhdGVEYXRlUmFuZ2VHcm91cChGaWx0ZXJCeU9wdGlvbnMuREFURV9SQU5HRSwge1xuICAgICAgICBncm91cFZhbGlkYXRvcjogdmFsaWRSYW5nZSgnZGF0ZScpLFxuICAgICAgfSksXG4gICAgICBkdWVEYXRlUmFuZ2U6IGdlbmVyYXRlRGF0ZVJhbmdlR3JvdXAoRmlsdGVyQnlPcHRpb25zLkRVRV9EQVRFX1JBTkdFLCB7XG4gICAgICAgIGdyb3VwVmFsaWRhdG9yOiB2YWxpZFJhbmdlKCdkYXRlJyksXG4gICAgICB9KSxcbiAgICAgIG9yaWdpbmFsQW1vdW50UmFuZ2U6IGdlbmVyYXRlUmFuZ2VHcm91cChGaWx0ZXJCeU9wdGlvbnMuQU1PVU5UX1JBTkdFLCB7XG4gICAgICAgIGdyb3VwVmFsaWRhdG9yOiB2YWxpZFJhbmdlKCdudW1iZXInKSxcbiAgICAgIH0pLFxuICAgICAgb3BlbkFtb3VudFJhbmdlOiBnZW5lcmF0ZVJhbmdlR3JvdXAoRmlsdGVyQnlPcHRpb25zLk9QRU5fQU1PVU5UX1JBTkdFLCB7XG4gICAgICAgIGdyb3VwVmFsaWRhdG9yOiB2YWxpZFJhbmdlKCdudW1iZXInKSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHRoaXMuZmlsdGVyRm9ybVxuICAgICAgICAuZ2V0KCdmaWx0ZXJCeScpXG4gICAgICAgID8udmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB0aGlzLmZpbHRlckJ5Q2hhbmdlZCgpKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckJ5Q2hhbmdlZCgpIHtcbiAgICB0aGlzLnJlc2V0Rm9ybShmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIGVuY29kZURhdGUoaW5wdXREYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IFt5ZWFyLCBtb250aCwgZGF5XSA9IGlucHV0RGF0ZS5zcGxpdCgnLScpO1xuICAgIHJldHVybiBgJHttb250aH0vJHtkYXl9LyR7eWVhcn1gO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWNvZGVEYXRlKGlucHV0RGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBbbW9udGgsIGRheSwgeWVhcl0gPSBpbnB1dERhdGUuc3BsaXQoJy8nKTtcbiAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YDtcbiAgfVxufVxuIiwiPG5nLXRlbXBsYXRlICNyYW5nZUlucHV0IGxldC1mb3JtR3JvdXA9XCJmb3JtR3JvdXBcIiBsZXQtdHlwZT1cInR5cGVcIj5cbiAgPG5nLWNvbnRhaW5lciBbZm9ybUdyb3VwXT1cImZvcm1Hcm91cFwiPlxuICAgIDxsYWJlbCBjbGFzcz1cImN4LWFjY291bnQtc3VtbWFyeS1kb2N1bWVudC1maWx0ZXItZm9ybS1pdGVtXCI+XG4gICAgICA8c3Bhbj57eyAnb3JnQWNjb3VudFN1bW1hcnkuZmlsdGVyLnN0YXJ0UmFuZ2UnIHwgY3hUcmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidHlwZSA9PT0gJ2RhdGUnOyBlbHNlIGlucHV0RnJvbVwiPlxuICAgICAgICA8Y3gtZGF0ZS1waWNrZXIgW2NvbnRyb2xdPVwiZm9ybUdyb3VwLmNvbnRyb2xzLmZyb21cIj48L2N4LWRhdGUtcGlja2VyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8bmctdGVtcGxhdGUgI2lucHV0RnJvbT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY2xhc3M9XCJjeC1hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLWZvcm0taW5wdXRcIlxuICAgICAgICAgIFt0eXBlXT1cInR5cGVcIlxuICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImZyb21cIlxuICAgICAgICAvPlxuICAgICAgICA8Y3gtZm9ybS1lcnJvcnMgW2NvbnRyb2xdPVwiZm9ybUdyb3VwLmNvbnRyb2xzLmZyb21cIj48L2N4LWZvcm0tZXJyb3JzPlxuICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8L2xhYmVsPlxuXG4gICAgPGxhYmVsIGNsYXNzPVwiY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlci1mb3JtLWl0ZW1cIj5cbiAgICAgIDxzcGFuPnt7ICdvcmdBY2NvdW50U3VtbWFyeS5maWx0ZXIuZW5kUmFuZ2UnIHwgY3hUcmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwidHlwZSA9PT0gJ2RhdGUnOyBlbHNlIGlucHV0VG9cIj5cbiAgICAgICAgPGN4LWRhdGUtcGlja2VyIFtjb250cm9sXT1cImZvcm1Hcm91cC5jb250cm9scy50b1wiPjwvY3gtZGF0ZS1waWNrZXI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjaW5wdXRUbz5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgY2xhc3M9XCJjeC1hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLWZvcm0taW5wdXRcIlxuICAgICAgICAgIFt0eXBlXT1cInR5cGVcIlxuICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cInRvXCJcbiAgICAgICAgLz5cbiAgICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZvcm1Hcm91cC5jb250cm9scy50b1wiPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPGN4LWZvcm0tZXJyb3JzXG4gICAgICAgIFtjb250cm9sXT1cImZvcm1Hcm91cFwiXG4gICAgICAgIFtwcmVmaXhdPVwiJ29yZ0FjY291bnRTdW1tYXJ5LmZpbHRlci5lcnJvcnMnXCJcbiAgICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICAgIDwvbGFiZWw+XG4gIDwvbmctY29udGFpbmVyPlxuPC9uZy10ZW1wbGF0ZT5cblxuPGZvcm0gKG5nU3VibWl0KT1cImZvcm1TZWFyY2goKVwiIFtmb3JtR3JvdXBdPVwiZmlsdGVyRm9ybVwiPlxuICA8ZGl2XG4gICAgY2xhc3M9XCJjeC1hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLWZvcm1cIlxuICAgICpuZ0lmPVwiZmlsdGVyRm9ybS5jb250cm9scy5maWx0ZXJCeS52YWx1ZSBhcyBmaWx0ZXJCeVwiXG4gID5cbiAgICA8bGFiZWwgY2xhc3M9XCJjeC1hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLWZvcm0taXRlbVwiPlxuICAgICAgPHNwYW4+e3sgJ29yZ0FjY291bnRTdW1tYXJ5LmZpbHRlci5zdGF0dXMnIHwgY3hUcmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctc2VsZWN0XG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cInN0YXR1c1wiXG4gICAgICAgIFtzZWFyY2hhYmxlXT1cImZhbHNlXCJcbiAgICAgICAgW2NsZWFyYWJsZV09XCJmYWxzZVwiXG4gICAgICAgIFtpdGVtc109XCJzdGF0dXNPcHRpb25zXCJcbiAgICAgICAgYmluZExhYmVsPVwibmFtZVwiXG4gICAgICAgIGJpbmRWYWx1ZT1cImNvZGVcIlxuICAgICAgICBbY3hOZ1NlbGVjdEExMXldPVwie1xuICAgICAgICAgIGFyaWFMYWJlbDogJ29yZ0FjY291bnRTdW1tYXJ5LmZpbHRlci5zdGF0dXMnIHwgY3hUcmFuc2xhdGUsXG4gICAgICAgICAgYXJpYUNvbnRyb2xzOiAnY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LXRhYmxlJ1xuICAgICAgICB9XCJcbiAgICAgID5cbiAgICAgIDwvbmctc2VsZWN0PlxuICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZpbHRlckZvcm0uY29udHJvbHMuc3RhdHVzXCI+PC9jeC1mb3JtLWVycm9ycz5cbiAgICA8L2xhYmVsPlxuXG4gICAgPGxhYmVsIGNsYXNzPVwiY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlci1mb3JtLWl0ZW1cIj5cbiAgICAgIDxzcGFuPnt7ICdvcmdBY2NvdW50U3VtbWFyeS5maWx0ZXIuZmlsdGVyQnknIHwgY3hUcmFuc2xhdGUgfX08L3NwYW4+XG4gICAgICA8bmctc2VsZWN0XG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cImZpbHRlckJ5XCJcbiAgICAgICAgW3NlYXJjaGFibGVdPVwiZmFsc2VcIlxuICAgICAgICBbY2xlYXJhYmxlXT1cImZhbHNlXCJcbiAgICAgICAgW2l0ZW1zXT1cImZpbHRlckJ5T3B0aW9uc1wiXG4gICAgICAgIGJpbmRMYWJlbD1cIm5hbWVcIlxuICAgICAgICBiaW5kVmFsdWU9XCJjb2RlXCJcbiAgICAgICAgW2N4TmdTZWxlY3RBMTF5XT1cIntcbiAgICAgICAgICBhcmlhTGFiZWw6ICdvcmdBY2NvdW50U3VtbWFyeS5maWx0ZXIuZmlsdGVyQnknIHwgY3hUcmFuc2xhdGUsXG4gICAgICAgICAgYXJpYUNvbnRyb2xzOiAnY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LXRhYmxlJ1xuICAgICAgICB9XCJcbiAgICAgID5cbiAgICAgIDwvbmctc2VsZWN0PlxuICAgICAgPGN4LWZvcm0tZXJyb3JzIFtjb250cm9sXT1cImZpbHRlckZvcm0uY29udHJvbHMuZmlsdGVyQnlcIj48L2N4LWZvcm0tZXJyb3JzPlxuICAgIDwvbGFiZWw+XG5cbiAgICA8bGFiZWxcbiAgICAgIGNsYXNzPVwiY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlci1mb3JtLWl0ZW1cIlxuICAgICAgKm5nSWY9XCJmaWx0ZXJCeSA9PT0gRmlsdGVyQnlPcHRpb25zLkRPQ1VNRU5UX1RZUEVcIlxuICAgID5cbiAgICAgIDxzcGFuPnt7ICdvcmdBY2NvdW50U3VtbWFyeS5maWx0ZXIuZG9jdW1lbnRUeXBlJyB8IGN4VHJhbnNsYXRlIH19PC9zcGFuPlxuICAgICAgPG5nLXNlbGVjdFxuICAgICAgICBbc2VhcmNoYWJsZV09XCJmYWxzZVwiXG4gICAgICAgIFtjbGVhcmFibGVdPVwiZmFsc2VcIlxuICAgICAgICBbaXRlbXNdPVwiZG9jdW1lbnRUeXBlT3B0aW9uc1wiXG4gICAgICAgIGJpbmRMYWJlbD1cIm5hbWVcIlxuICAgICAgICBiaW5kVmFsdWU9XCJjb2RlXCJcbiAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiZG9jdW1lbnRUeXBlXCJcbiAgICAgID5cbiAgICAgIDwvbmctc2VsZWN0PlxuICAgICAgPGN4LWZvcm0tZXJyb3JzXG4gICAgICAgIFtjb250cm9sXT1cImZpbHRlckZvcm0uY29udHJvbHMuZG9jdW1lbnRUeXBlXCJcbiAgICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICAgIDwvbGFiZWw+XG5cbiAgICA8bGFiZWxcbiAgICAgIGNsYXNzPVwiY3gtYWNjb3VudC1zdW1tYXJ5LWRvY3VtZW50LWZpbHRlci1mb3JtLWl0ZW1cIlxuICAgICAgKm5nSWY9XCJmaWx0ZXJCeSA9PT0gRmlsdGVyQnlPcHRpb25zLkRPQ1VNRU5UX05VTUJFUlwiXG4gICAgPlxuICAgICAgPHNwYW4+e3sgJ29yZ0FjY291bnRTdW1tYXJ5LmZpbHRlci5kb2N1bWVudE51bWJlcicgfCBjeFRyYW5zbGF0ZSB9fTwvc3Bhbj5cbiAgICAgIDxpbnB1dFxuICAgICAgICBjbGFzcz1cImN4LWFjY291bnQtc3VtbWFyeS1kb2N1bWVudC1maWx0ZXItZm9ybS1pbnB1dFwiXG4gICAgICAgIGZvcm1Db250cm9sTmFtZT1cImRvY3VtZW50TnVtYmVyXCJcbiAgICAgIC8+XG4gICAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgICAgW2NvbnRyb2xdPVwiZmlsdGVyRm9ybS5jb250cm9scy5kb2N1bWVudE51bWJlclwiXG4gICAgICA+PC9jeC1mb3JtLWVycm9ycz5cbiAgICA8L2xhYmVsPlxuXG4gICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImZpbHRlckJ5ID09PSBGaWx0ZXJCeU9wdGlvbnMuRE9DVU1FTlRfTlVNQkVSX1JBTkdFXCI+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgcmFuZ2VJbnB1dDtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBmb3JtR3JvdXA6IGZpbHRlckZvcm0uZ2V0KCdkb2N1bWVudE51bWJlclJhbmdlJyksXG4gICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICB9XG4gICAgICAgIFwiXG4gICAgICA+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImZpbHRlckJ5ID09PSBGaWx0ZXJCeU9wdGlvbnMuREFURV9SQU5HRVwiPlxuICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgIHJhbmdlSW5wdXQ7XG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgZm9ybUdyb3VwOiBmaWx0ZXJGb3JtLmdldCgnZG9jdW1lbnREYXRlUmFuZ2UnKSxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRlJ1xuICAgICAgICAgIH1cbiAgICAgICAgXCJcbiAgICAgID5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctdGVtcGxhdGU+XG5cbiAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiZmlsdGVyQnkgPT09IEZpbHRlckJ5T3B0aW9ucy5EVUVfREFURV9SQU5HRVwiPlxuICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgIHJhbmdlSW5wdXQ7XG4gICAgICAgICAgY29udGV4dDogeyBmb3JtR3JvdXA6IGZpbHRlckZvcm0uZ2V0KCdkdWVEYXRlUmFuZ2UnKSwgdHlwZTogJ2RhdGUnIH1cbiAgICAgICAgXCJcbiAgICAgID5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctdGVtcGxhdGU+XG5cbiAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiZmlsdGVyQnkgPT09IEZpbHRlckJ5T3B0aW9ucy5BTU9VTlRfUkFOR0VcIj5cbiAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcbiAgICAgICAgICByYW5nZUlucHV0O1xuICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIGZvcm1Hcm91cDogZmlsdGVyRm9ybS5nZXQoJ29yaWdpbmFsQW1vdW50UmFuZ2UnKSxcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgICAgICAgfVxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cblxuICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCJmaWx0ZXJCeSA9PT0gRmlsdGVyQnlPcHRpb25zLk9QRU5fQU1PVU5UX1JBTkdFXCI+XG4gICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICpuZ1RlbXBsYXRlT3V0bGV0PVwiXG4gICAgICAgICAgcmFuZ2VJbnB1dDtcbiAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBmb3JtR3JvdXA6IGZpbHRlckZvcm0uZ2V0KCdvcGVuQW1vdW50UmFuZ2UnKSxcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInXG4gICAgICAgICAgfVxuICAgICAgICBcIlxuICAgICAgPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy10ZW1wbGF0ZT5cblxuICAgIDxkaXYgY2xhc3M9XCJjeC1hY2NvdW50LXN1bW1hcnktZG9jdW1lbnQtZmlsdGVyLWZvcm0tYnV0dG9uLWJsb2NrXCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzPVwiY3gtYWN0aW9uLWxpbmsgY2xlYXItYnRuXCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIChjbGljayk9XCJyZXNldEZvcm0odHJ1ZSlcIlxuICAgICAgPlxuICAgICAgICB7eyAnb3JnQWNjb3VudFN1bW1hcnkuZmlsdGVyLmNsZWFyJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiB0eXBlPVwic3VibWl0XCI+XG4gICAgICAgIHt7ICdvcmdBY2NvdW50U3VtbWFyeS5maWx0ZXIuc2VhcmNoJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Zvcm0+XG4iXX0=