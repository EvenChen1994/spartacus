/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { Subscription } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/organization/account-summary/root";
import * as i2 from "@spartacus/core";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/common";
export class AccountSummaryHeaderComponent {
    constructor(accountSummaryFacade, languageService, translation) {
        this.accountSummaryFacade = accountSummaryFacade;
        this.languageService = languageService;
        this.translation = translation;
        this.headerDetails$ = this.languageService
            .getActive()
            .pipe(switchMap(() => this.accountSummaryFacade.getAccountSummary()));
        this.subscriptions = new Subscription();
    }
    ngOnInit() {
        this.subscriptions.add(this.translation
            .translate('orgAccountSummary.details.notApplicable')
            .subscribe((text) => (this.notApplicable = text)));
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    getIdCardContent(id) {
        return this.translation.translate('orgAccountSummary.details.uid').pipe(map((idTitle) => ({
            title: idTitle,
            text: [id || this.notApplicable],
        })));
    }
    getNameCardContent(name) {
        return this.translation.translate('orgAccountSummary.details.name').pipe(map((nameTitle) => ({
            title: nameTitle,
            text: [name || this.notApplicable],
        })));
    }
    getAddressCardContent(billingAddress) {
        return this.translation.translate('orgAccountSummary.details.address').pipe(map((addressTitle) => {
            const name = `${billingAddress?.title}, ${billingAddress?.firstName} ${billingAddress?.lastName}`;
            const address = billingAddress?.formattedAddress;
            const country = billingAddress?.country?.name;
            return {
                title: addressTitle,
                text: Boolean(billingAddress)
                    ? [name, address, country]
                    : [this.notApplicable],
            };
        }));
    }
    getCreditRepCardContent(creditRep) {
        return this.translation
            .translate('orgAccountSummary.details.creditRep')
            .pipe(map((creditRepTitle) => ({
            title: creditRepTitle,
            text: [creditRep || this.notApplicable],
        })));
    }
    getCreditLineCardContent(creditLine) {
        return this.translation
            .translate('orgAccountSummary.details.creditLine')
            .pipe(map((creditLineTitle) => ({
            title: creditLineTitle,
            text: [creditLine || this.notApplicable],
        })));
    }
    getCurrentBalanceCardContent(currentBalance) {
        return this.translation
            .translate('orgAccountSummary.details.currentBalance')
            .pipe(map((currentBalanceTitle) => ({
            title: currentBalanceTitle,
            text: [currentBalance || this.notApplicable],
        })));
    }
    getOpenBalanceCardContent(openBalance) {
        return this.translation
            .translate('orgAccountSummary.details.openBalance')
            .pipe(map((openBalanceTitle) => ({
            title: openBalanceTitle,
            text: [openBalance || this.notApplicable],
        })));
    }
    getPastDueBalanceCardContent(pastDueBalance) {
        return this.translation
            .translate('orgAccountSummary.details.pastDueBalance')
            .pipe(map((pastDueBalanceTitle) => ({
            title: pastDueBalanceTitle,
            text: [pastDueBalance ?? this.notApplicable],
        })));
    }
}
AccountSummaryHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AccountSummaryHeaderComponent, deps: [{ token: i1.AccountSummaryFacade }, { token: i2.LanguageService }, { token: i2.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
AccountSummaryHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: AccountSummaryHeaderComponent, selector: "cx-account-summary-header", ngImport: i0, template: "<div class=\"cx-account-summary\" *ngIf=\"headerDetails$ | async as headerDetails\">\n  <div class=\"cx-account-summary-header-cards\">\n    <div\n      class=\"\n        cx-summary-card-responsive-group cx-summary-card-group-unit-address\n      \"\n    >\n      <!-- Card: Unit ID & Unit Name -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"getIdCardContent(headerDetails?.orgUnit?.uid) | async\"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"getNameCardContent(headerDetails?.orgUnit?.name) | async\"\n        >\n        </cx-card>\n      </div>\n\n      <!-- Card: Address -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"\n            getAddressCardContent(headerDetails?.billingAddress) | async\n          \"\n        >\n        </cx-card>\n      </div>\n    </div>\n\n    <div\n      class=\"\n        cx-summary-card-responsive-group cx-summary-card-group-credit-balance\n      \"\n    >\n      <!-- Card: Credit Rep & Credit Line -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"\n            getCreditRepCardContent(headerDetails?.accountManagerName) | async\n          \"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"\n            getCreditLineCardContent(headerDetails?.creditLimit) | async\n          \"\n        >\n        </cx-card>\n      </div>\n\n      <!-- Card: Current Balance & Open Balance -->\n      <div class=\"cx-summary-card cx-summary-card-balance\">\n        <cx-card\n          [content]=\"\n            getCurrentBalanceCardContent(\n              headerDetails?.amountBalance?.currentBalance\n            ) | async\n          \"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"\n            getOpenBalanceCardContent(headerDetails?.amountBalance?.openBalance)\n              | async\n          \"\n        >\n        </cx-card>\n      </div>\n    </div>\n\n    <!-- Card: Past Due Balance & Date Ranges -->\n    <div class=\"cx-summary-card cx-summary-card-group-due\">\n      <!-- If there range of past due balances are provided, display them here in a bordered section -->\n      <div\n        *ngIf=\"\n          headerDetails.amountBalance &&\n            headerDetails.amountBalance.dueBalances as pastDue;\n          else noDueRange\n        \"\n        [class.cx-account-summary-header-past-due-section]=\"pastDue.length > 0\"\n      >\n        <!-- Dynamically create lines of past due date ranges -->\n        <div\n          *ngIf=\"pastDue.length > 0\"\n          class=\"cx-account-summary-header-past-due-range-dates\"\n        >\n          <div\n            *ngFor=\"let rangeBalance of pastDue\"\n            class=\"cx-account-summary-header-past-due-range-collection\"\n            [tabindex]=\"-1\"\n          >\n            <div\n              class=\"cx-past-due-range-date\"\n              *ngIf=\"rangeBalance.dayRange as dayRange\"\n            >\n              <ng-template [ngIf]=\"dayRange?.maxBoundary\" [ngIfElse]=\"dayPlus\">\n                {{\n                  'orgAccountSummary.details.dayRange'\n                    | cxTranslate\n                      : {\n                          minBoundary: dayRange.minBoundary,\n                          maxBoundary: dayRange.maxBoundary\n                        }\n                }}\n              </ng-template>\n\n              <ng-template #dayPlus>\n                {{\n                  'orgAccountSummary.details.dayPlus'\n                    | cxTranslate: { minBoundary: dayRange.minBoundary }\n                }}\n              </ng-template>\n            </div>\n            <div>\n              {{ rangeBalance.amount }}\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"cx-account-summary-header-past-due-balance-total\"\n          [tabindex]=\"-1\"\n        >\n          <div class=\"cx-past-due-balance-label cx-card-title\">\n            {{ 'orgAccountSummary.details.pastDueBalance' | cxTranslate }}\n          </div>\n          <div>{{ headerDetails?.amountBalance?.pastDueBalance }}</div>\n        </div>\n      </div>\n\n      <!-- When there are no Ranges, only show a card containing the Past Due Balance -->\n      <ng-template #noDueRange>\n        <cx-card\n          [content]=\"\n            getPastDueBalanceCardContent(\n              headerDetails?.amountBalance?.pastDueBalance\n            ) | async\n          \"\n        >\n        </cx-card>\n      </ng-template>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i3.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit", "index"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AccountSummaryHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-account-summary-header', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"cx-account-summary\" *ngIf=\"headerDetails$ | async as headerDetails\">\n  <div class=\"cx-account-summary-header-cards\">\n    <div\n      class=\"\n        cx-summary-card-responsive-group cx-summary-card-group-unit-address\n      \"\n    >\n      <!-- Card: Unit ID & Unit Name -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"getIdCardContent(headerDetails?.orgUnit?.uid) | async\"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"getNameCardContent(headerDetails?.orgUnit?.name) | async\"\n        >\n        </cx-card>\n      </div>\n\n      <!-- Card: Address -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"\n            getAddressCardContent(headerDetails?.billingAddress) | async\n          \"\n        >\n        </cx-card>\n      </div>\n    </div>\n\n    <div\n      class=\"\n        cx-summary-card-responsive-group cx-summary-card-group-credit-balance\n      \"\n    >\n      <!-- Card: Credit Rep & Credit Line -->\n      <div class=\"cx-summary-card\">\n        <cx-card\n          [content]=\"\n            getCreditRepCardContent(headerDetails?.accountManagerName) | async\n          \"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"\n            getCreditLineCardContent(headerDetails?.creditLimit) | async\n          \"\n        >\n        </cx-card>\n      </div>\n\n      <!-- Card: Current Balance & Open Balance -->\n      <div class=\"cx-summary-card cx-summary-card-balance\">\n        <cx-card\n          [content]=\"\n            getCurrentBalanceCardContent(\n              headerDetails?.amountBalance?.currentBalance\n            ) | async\n          \"\n        >\n        </cx-card>\n\n        <cx-card\n          [content]=\"\n            getOpenBalanceCardContent(headerDetails?.amountBalance?.openBalance)\n              | async\n          \"\n        >\n        </cx-card>\n      </div>\n    </div>\n\n    <!-- Card: Past Due Balance & Date Ranges -->\n    <div class=\"cx-summary-card cx-summary-card-group-due\">\n      <!-- If there range of past due balances are provided, display them here in a bordered section -->\n      <div\n        *ngIf=\"\n          headerDetails.amountBalance &&\n            headerDetails.amountBalance.dueBalances as pastDue;\n          else noDueRange\n        \"\n        [class.cx-account-summary-header-past-due-section]=\"pastDue.length > 0\"\n      >\n        <!-- Dynamically create lines of past due date ranges -->\n        <div\n          *ngIf=\"pastDue.length > 0\"\n          class=\"cx-account-summary-header-past-due-range-dates\"\n        >\n          <div\n            *ngFor=\"let rangeBalance of pastDue\"\n            class=\"cx-account-summary-header-past-due-range-collection\"\n            [tabindex]=\"-1\"\n          >\n            <div\n              class=\"cx-past-due-range-date\"\n              *ngIf=\"rangeBalance.dayRange as dayRange\"\n            >\n              <ng-template [ngIf]=\"dayRange?.maxBoundary\" [ngIfElse]=\"dayPlus\">\n                {{\n                  'orgAccountSummary.details.dayRange'\n                    | cxTranslate\n                      : {\n                          minBoundary: dayRange.minBoundary,\n                          maxBoundary: dayRange.maxBoundary\n                        }\n                }}\n              </ng-template>\n\n              <ng-template #dayPlus>\n                {{\n                  'orgAccountSummary.details.dayPlus'\n                    | cxTranslate: { minBoundary: dayRange.minBoundary }\n                }}\n              </ng-template>\n            </div>\n            <div>\n              {{ rangeBalance.amount }}\n            </div>\n          </div>\n        </div>\n\n        <div\n          class=\"cx-account-summary-header-past-due-balance-total\"\n          [tabindex]=\"-1\"\n        >\n          <div class=\"cx-past-due-balance-label cx-card-title\">\n            {{ 'orgAccountSummary.details.pastDueBalance' | cxTranslate }}\n          </div>\n          <div>{{ headerDetails?.amountBalance?.pastDueBalance }}</div>\n        </div>\n      </div>\n\n      <!-- When there are no Ranges, only show a card containing the Past Due Balance -->\n      <ng-template #noDueRange>\n        <cx-card\n          [content]=\"\n            getPastDueBalanceCardContent(\n              headerDetails?.amountBalance?.pastDueBalance\n            ) | async\n          \"\n        >\n        </cx-card>\n      </ng-template>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AccountSummaryFacade }, { type: i2.LanguageService }, { type: i2.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,