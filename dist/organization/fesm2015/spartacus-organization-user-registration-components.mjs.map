{"version":3,"file":"spartacus-organization-user-registration-components.mjs","sources":["../../../feature-libs/organization/user-registration/components/form/user-registration-form.service.ts","../../../feature-libs/organization/user-registration/components/form/user-registration-form.component.ts","../../../feature-libs/organization/user-registration/components/form/user-registration-form.component.html","../../../feature-libs/organization/user-registration/components/form/user-registration-form.module.ts","../../../feature-libs/organization/user-registration/components/user-registration-components.module.ts","../../../feature-libs/organization/user-registration/components/form/index.ts","../../../feature-libs/organization/user-registration/components/public_api.ts","../../../feature-libs/organization/user-registration/components/spartacus-organization-user-registration-components.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AuthConfigService,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  Region,\n  RoutingService,\n  TranslationService,\n  UserAddressService,\n} from '@spartacus/core';\nimport {\n  OrganizationUserRegistration,\n  UserRegistrationFacade,\n} from '@spartacus/organization/user-registration/root';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { Title, UserRegisterFacade } from '@spartacus/user/profile/root';\nimport { Observable, of } from 'rxjs';\nimport { filter, switchMap, take, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserRegistrationFormService {\n  private _form: FormGroup = this.buildForm();\n\n  /*\n   * Initializes form structure for registration.\n   */\n  protected buildForm(): FormGroup {\n    return this.formBuilder.group({\n      titleCode: [null],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      companyName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      country: this.formBuilder.group({\n        isocode: [null],\n      }),\n      line1: [''],\n      line2: [''],\n      town: [''],\n      region: this.formBuilder.group({\n        isocode: [null],\n      }),\n      postalCode: [''],\n      phoneNumber: [''],\n      message: [''],\n    });\n  }\n\n  /*\n   * Gets form structure for registration.\n   */\n  public get form(): FormGroup {\n    return this._form;\n  }\n\n  /*\n   * Gets form control for country isocode.\n   */\n  public get countryControl(): AbstractControl | null {\n    return this.form.get('country.isocode');\n  }\n\n  /*\n   *  Gets form control for region isocode.\n   */\n  public get regionControl(): AbstractControl | null {\n    return this.form.get('region.isocode');\n  }\n\n  constructor(\n    protected userRegisterFacade: UserRegisterFacade,\n    protected userAddressService: UserAddressService,\n    protected organizationUserRegistrationFacade: UserRegistrationFacade,\n    protected translationService: TranslationService,\n    protected globalMessageService: GlobalMessageService,\n    protected authConfigService: AuthConfigService,\n    protected routingService: RoutingService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  /**\n   * Gets all title codes.\n   */\n  getTitles(): Observable<Title[]> {\n    return this.userRegisterFacade.getTitles();\n  }\n\n  /**\n   * Gets all countries list.\n   */\n  getCountries(): Observable<Country[]> {\n    return this.userAddressService.getDeliveryCountries().pipe(\n      tap((countries: Country[]) => {\n        if (Object.keys(countries).length === 0) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      })\n    );\n  }\n\n  /**\n   * Gets all regions list for specific selected country.\n   */\n  getRegions(): Observable<Region[]> {\n    const regions: Region[] = [];\n    return (\n      this.countryControl?.valueChanges.pipe(\n        filter((countryIsoCode) => !!countryIsoCode),\n        switchMap((countryIsoCode) => {\n          this.regionControl?.reset();\n          return this.userAddressService.getRegions(countryIsoCode);\n        })\n      ) ?? of(regions)\n    );\n  }\n\n  /**\n   * Takes form values and builds custom message content.\n   */\n  protected buildMessageContent(form: FormGroup): Observable<string> {\n    return this.translationService.translate(\n      'userRegistrationForm.messageToApproverTemplate',\n      {\n        phoneNumber: form.get('phoneNumber')?.value,\n        addressLine: form.get('line1')?.value,\n        secondAddressLine: form.get('line2')?.value,\n        city: form.get('city')?.value,\n        state: form.get('region')?.get('isocode')?.value,\n        postalCode: form.get('postalCode')?.value,\n        country: form.get('country')?.get('isocode')?.value,\n        companyName: form.get('companyName')?.value,\n        message: form.get('message')?.value,\n      }\n    );\n  }\n\n  /**\n   * Displays confirmation global message.\n   */\n  protected displayGlobalMessage(): void {\n    return this.globalMessageService.add(\n      { key: 'userRegistrationForm.successFormSubmitMessage' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n  protected redirectToLogin(): void {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n\n  /**\n   * Registers new organization user.\n   */\n  registerUser(form: FormGroup): Observable<OrganizationUserRegistration> {\n    return this.buildMessageContent(form).pipe(\n      take(1),\n      switchMap((message: string) =>\n        this.organizationUserRegistrationFacade.registerUser({\n          titleCode: form.get('titleCode')?.value,\n          firstName: form.get('firstName')?.value,\n          lastName: form.get('lastName')?.value,\n          email: form.get('email')?.value,\n          message: message,\n        })\n      ),\n      tap(() => {\n        this.displayGlobalMessage();\n        this.redirectToLogin();\n        form.reset();\n      })\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Country, Region } from '@spartacus/core';\nimport { Title } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { UserRegistrationFormService } from './user-registration-form.service';\n\n@Component({\n  selector: 'cx-user-registration-form',\n  templateUrl: './user-registration-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserRegistrationFormComponent implements OnDestroy {\n  titles$: Observable<Title[]> = this.userRegistrationFormService.getTitles();\n\n  countries$: Observable<Country[]> =\n    this.userRegistrationFormService.getCountries();\n\n  regions$: Observable<Region[]> =\n    this.userRegistrationFormService.getRegions();\n\n  registerForm: FormGroup = this.userRegistrationFormService.form;\n\n  isLoading$ = new BehaviorSubject(false);\n\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected userRegistrationFormService: UserRegistrationFormService\n  ) {}\n\n  submit(): void {\n    if (this.registerForm.valid) {\n      this.isLoading$.next(true);\n      this.subscriptions.add(\n        this.userRegistrationFormService\n          .registerUser(this.registerForm)\n          .subscribe({\n            complete: () => this.isLoading$.next(false),\n            error: () => this.isLoading$.next(false),\n          })\n      );\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<section *ngIf=\"!(isLoading$ | async); else loading\">\n  <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"submit()\">\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.titleCode.label' | cxTranslate\n      }}</span>\n      <ng-select\n        id=\"title-code-select\"\n        formControlName=\"titleCode\"\n        [searchable]=\"false\"\n        [clearable]=\"false\"\n        [items]=\"titles$ | async\"\n        bindLabel=\"name\"\n        bindValue=\"code\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.titleCode.placeholder' | cxTranslate\n        }}\"\n        [cxNgSelectA11y]=\"{\n          ariaLabel: 'userRegistrationForm.fields.titleCode.label' | cxTranslate\n        }\"\n      >\n      </ng-select>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'userRegistrationForm.fields.firstName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        name=\"firstname\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.firstName.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"firstName\"\n      />\n      <cx-form-errors\n        [control]=\"registerForm.get('firstName')\"\n      ></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'userRegistrationForm.fields.lastName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        name=\"lastname\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.lastName.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"lastName\"\n      />\n      <cx-form-errors [control]=\"registerForm.get('lastName')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'userRegistrationForm.fields.companyName.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"text\"\n        name=\"companyName\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.companyName.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"companyName\"\n      />\n      <cx-form-errors\n        [control]=\"registerForm.get('companyName')\"\n      ></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content required\">{{\n        'userRegistrationForm.fields.email.label' | cxTranslate\n      }}</span>\n      <input\n        required=\"true\"\n        class=\"form-control\"\n        type=\"email\"\n        name=\"email\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.email.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"email\"\n      />\n      <cx-form-errors [control]=\"registerForm.get('email')\"></cx-form-errors>\n    </label>\n\n    <ng-container\n      *ngIf=\"countries$ | async as countries\"\n      formGroupName=\"country\"\n    >\n      <label *ngIf=\"countries.length !== 0\">\n        <span class=\"label-content\">{{\n          'userRegistrationForm.fields.country.label' | cxTranslate\n        }}</span>\n        <ng-select\n          class=\"country-select\"\n          id=\"country-select\"\n          formControlName=\"isocode\"\n          [searchable]=\"true\"\n          [clearable]=\"false\"\n          [items]=\"countries\"\n          bindLabel=\"name\"\n          bindValue=\"isocode\"\n          placeholder=\"{{\n            'userRegistrationForm.fields.country.placeholder' | cxTranslate\n          }}\"\n          [cxNgSelectA11y]=\"{\n            ariaLabel: 'userRegistrationForm.fields.country.label' | cxTranslate\n          }\"\n        >\n        </ng-select>\n        <cx-form-errors\n          [control]=\"registerForm.get('country.isocode')\"\n        ></cx-form-errors>\n      </label>\n    </ng-container>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.addressLine.label' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.addressLine.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"line1\"\n      />\n      <cx-form-errors [control]=\"registerForm.get('line1')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.secondAddressLine.label' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.secondAddressLine.placeholder'\n            | cxTranslate\n        }}\"\n        formControlName=\"line2\"\n      />\n      <cx-form-errors [control]=\"registerForm.get('line2')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.city.label' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.city.label' | cxTranslate\n        }}\"\n        formControlName=\"town\"\n      />\n      <cx-form-errors [control]=\"registerForm.get('town')\"></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.postalCode.label' | cxTranslate\n      }}</span>\n      <input\n        type=\"text\"\n        class=\"form-control\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.postalCode.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"postalCode\"\n      />\n      <cx-form-errors\n        [control]=\"registerForm.get('postalCode')\"\n      ></cx-form-errors>\n    </label>\n\n    <ng-container *ngIf=\"regions$ | async as regions\" formGroupName=\"region\">\n      <label *ngIf=\"regions.length !== 0\">\n        <span class=\"label-content\">{{\n          'userRegistrationForm.fields.state.label' | cxTranslate\n        }}</span>\n        <ng-select\n          class=\"region-select\"\n          formControlName=\"isocode\"\n          [searchable]=\"true\"\n          [clearable]=\"false\"\n          [items]=\"regions\"\n          bindLabel=\"name\"\n          bindValue=\"isocode\"\n          placeholder=\"{{\n            'userRegistrationForm.fields.state.placeholder' | cxTranslate\n          }}\"\n          id=\"region-select\"\n          [cxNgSelectA11y]=\"{\n            ariaLabel: 'userRegistrationForm.fields.state.label' | cxTranslate\n          }\"\n        >\n        </ng-select>\n        <cx-form-errors\n          [control]=\"registerForm.get('region.isocode')\"\n        ></cx-form-errors>\n      </label>\n    </ng-container>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.phoneNumber.label' | cxTranslate\n      }}</span>\n      <input\n        type=\"tel\"\n        class=\"form-control\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.phoneNumber.placeholder' | cxTranslate\n        }}\"\n        formControlName=\"phoneNumber\"\n      />\n      <cx-form-errors\n        [control]=\"registerForm.get('phoneNumber')\"\n      ></cx-form-errors>\n    </label>\n\n    <label>\n      <span class=\"label-content\">{{\n        'userRegistrationForm.fields.message.label' | cxTranslate\n      }}</span>\n      <textarea\n        class=\"form-control\"\n        formControlName=\"message\"\n        placeholder=\"{{\n          'userRegistrationForm.fields.message.placeholder' | cxTranslate\n        }}\"\n        rows=\"5\"\n      ></textarea>\n      <cx-form-errors [control]=\"registerForm.get('message')\"></cx-form-errors>\n    </label>\n\n    <button type=\"submit\" class=\"btn btn-block btn-primary\">\n      {{ 'userRegistrationForm.formSubmitButtonLabel' | cxTranslate }}\n    </button>\n    <a\n      class=\"cx-login-link btn-link\"\n      [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n      >{{ 'userRegistrationForm.goToLoginButtonLabel' | cxTranslate }}</a\n    >\n  </form>\n</section>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  ConfigModule,\n  CmsConfig,\n  I18nModule,\n  UrlModule,\n  NotAuthGuard,\n} from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  SpinnerModule,\n  NgSelectA11yModule,\n} from '@spartacus/storefront';\nimport { UserRegistrationFormComponent } from './user-registration-form.component';\nimport { UserRegistrationFormService } from './user-registration-form.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n    NgSelectModule,\n    NgSelectA11yModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        OrganizationUserRegistrationComponent: {\n          component: UserRegistrationFormComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [UserRegistrationFormComponent],\n  exports: [UserRegistrationFormComponent],\n  providers: [UserRegistrationFormService],\n})\nexport class UserRegistrationFormModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { UserRegistrationFormModule } from './form/user-registration-form.module';\n\n@NgModule({\n  imports: [RouterModule, UserRegistrationFormModule],\n})\nexport class UserRegistrationComponentsModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './user-registration-form.component';\nexport * from './user-registration-form.service';\nexport * from './user-registration-form.module';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './user-registration-components.module';\nexport * from './form/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i4","i1.UserRegistrationFormService","i2","i3","i7"],"mappings":"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"}