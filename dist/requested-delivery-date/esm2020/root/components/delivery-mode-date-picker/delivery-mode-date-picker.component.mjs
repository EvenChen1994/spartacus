import { Component, Optional } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { CheckoutSupportedDeliveryModesQueryReloadEvent } from '@spartacus/checkout/base/root';
import { CxDatePipe, EventService, GlobalMessageService, GlobalMessageType, TranslationService, } from '@spartacus/core';
import { OutletContextData } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { RequestedDeliveryDateFacade } from '../../facade/requested-delivery-date.facade';
import { DateValidationService } from '../shared/date-validation.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../facade/requested-delivery-date.facade";
import * as i3 from "../shared/date-validation.service";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
export class DeliveryModeDatePickerComponent {
    constructor(datePipe, requestedDelDateFacade, dateValidationService, eventService, translation, globalMessageService, deliveryOutlet) {
        this.datePipe = datePipe;
        this.requestedDelDateFacade = requestedDelDateFacade;
        this.dateValidationService = dateValidationService;
        this.eventService = eventService;
        this.translation = translation;
        this.globalMessageService = globalMessageService;
        this.deliveryOutlet = deliveryOutlet;
        this.cartEntry = {};
        this.subscription = new Subscription();
        this.form = new FormGroup({
            requestDeliveryDate: new FormControl(),
        });
        this.isDatePickerReadOnly = true;
    }
    ngOnInit() {
        if (this.deliveryOutlet?.context$) {
            this.subscription.add(this.deliveryOutlet.context$.subscribe((context) => {
                this.cartEntry = context?.item;
                this.isDatePickerReadOnly = context?.readonly || false;
            }));
        }
        if (this.isEarliestRetrievalDatePresent()) {
            this.earliestRetrievalAt = this.cartEntry.earliestRetrievalAt;
        }
        if (this.isRequestedDeliveryDatePresent()) {
            this.requestedRetrievalAt = this.cartEntry.requestedRetrievalAt;
        }
        else {
            //set the value of requestedRetrievalAt as earliestRetrievalAt and update occ.
            this.requestedRetrievalAt = this.earliestRetrievalAt;
            this.form.patchValue({
                requestDeliveryDate: this.requestedRetrievalAt,
            });
            this.setRequestedDeliveryDate();
        }
        this.form.patchValue({
            requestDeliveryDate: this.requestedRetrievalAt,
        });
    }
    isEarliestRetrievalDatePresent() {
        return this.dateValidationService.isDateStringValid(this.cartEntry?.earliestRetrievalAt);
    }
    isRequestedDeliveryDatePresent() {
        return this.dateValidationService.isDateStringValid(this.cartEntry?.requestedRetrievalAt);
    }
    getRequestedDeliveryDateCardContent(isoDate) {
        return this.translation
            .translate('requestedDeliveryDate.readOnlyTextLabel')
            .pipe(filter(() => Boolean(isoDate)), map((textTitle) => {
            return {
                text: [textTitle, isoDate],
            };
        }));
    }
    setRequestedDeliveryDate() {
        const userId = this.cartEntry?.user?.uid || '';
        const cartId = this.cartEntry?.code || '';
        const requestedDate = this.form?.get('requestDeliveryDate')?.value || '';
        if (userId.length === 0 ||
            cartId.length === 0 ||
            requestedDate.length === 0 ||
            !this.dateValidationService.isDateStringValid(requestedDate) ||
            !this.dateValidationService.isDateGreaterOrEqual(requestedDate, this.earliestRetrievalAt || '')) {
            return;
        }
        this.subscription.add(this.requestedDelDateFacade
            .setRequestedDeliveryDate(userId, cartId, requestedDate)
            .subscribe({
            next: () => {
                this.eventService.dispatch({}, CheckoutSupportedDeliveryModesQueryReloadEvent);
                this.globalMessageService.add({ key: 'requestedDeliveryDate.successMessage' }, GlobalMessageType.MSG_TYPE_INFO);
            },
            error: (error) => {
                if (error && this.getErrors(error)?.length) {
                    this.globalMessageService.add({ key: 'requestedDeliveryDate.errorMessage' }, GlobalMessageType.MSG_TYPE_ERROR);
                }
            },
        }));
    }
    getErrors(response) {
        return (response.error?.errors).filter((error) => error?.type === 'UnknownResourceError');
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
DeliveryModeDatePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DeliveryModeDatePickerComponent, deps: [{ token: i1.CxDatePipe }, { token: i2.RequestedDeliveryDateFacade }, { token: i3.DateValidationService }, { token: i1.EventService }, { token: i1.TranslationService }, { token: i1.GlobalMessageService }, { token: i4.OutletContextData, optional: true }], target: i0.ɵɵFactoryTarget.Component });
DeliveryModeDatePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: DeliveryModeDatePickerComponent, selector: "cx-request-delivery-date", providers: [CxDatePipe], ngImport: i0, template: "<ng-container *ngIf=\"isEarliestRetrievalDatePresent()\">\n  <ng-container *ngIf=\"isDatePickerReadOnly; else datePickerEnabled\">\n    <cx-card\n      [content]=\"\n        getRequestedDeliveryDateCardContent(requestedRetrievalAt | cxDate)\n          | async\n      \"\n    ></cx-card>\n  </ng-container>\n  <ng-template #datePickerEnabled>\n    <div class=\"form-check\">\n      <form [formGroup]=\"form\">\n        <label class=\"row\">\n          <div class=\"pl-4 col-8\">\n            {{ 'requestedDeliveryDate.datePickerLabel' | cxTranslate }}\n          </div>\n          <div class=\"col-4\">\n            <cx-date-picker\n              [control]=\"$any(form.get('requestDeliveryDate'))\"\n              [min]=\"earliestRetrievalAt\"\n              [required]=\"true\"\n              (update)=\"setRequestedDeliveryDate()\"\n            >\n            </cx-date-picker>\n          </div>\n        </label>\n      </form>\n    </div>\n  </ng-template>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.DatePickerComponent, selector: "cx-date-picker", inputs: ["control", "min", "max", "required"], outputs: ["update"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: i4.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit", "index"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i1.CxDatePipe, name: "cxDate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DeliveryModeDatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-request-delivery-date', providers: [CxDatePipe], template: "<ng-container *ngIf=\"isEarliestRetrievalDatePresent()\">\n  <ng-container *ngIf=\"isDatePickerReadOnly; else datePickerEnabled\">\n    <cx-card\n      [content]=\"\n        getRequestedDeliveryDateCardContent(requestedRetrievalAt | cxDate)\n          | async\n      \"\n    ></cx-card>\n  </ng-container>\n  <ng-template #datePickerEnabled>\n    <div class=\"form-check\">\n      <form [formGroup]=\"form\">\n        <label class=\"row\">\n          <div class=\"pl-4 col-8\">\n            {{ 'requestedDeliveryDate.datePickerLabel' | cxTranslate }}\n          </div>\n          <div class=\"col-4\">\n            <cx-date-picker\n              [control]=\"$any(form.get('requestDeliveryDate'))\"\n              [min]=\"earliestRetrievalAt\"\n              [required]=\"true\"\n              (update)=\"setRequestedDeliveryDate()\"\n            >\n            </cx-date-picker>\n          </div>\n        </label>\n      </form>\n    </div>\n  </ng-template>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CxDatePipe }, { type: i2.RequestedDeliveryDateFacade }, { type: i3.DateValidationService }, { type: i1.EventService }, { type: i1.TranslationService }, { type: i1.GlobalMessageService }, { type: i4.OutletContextData, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,