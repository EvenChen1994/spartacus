/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpContext } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { CART_NORMALIZER } from '@spartacus/cart/base/root';
import { CHECKOUT_PAYMENT_TYPE_NORMALIZER, } from '@spartacus/checkout/b2b/core';
import { LoggerService, OCC_HTTP_TOKEN, backOff, isJaloError, normalizeHttpError, } from '@spartacus/core';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccCheckoutPaymentTypeAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.logger = inject(LoggerService);
    }
    getPaymentTypes() {
        const context = new HttpContext().set(OCC_HTTP_TOKEN, {
            sendUserIdAsHeader: true,
        });
        return this.http
            .get(this.getPaymentTypesEndpoint(), { context })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({ shouldRetry: isJaloError }), map((paymentTypeList) => paymentTypeList.paymentTypes ?? []), this.converter.pipeableMany(CHECKOUT_PAYMENT_TYPE_NORMALIZER));
    }
    getPaymentTypesEndpoint() {
        return this.occEndpoints.buildUrl('paymentTypes');
    }
    setPaymentType(userId, cartId, paymentType, purchaseOrderNumber) {
        return this.http
            .put(this.getSetCartPaymentTypeEndpoint(userId, cartId, paymentType, purchaseOrderNumber), {})
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({ shouldRetry: isJaloError }), this.converter.pipeable(CART_NORMALIZER));
    }
    getSetCartPaymentTypeEndpoint(userId, cartId, paymentType, purchaseOrderNumber) {
        const queryParams = { paymentType, purchaseOrderNumber };
        return this.occEndpoints.buildUrl('setCartPaymentType', {
            urlParams: { userId, cartId },
            queryParams,
        });
    }
}
OccCheckoutPaymentTypeAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentTypeAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCheckoutPaymentTypeAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentTypeAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentTypeAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWNoZWNrb3V0LXBheW1lbnQtdHlwZS5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NoZWNrb3V0L2IyYi9vY2MvYWRhcHRlcnMvb2NjLWNoZWNrb3V0LXBheW1lbnQtdHlwZS5hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQWMsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBcUIsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRSxPQUFPLEVBQ0wsZ0NBQWdDLEdBRWpDLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUVMLGFBQWEsRUFDYixjQUFjLEVBR2QsT0FBTyxFQUNQLFdBQVcsRUFDWCxrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQWMsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFHakQsTUFBTSxPQUFPLDZCQUE2QjtJQUt4QyxZQUNZLElBQWdCLEVBQ2hCLFlBQWlDLEVBQ2pDLFNBQTJCO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBTDdCLFdBQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFNdEMsQ0FBQztJQUVKLGVBQWU7UUFDYixNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUU7WUFDcEQsa0JBQWtCLEVBQUUsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFzQixJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDO2FBQ3JFLElBQUksQ0FDSCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNuRCxFQUNELE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxFQUNyQyxHQUFHLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLEVBQzVELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLGdDQUFnQyxDQUFDLENBQzlELENBQUM7SUFDTixDQUFDO0lBRVMsdUJBQXVCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELGNBQWMsQ0FDWixNQUFjLEVBQ2QsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLG1CQUE0QjtRQUU1QixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUNGLElBQUksQ0FBQyw2QkFBNkIsQ0FDaEMsTUFBTSxFQUNOLE1BQU0sRUFDTixXQUFXLEVBQ1gsbUJBQW1CLENBQ3BCLEVBQ0QsRUFBRSxDQUNIO2FBQ0EsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ25ELEVBQ0QsT0FBTyxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQ3JDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUN6QyxDQUFDO0lBQ04sQ0FBQztJQUVTLDZCQUE2QixDQUNyQyxNQUFjLEVBQ2QsTUFBYyxFQUNkLFdBQW1CLEVBQ25CLG1CQUE0QjtRQUU1QixNQUFNLFdBQVcsR0FBRyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxDQUFDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEVBQUU7WUFDdEQsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtZQUM3QixXQUFXO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7MEhBcEVVLDZCQUE2Qjs4SEFBN0IsNkJBQTZCOzJGQUE3Qiw2QkFBNkI7a0JBRHpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwQ29udGV4dCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ0FSVF9OT1JNQUxJWkVSLCBDYXJ0LCBQYXltZW50VHlwZSB9IGZyb20gJ0BzcGFydGFjdXMvY2FydC9iYXNlL3Jvb3QnO1xuaW1wb3J0IHtcbiAgQ0hFQ0tPVVRfUEFZTUVOVF9UWVBFX05PUk1BTElaRVIsXG4gIENoZWNrb3V0UGF5bWVudFR5cGVBZGFwdGVyLFxufSBmcm9tICdAc3BhcnRhY3VzL2NoZWNrb3V0L2IyYi9jb3JlJztcbmltcG9ydCB7XG4gIENvbnZlcnRlclNlcnZpY2UsXG4gIExvZ2dlclNlcnZpY2UsXG4gIE9DQ19IVFRQX1RPS0VOLFxuICBPY2MsXG4gIE9jY0VuZHBvaW50c1NlcnZpY2UsXG4gIGJhY2tPZmYsXG4gIGlzSmFsb0Vycm9yLFxuICBub3JtYWxpemVIdHRwRXJyb3IsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPY2NDaGVja291dFBheW1lbnRUeXBlQWRhcHRlclxuICBpbXBsZW1lbnRzIENoZWNrb3V0UGF5bWVudFR5cGVBZGFwdGVyXG57XG4gIHByb3RlY3RlZCBsb2dnZXIgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJvdGVjdGVkIG9jY0VuZHBvaW50czogT2NjRW5kcG9pbnRzU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlXG4gICkge31cblxuICBnZXRQYXltZW50VHlwZXMoKTogT2JzZXJ2YWJsZTxQYXltZW50VHlwZVtdPiB7XG4gICAgY29uc3QgY29udGV4dCA9IG5ldyBIdHRwQ29udGV4dCgpLnNldChPQ0NfSFRUUF9UT0tFTiwge1xuICAgICAgc2VuZFVzZXJJZEFzSGVhZGVyOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxPY2MuUGF5bWVudFR5cGVMaXN0Pih0aGlzLmdldFBheW1lbnRUeXBlc0VuZHBvaW50KCksIHsgY29udGV4dCB9KVxuICAgICAgLnBpcGUoXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxuICAgICAgICAgIHRocm93RXJyb3Iobm9ybWFsaXplSHR0cEVycm9yKGVycm9yLCB0aGlzLmxvZ2dlcikpXG4gICAgICAgICksXG4gICAgICAgIGJhY2tPZmYoeyBzaG91bGRSZXRyeTogaXNKYWxvRXJyb3IgfSksXG4gICAgICAgIG1hcCgocGF5bWVudFR5cGVMaXN0KSA9PiBwYXltZW50VHlwZUxpc3QucGF5bWVudFR5cGVzID8/IFtdKSxcbiAgICAgICAgdGhpcy5jb252ZXJ0ZXIucGlwZWFibGVNYW55KENIRUNLT1VUX1BBWU1FTlRfVFlQRV9OT1JNQUxJWkVSKVxuICAgICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRQYXltZW50VHlwZXNFbmRwb2ludCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm9jY0VuZHBvaW50cy5idWlsZFVybCgncGF5bWVudFR5cGVzJyk7XG4gIH1cblxuICBzZXRQYXltZW50VHlwZShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBjYXJ0SWQ6IHN0cmluZyxcbiAgICBwYXltZW50VHlwZTogc3RyaW5nLFxuICAgIHB1cmNoYXNlT3JkZXJOdW1iZXI/OiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxDYXJ0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dChcbiAgICAgICAgdGhpcy5nZXRTZXRDYXJ0UGF5bWVudFR5cGVFbmRwb2ludChcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgY2FydElkLFxuICAgICAgICAgIHBheW1lbnRUeXBlLFxuICAgICAgICAgIHB1cmNoYXNlT3JkZXJOdW1iZXJcbiAgICAgICAgKSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICB0aHJvd0Vycm9yKG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciwgdGhpcy5sb2dnZXIpKVxuICAgICAgICApLFxuICAgICAgICBiYWNrT2ZmKHsgc2hvdWxkUmV0cnk6IGlzSmFsb0Vycm9yIH0pLFxuICAgICAgICB0aGlzLmNvbnZlcnRlci5waXBlYWJsZShDQVJUX05PUk1BTElaRVIpXG4gICAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFNldENhcnRQYXltZW50VHlwZUVuZHBvaW50KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIGNhcnRJZDogc3RyaW5nLFxuICAgIHBheW1lbnRUeXBlOiBzdHJpbmcsXG4gICAgcHVyY2hhc2VPcmRlck51bWJlcj86IHN0cmluZ1xuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0geyBwYXltZW50VHlwZSwgcHVyY2hhc2VPcmRlck51bWJlciB9O1xuICAgIHJldHVybiB0aGlzLm9jY0VuZHBvaW50cy5idWlsZFVybCgnc2V0Q2FydFBheW1lbnRUeXBlJywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCwgY2FydElkIH0sXG4gICAgICBxdWVyeVBhcmFtcyxcbiAgICB9KTtcbiAgfVxufVxuIl19