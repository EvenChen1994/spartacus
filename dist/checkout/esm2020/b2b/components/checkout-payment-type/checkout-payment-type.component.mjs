/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, ViewChild, } from '@angular/core';
import { B2BPaymentTypeEnum, } from '@spartacus/checkout/b2b/root';
import { GlobalMessageType, getLastValueSync, isNotUndefined, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/checkout/b2b/root";
import * as i2 from "@spartacus/checkout/base/components";
import * as i3 from "@angular/router";
import * as i4 from "@spartacus/core";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/storefront";
export class CheckoutPaymentTypeComponent {
    constructor(checkoutPaymentTypeFacade, checkoutStepService, activatedRoute, globalMessageService) {
        this.checkoutPaymentTypeFacade = checkoutPaymentTypeFacade;
        this.checkoutStepService = checkoutStepService;
        this.activatedRoute = activatedRoute;
        this.globalMessageService = globalMessageService;
        this.busy$ = new BehaviorSubject(false);
        this.paymentTypesError = false;
        this.isUpdating$ = combineLatest([
            this.busy$,
            this.checkoutPaymentTypeFacade
                .getSelectedPaymentTypeState()
                .pipe(map((state) => state.loading)),
        ]).pipe(map(([busy, loading]) => busy || loading), distinctUntilChanged());
        this.paymentTypes$ = this.checkoutPaymentTypeFacade
            .getPaymentTypes()
            .pipe(tap(() => (this.paymentTypesError = false)), catchError((error) => {
            if (error.details?.[0]?.type === "ClassMismatchError" /* OccHttpErrorType.CLASS_MISMATCH_ERROR */ &&
                this.globalMessageService) {
                this.globalMessageService.add({ key: 'httpHandlers.forbidden' }, GlobalMessageType.MSG_TYPE_ERROR);
                this.paymentTypesError = true;
            }
            return of([]);
        }));
        this.typeSelected$ = combineLatest([
            this.checkoutPaymentTypeFacade.getSelectedPaymentTypeState().pipe(filter((state) => !state.loading), map((state) => state.data)),
            this.paymentTypes$,
        ]).pipe(map(([selectedPaymentType, availablePaymentTypes]) => {
            if (selectedPaymentType &&
                availablePaymentTypes.find((availablePaymentType) => {
                    return availablePaymentType.code === selectedPaymentType.code;
                })) {
                return selectedPaymentType;
            }
            if (availablePaymentTypes.length) {
                this.busy$.next(true);
                this.checkoutPaymentTypeFacade
                    .setPaymentType(availablePaymentTypes[0].code, this.poNumberInputElement?.nativeElement?.value)
                    .subscribe({
                    complete: () => this.onSuccess(),
                    error: () => this.onError(),
                });
                return availablePaymentTypes[0];
            }
            return undefined;
        }), filter(isNotUndefined), distinctUntilChanged(), tap((selected) => {
            this.typeSelected = selected?.code;
            this.checkoutStepService.resetSteps();
            this.checkoutStepService.disableEnableStep("paymentDetails" /* CheckoutStepType.PAYMENT_DETAILS */, selected?.code === B2BPaymentTypeEnum.ACCOUNT_PAYMENT);
        }));
        this.cartPoNumber$ = this.checkoutPaymentTypeFacade
            .getPurchaseOrderNumberState()
            .pipe(filter((state) => !state.loading), map((state) => state.data), filter(isNotUndefined), distinctUntilChanged());
    }
    changeType(code) {
        this.busy$.next(true);
        this.typeSelected = code;
        this.checkoutPaymentTypeFacade
            .setPaymentType(code, this.poNumberInputElement.nativeElement.value)
            .subscribe({
            complete: () => this.onSuccess(),
            error: () => this.onError(),
        });
    }
    next() {
        if (!this.typeSelected) {
            return;
        }
        const poNumberInput = this.poNumberInputElement.nativeElement.value;
        // if the PO number didn't change
        if (poNumberInput === getLastValueSync(this.cartPoNumber$)) {
            this.checkoutStepService.next(this.activatedRoute);
            return;
        }
        this.busy$.next(true);
        this.checkoutPaymentTypeFacade
            .setPaymentType(this.typeSelected, poNumberInput)
            .subscribe({
            // we don't call onSuccess here, because it can cause a spinner flickering
            complete: () => this.checkoutStepService.next(this.activatedRoute),
            error: () => this.onError(),
        });
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
    onSuccess() {
        this.busy$.next(false);
    }
    onError() {
        this.busy$.next(false);
    }
}
CheckoutPaymentTypeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CheckoutPaymentTypeComponent, deps: [{ token: i1.CheckoutPaymentTypeFacade }, { token: i2.CheckoutStepService }, { token: i3.ActivatedRoute }, { token: i4.GlobalMessageService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CheckoutPaymentTypeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: CheckoutPaymentTypeComponent, selector: "cx-payment-type", viewQueries: [{ propertyName: "poNumberInputElement", first: true, predicate: ["poNumber"], descendants: true }], ngImport: i0, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'checkoutB2B.methodOfPayment.paymentType' | cxTranslate }}\n</h2>\n\n<ng-container *ngIf=\"paymentTypes$ | async as paymentTypes\">\n  <ng-container\n    *ngIf=\"\n      !!paymentTypes.length &&\n        (typeSelected$ | async) &&\n        !(isUpdating$ | async);\n      else loading\n    \"\n  >\n    <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n    <div class=\"row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <label>\n          <span class=\"label-content\">{{\n            'checkoutB2B.poNumber' | cxTranslate\n          }}</span>\n          <input\n            #poNumber\n            class=\"form-control\"\n            formControlName=\"poNumber\"\n            type=\"text\"\n            placeholder=\"{{ 'checkoutB2B.placeholder' | cxTranslate }}\"\n            value=\"{{ cartPoNumber$ | async }}\"\n          />\n        </label>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <label class=\"cx-payment-type-container\">\n          <span class=\"label-content\">{{\n            'paymentTypes.title' | cxTranslate\n          }}</span>\n          <div class=\"form-check\" *ngFor=\"let type of paymentTypes\">\n            <input\n              id=\"paymentType-{{ type.code }}\"\n              class=\"form-check-input\"\n              role=\"radio\"\n              type=\"radio\"\n              aria-checked=\"true\"\n              (change)=\"changeType(type.code)\"\n              [value]=\"type.code\"\n              [checked]=\"type.code === typeSelected\"\n              formControlName=\"paymentType\"\n            />\n            <label\n              class=\"cx-payment-type-label form-check-label form-radio-label\"\n              for=\"paymentType-{{ type.code }}\"\n            >\n              <div class=\"cx-payment-type\">\n                {{ 'paymentTypes.paymentType_' + type?.code | cxTranslate }}\n              </div>\n            </label>\n          </div>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ 'checkout.backToCart' | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\" *ngIf=\"!paymentTypesError\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.SpinnerComponent, selector: "cx-spinner" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CheckoutPaymentTypeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-payment-type', changeDetection: ChangeDetectionStrategy.OnPush, template: "<h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n  {{ 'checkoutB2B.methodOfPayment.paymentType' | cxTranslate }}\n</h2>\n\n<ng-container *ngIf=\"paymentTypes$ | async as paymentTypes\">\n  <ng-container\n    *ngIf=\"\n      !!paymentTypes.length &&\n        (typeSelected$ | async) &&\n        !(isUpdating$ | async);\n      else loading\n    \"\n  >\n    <div role=\"status\" [attr.aria-label]=\"'common.loaded' | cxTranslate\"></div>\n    <div class=\"row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <label>\n          <span class=\"label-content\">{{\n            'checkoutB2B.poNumber' | cxTranslate\n          }}</span>\n          <input\n            #poNumber\n            class=\"form-control\"\n            formControlName=\"poNumber\"\n            type=\"text\"\n            placeholder=\"{{ 'checkoutB2B.placeholder' | cxTranslate }}\"\n            value=\"{{ cartPoNumber$ | async }}\"\n          />\n        </label>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <label class=\"cx-payment-type-container\">\n          <span class=\"label-content\">{{\n            'paymentTypes.title' | cxTranslate\n          }}</span>\n          <div class=\"form-check\" *ngFor=\"let type of paymentTypes\">\n            <input\n              id=\"paymentType-{{ type.code }}\"\n              class=\"form-check-input\"\n              role=\"radio\"\n              type=\"radio\"\n              aria-checked=\"true\"\n              (change)=\"changeType(type.code)\"\n              [value]=\"type.code\"\n              [checked]=\"type.code === typeSelected\"\n              formControlName=\"paymentType\"\n            />\n            <label\n              class=\"cx-payment-type-label form-check-label form-radio-label\"\n              for=\"paymentType-{{ type.code }}\"\n            >\n              <div class=\"cx-payment-type\">\n                {{ 'paymentTypes.paymentType_' + type?.code | cxTranslate }}\n              </div>\n            </label>\n          </div>\n        </label>\n      </div>\n    </div>\n\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-secondary\" (click)=\"back()\">\n          {{ 'checkout.backToCart' | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\" *ngIf=\"!paymentTypesError\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CheckoutPaymentTypeFacade }, { type: i2.CheckoutStepService }, { type: i3.ActivatedRoute }, { type: i4.GlobalMessageService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { poNumberInputElement: [{
                type: ViewChild,
                args: ['poNumber', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,