/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { PAYMENT_CARD_TYPE_NORMALIZER, PAYMENT_DETAILS_SERIALIZER, } from '@spartacus/checkout/base/core';
import { HttpParamsURIEncoder, LoggerService, PAYMENT_DETAILS_NORMALIZER, backOff, isJaloError, normalizeHttpError, } from '@spartacus/core';
import { throwError } from 'rxjs';
import { catchError, map, mergeMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccCheckoutPaymentAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.logger = inject(LoggerService);
        if (typeof DOMParser !== 'undefined') {
            this.domparser = new DOMParser();
        }
    }
    createPaymentDetails(userId, cartId, paymentDetails) {
        paymentDetails = this.converter.convert(paymentDetails, PAYMENT_DETAILS_SERIALIZER);
        return this.getProviderSubInfo(userId, cartId).pipe(map((data) => {
            const labelsMap = this.convertToMap(data.mappingLabels.entry);
            return {
                url: data.postUrl,
                parameters: this.getParamsForPaymentProvider(paymentDetails, data.parameters.entry, labelsMap),
                mappingLabels: labelsMap,
            };
        }), mergeMap((sub) => 
        // create a subscription directly with payment provider
        this.createSubWithProvider(sub.url, sub.parameters).pipe(map((response) => this.extractPaymentDetailsFromHtml(response)), mergeMap((fromPaymentProvider) => {
            fromPaymentProvider['defaultPayment'] =
                paymentDetails.defaultPayment ?? false;
            fromPaymentProvider['savePaymentInfo'] = true;
            return this.createDetailsWithParameters(userId, cartId, fromPaymentProvider).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
                shouldRetry: isJaloError,
            }), this.converter.pipeable(PAYMENT_DETAILS_NORMALIZER));
        }))));
    }
    setPaymentDetails(userId, cartId, paymentDetailsId) {
        return this.http
            .put(this.getSetPaymentDetailsEndpoint(userId, cartId, paymentDetailsId), {})
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
            shouldRetry: isJaloError,
        }));
    }
    getSetPaymentDetailsEndpoint(userId, cartId, paymentDetailsId) {
        return this.occEndpoints.buildUrl('setCartPaymentDetails', {
            urlParams: { userId, cartId },
            queryParams: { paymentDetailsId },
        });
    }
    getPaymentCardTypes() {
        return this.http
            .get(this.getPaymentCardTypesEndpoint())
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
            shouldRetry: isJaloError,
        }), map((cardTypeList) => cardTypeList.cardTypes ?? []), this.converter.pipeableMany(PAYMENT_CARD_TYPE_NORMALIZER));
    }
    getPaymentCardTypesEndpoint() {
        return this.occEndpoints.buildUrl('cardTypes');
    }
    getProviderSubInfo(userId, cartId) {
        return this.http
            .get(this.getPaymentProviderSubInfoEndpoint(userId, cartId))
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
            shouldRetry: isJaloError,
        }));
    }
    getPaymentProviderSubInfoEndpoint(userId, cartId) {
        return this.occEndpoints.buildUrl('paymentProviderSubInfo', {
            urlParams: {
                userId,
                cartId,
            },
        });
    }
    createSubWithProvider(postUrl, parameters) {
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
            Accept: 'text/html',
        });
        let httpParams = new HttpParams({ encoder: new HttpParamsURIEncoder() });
        Object.keys(parameters).forEach((key) => {
            httpParams = httpParams.append(key, parameters[key]);
        });
        return this.http
            .post(postUrl, httpParams, {
            headers,
            responseType: 'text',
        })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
            shouldRetry: isJaloError,
        }));
    }
    createDetailsWithParameters(userId, cartId, parameters) {
        let httpParams = new HttpParams({ encoder: new HttpParamsURIEncoder() });
        Object.keys(parameters).forEach((key) => {
            httpParams = httpParams.append(key, parameters[key]);
        });
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        return this.http
            .post(this.getCreatePaymentDetailsEndpoint(userId, cartId), httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), backOff({
            shouldRetry: isJaloError,
        }));
    }
    getCreatePaymentDetailsEndpoint(userId, cartId) {
        return this.occEndpoints.buildUrl('createPaymentDetails', {
            urlParams: {
                userId,
                cartId,
            },
        });
    }
    getParamsForPaymentProvider(paymentDetails, parameters, mappingLabels) {
        const params = this.convertToMap(parameters);
        params[mappingLabels['hybris_account_holder_name']] =
            paymentDetails.accountHolderName;
        params[mappingLabels['hybris_card_type']] = paymentDetails.cardType?.code;
        params[mappingLabels['hybris_card_number']] = paymentDetails.cardNumber;
        if (mappingLabels['hybris_combined_expiry_date'] === 'true') {
            params[mappingLabels['hybris_card_expiry_date']] =
                paymentDetails.expiryMonth +
                    mappingLabels['hybris_separator_expiry_date'] +
                    paymentDetails.expiryYear;
        }
        else {
            params[mappingLabels['hybris_card_expiration_month']] =
                paymentDetails.expiryMonth;
            params[mappingLabels['hybris_card_expiration_year']] =
                paymentDetails.expiryYear;
        }
        params[mappingLabels['hybris_card_cvn']] = paymentDetails.cvn;
        // billing address
        params[mappingLabels['hybris_billTo_country']] =
            paymentDetails.billingAddress?.country?.isocode;
        params[mappingLabels['hybris_billTo_firstname']] =
            paymentDetails.billingAddress?.firstName;
        params[mappingLabels['hybris_billTo_lastname']] =
            paymentDetails.billingAddress?.lastName;
        params[mappingLabels['hybris_billTo_street1']] =
            paymentDetails.billingAddress?.line1 +
                ' ' +
                paymentDetails.billingAddress?.line2;
        params[mappingLabels['hybris_billTo_city']] =
            paymentDetails.billingAddress?.town;
        if (paymentDetails.billingAddress?.region) {
            params[mappingLabels['hybris_billTo_region']] =
                paymentDetails.billingAddress.region.isocodeShort;
        }
        else {
            params[mappingLabels['hybris_billTo_region']] = '';
        }
        params[mappingLabels['hybris_billTo_postalcode']] =
            paymentDetails.billingAddress?.postalCode;
        return params;
    }
    extractPaymentDetailsFromHtml(html) {
        const domdoc = this.domparser.parseFromString(html, 'text/xml');
        const responseForm = domdoc.getElementsByTagName('form')[0];
        const inputs = responseForm.getElementsByTagName('input');
        const values = {};
        for (let i = 0; inputs[i]; i++) {
            const input = inputs[i];
            const name = input.getAttribute('name');
            const value = input.getAttribute('value');
            if (name && name !== '{}' && value && value !== '') {
                values[name] = value;
            }
        }
        return values;
    }
    convertToMap(paramList) {
        return paramList.reduce(function (result, item) {
            const key = item.key;
            result[key] = item.value;
            return result;
        }, {});
    }
}
OccCheckoutPaymentAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCheckoutPaymentAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCheckoutPaymentAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,