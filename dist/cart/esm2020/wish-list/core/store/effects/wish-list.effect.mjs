/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { select } from '@ngrx/store';
import { CartActions, MultiCartSelectors, getCartIdByUserId, } from '@spartacus/cart/base/core';
import { CartType } from '@spartacus/cart/base/root';
import { LoggerService, SiteContextActions, isNotUndefined, normalizeHttpError, } from '@spartacus/core';
import { EMPTY, from } from 'rxjs';
import { catchError, concatMap, filter, map, switchMap, withLatestFrom, } from 'rxjs/operators';
import { WishListActions } from '../actions';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@spartacus/cart/base/core";
import * as i3 from "@spartacus/core";
import * as i4 from "@ngrx/store";
export class WishListEffects {
    constructor(actions$, cartConnector, userIdService, store) {
        this.actions$ = actions$;
        this.cartConnector = cartConnector;
        this.userIdService = userIdService;
        this.store = store;
        this.logger = inject(LoggerService);
        this.createWishList$ = createEffect(() => this.actions$.pipe(ofType(WishListActions.CREATE_WISH_LIST), map((action) => action.payload), switchMap((payload) => {
            return this.cartConnector.create(payload.userId).pipe(switchMap((cart) => {
                return this.cartConnector
                    .save(payload.userId, cart.code ?? '', payload.name, payload.description)
                    .pipe(switchMap((savedCart) => [
                    new WishListActions.CreateWishListSuccess({
                        cart: savedCart,
                        cartId: getCartIdByUserId(savedCart, payload.userId),
                    }),
                ]), catchError((error) => from([
                    new WishListActions.CreateWishListFail({
                        cartId: cart.code ?? '',
                        error: normalizeHttpError(error, this.logger),
                    }),
                ])));
            }));
        })));
        this.loadWishList$ = createEffect(() => this.actions$.pipe(ofType(WishListActions.LOAD_WISH_LIST), map((action) => action.payload), concatMap((payload) => {
            const { userId, cartId } = payload;
            return this.cartConnector.loadAll(userId).pipe(switchMap((carts) => {
                const wishListName = cartId;
                const wishList = carts.find((cart) => cart.name === wishListName);
                const actions = [];
                actions.push(wishList
                    ? new WishListActions.LoadWishListSuccess({
                        cart: wishList,
                        cartId: getCartIdByUserId(wishList, userId),
                    })
                    : new WishListActions.CreateWishList({
                        userId,
                        name: wishListName,
                    }));
                // remove temp wishlist, which id is whishlist name
                actions.push(new CartActions.RemoveCart({ cartId: wishListName }));
                return actions;
            }), catchError((error) => from([
                new WishListActions.LoadWishListFail({
                    cartId: cartId,
                    error: normalizeHttpError(error, this.logger),
                }),
            ])));
        })));
        this.resetWishList$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), withLatestFrom(this.userIdService.getUserId(), this.store.pipe(filter((store) => !!store.cart), select(MultiCartSelectors.getCartIdByTypeFactory(CartType.WISH_LIST)))), switchMap(([, userId, wishListId]) => {
            if (Boolean(wishListId)) {
                return this.cartConnector.load(userId, wishListId).pipe(switchMap((wishList) => [
                    new WishListActions.LoadWishListSuccess({
                        cart: wishList ?? {},
                        cartId: getCartIdByUserId(wishList, userId),
                    }),
                ]), catchError((error) => from([
                    new WishListActions.LoadWishListFail({
                        cartId: wishListId,
                        error: normalizeHttpError(error, this.logger),
                    }),
                ])));
            }
            return EMPTY;
        })));
        this.setWishListId$ = createEffect(() => this.actions$.pipe(ofType(WishListActions.CREATE_WISH_LIST_SUCCESS, WishListActions.LOAD_WISH_LIST_SUCCESS), map((action) => {
            switch (action.type) {
                case WishListActions.CREATE_WISH_LIST_SUCCESS:
                case WishListActions.LOAD_WISH_LIST_SUCCESS: {
                    return new CartActions.SetCartTypeIndex({
                        cartType: CartType.WISH_LIST,
                        cartId: action.meta
                            .entityId,
                    });
                }
            }
        }), filter(isNotUndefined)));
        this.setWishListData$ = createEffect(() => this.actions$.pipe(ofType(WishListActions.CREATE_WISH_LIST_SUCCESS, WishListActions.LOAD_WISH_LIST_SUCCESS), map((action) => {
            switch (action.type) {
                case WishListActions.CREATE_WISH_LIST_SUCCESS:
                case WishListActions.LOAD_WISH_LIST_SUCCESS: {
                    return new CartActions.SetCartData({
                        cart: action.payload.cart,
                        cartId: action.payload.cartId,
                    });
                }
            }
        }), filter(isNotUndefined)));
    }
}
WishListEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: WishListEffects, deps: [{ token: i1.Actions }, { token: i2.CartConnector }, { token: i3.UserIdService }, { token: i4.Store }], target: i0.ɵɵFactoryTarget.Injectable });
WishListEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: WishListEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: WishListEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CartConnector }, { type: i3.UserIdService }, { type: i4.Store }]; } });
//# sourceMappingURL=data:application/json;base64,