/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { select } from '@ngrx/store';
import { LoggerService, OCC_CART_ID_CURRENT, SiteContextActions, isNotUndefined, normalizeHttpError, withdrawOn, } from '@spartacus/core';
import { from, of } from 'rxjs';
import { catchError, concatMap, filter, groupBy, map, mergeMap, switchMap, withLatestFrom, } from 'rxjs/operators';
import { getCartIdByUserId, isCartNotFoundError } from '../../utils/utils';
import { CartActions } from '../actions/index';
import { getCartHasPendingProcessesSelectorFactory } from '../selectors/multi-cart.selector';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/cart/cart.connector";
import * as i3 from "@ngrx/store";
export class CartEffects {
    handleLoadCartError(payload, error) {
        if (error?.error?.errors) {
            const couponExpiredErrors = error.error.errors.filter((err) => err.reason === 'invalid');
            if (couponExpiredErrors.length > 0) {
                // Reload in case of expired coupon.
                return of(new CartActions.LoadCart({ ...payload }));
            }
            const cartNotFoundErrors = error.error.errors.filter((err) => isCartNotFoundError(err) || err.reason === 'UnknownResourceError');
            if (cartNotFoundErrors.length > 0) {
                // Remove cart as it doesn't exist on backend (selective cart always exists).
                return of(new CartActions.RemoveCart({ cartId: payload.cartId }));
            }
        }
        return of(new CartActions.LoadCartFail({
            ...payload,
            error: normalizeHttpError(error, this.logger),
        }));
    }
    constructor(actions$, cartConnector, store) {
        this.actions$ = actions$;
        this.cartConnector = cartConnector;
        this.store = store;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.CURRENCY_CHANGE, SiteContextActions.LANGUAGE_CHANGE));
        this.logger = inject(LoggerService);
        this.loadCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.LOAD_CART), map((action) => action.payload), groupBy((payload) => payload.cartId), mergeMap((group$) => group$.pipe(switchMap((payload) => {
            return of(payload).pipe(withLatestFrom(this.store.pipe(select(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));
        }), filter(([_, hasPendingProcesses]) => !hasPendingProcesses), map(([payload]) => payload), switchMap((payload) => {
            return this.cartConnector.load(payload.userId, payload.cartId).pipe(mergeMap((cart) => {
                let actions = [];
                if (cart) {
                    actions.push(new CartActions.LoadCartSuccess({
                        ...payload,
                        cart,
                        cartId: getCartIdByUserId(cart, payload.userId),
                    }));
                    if (payload.cartId === OCC_CART_ID_CURRENT) {
                        // Removing cart from entity object under `current` key as it is no longer needed.
                        // Current cart is loaded under it's code entity.
                        actions.push(new CartActions.RemoveCart({
                            cartId: OCC_CART_ID_CURRENT,
                        }));
                    }
                }
                else {
                    actions = [
                        new CartActions.LoadCartFail({
                            ...payload,
                            error: {},
                        }),
                    ];
                }
                return actions;
            }), catchError((error) => this.handleLoadCartError(payload, error)));
        }))), withdrawOn(this.contextChange$)));
        this.createCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CREATE_CART), map((action) => action.payload), mergeMap((payload) => {
            return this.cartConnector
                .create(payload.userId, payload.oldCartId, payload.toMergeCartGuid)
                .pipe(switchMap((cart) => {
                const conditionalActions = [];
                if (payload.oldCartId) {
                    conditionalActions.push(new CartActions.MergeCartSuccess({
                        extraData: payload.extraData,
                        userId: payload.userId,
                        tempCartId: payload.tempCartId,
                        cartId: getCartIdByUserId(cart, payload.userId),
                        oldCartId: payload.oldCartId,
                    }));
                }
                return [
                    new CartActions.CreateCartSuccess({
                        ...payload,
                        cart,
                        cartId: getCartIdByUserId(cart, payload.userId),
                    }),
                    new CartActions.RemoveCart({ cartId: payload.tempCartId }),
                    ...conditionalActions,
                ];
            }), catchError((error) => of(new CartActions.CreateCartFail({
                ...payload,
                error: normalizeHttpError(error, this.logger),
            }))));
        }), withdrawOn(this.contextChange$)));
        this.mergeCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.MERGE_CART), map((action) => action.payload), switchMap((payload) => {
            return this.cartConnector
                .load(payload.userId, OCC_CART_ID_CURRENT)
                .pipe(map((currentCart) => {
                if (currentCart?.code !== payload.cartId) {
                    return new CartActions.CreateCart({
                        userId: payload.userId,
                        oldCartId: payload.cartId,
                        toMergeCartGuid: currentCart ? currentCart.guid : undefined,
                        extraData: payload.extraData,
                        tempCartId: payload.tempCartId,
                    });
                }
            }), filter(isNotUndefined));
        }), withdrawOn(this.contextChange$)));
        // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions
        this.refresh$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_ADD_VOUCHER_SUCCESS), map((action) => action.payload), concatMap((payload) => from([
            new CartActions.CartProcessesDecrement(payload.cartId),
            new CartActions.LoadCart({
                userId: payload.userId,
                cartId: payload.cartId,
            }),
        ]))));
        // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity
        this.refreshWithoutProcesses$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_ADD_ENTRY_SUCCESS, CartActions.CART_REMOVE_ENTRY_SUCCESS, CartActions.CART_UPDATE_ENTRY_SUCCESS, CartActions.CART_REMOVE_VOUCHER_SUCCESS), map((action) => action.payload), map((payload) => new CartActions.LoadCart({
            userId: payload.userId,
            cartId: payload.cartId,
        }))));
        this.resetCartDetailsOnSiteContextChange$ = createEffect(() => this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, SiteContextActions.CURRENCY_CHANGE), mergeMap(() => {
            return [new CartActions.ResetCartDetails()];
        })));
        this.addEmail$ = createEffect(() => this.actions$.pipe(ofType(CartActions.ADD_EMAIL_TO_CART), map((action) => action.payload), mergeMap((payload) => this.cartConnector
            .addEmail(payload.userId, payload.cartId, payload.email)
            .pipe(mergeMap(() => {
            return [
                new CartActions.AddEmailToCartSuccess({
                    ...payload,
                }),
                new CartActions.LoadCart({
                    userId: payload.userId,
                    cartId: payload.cartId,
                }),
            ];
        }), catchError((error) => from([
            new CartActions.AddEmailToCartFail({
                ...payload,
                error: normalizeHttpError(error, this.logger),
            }),
            new CartActions.LoadCart({
                userId: payload.userId,
                cartId: payload.cartId,
            }),
        ])))), withdrawOn(this.contextChange$)));
        this.deleteCart$ = createEffect(() => this.actions$.pipe(ofType(CartActions.DELETE_CART), map((action) => action.payload), mergeMap((payload) => this.cartConnector.delete(payload.userId, payload.cartId).pipe(map(() => {
            return new CartActions.DeleteCartSuccess({ ...payload });
        }), catchError((error) => from([
            new CartActions.DeleteCartFail({
                ...payload,
                error: normalizeHttpError(error, this.logger),
            }),
            // Error might happen in higher backend layer and cart could still be removed.
            // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.
            new CartActions.LoadCart({
                ...payload,
            }),
        ]))))));
    }
}
CartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CartEffects, deps: [{ token: i1.Actions }, { token: i2.CartConnector }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });
CartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CartEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CartEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CartConnector }, { type: i3.Store }]; } });
//# sourceMappingURL=data:application/json;base64,