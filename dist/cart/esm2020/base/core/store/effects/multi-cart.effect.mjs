/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { CartType } from '@spartacus/cart/base/root';
import { isNotUndefined, OCC_CART_ID_CURRENT } from '@spartacus/core';
import { filter, map } from 'rxjs/operators';
import { isSelectiveCart } from '../../utils/utils';
import { CartActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "./multi-cart-effect.service";
export class MultiCartEffects {
    /**
     * Verifies if cart is the current cart and returns the appropriate cart type
     * @param action
     * @returns cart type needed on load
     */
    getActiveCartTypeOnLoad(action) {
        if (action?.payload?.cartId === OCC_CART_ID_CURRENT) {
            return new CartActions.SetCartTypeIndex({
                cartType: CartType.ACTIVE,
                cartId: '',
            });
        }
        return undefined;
    }
    /**
     * Verifies if cart is the active cart or saved cart and returns the appropriate cart type
     * @param action
     * @returns cart type
     */
    getActiveCartTypeOnLoadSuccess(action) {
        // Extracted small portion of private effect's logic to a public service
        // to allow FSA for customizing it (for more, see CXSPA-3551)
        return this.multiCartEffectsService.getActiveCartTypeOnLoadSuccess(action);
    }
    /**
     * Verifies if cart is active and returns the appropriate cart type
     * @param action
     * @returns cart type needed on creation
     */
    getActiveCartTypeOnCreate(action) {
        if (action?.payload?.extraData?.active) {
            return new CartActions.SetCartTypeIndex({
                cartType: CartType.ACTIVE,
                cartId: action.meta.entityId,
            });
        }
        return undefined;
    }
    constructor(actions$, multiCartEffectsService) {
        this.actions$ = actions$;
        this.multiCartEffectsService = multiCartEffectsService;
        // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies
        this.processesIncrement$ = createEffect(() => this.actions$.pipe(ofType(CartActions.CART_ADD_VOUCHER), map((action) => action.payload), map((payload) => new CartActions.CartProcessesIncrement(payload.cartId))));
        this.setSelectiveId$ = createEffect(() => this.actions$.pipe(ofType(CartActions.LOAD_CART_SUCCESS), map((action) => {
            switch (action.type) {
                case CartActions.LOAD_CART_SUCCESS: {
                    const payload = action.payload;
                    if (isSelectiveCart(payload.cartId)) {
                        return new CartActions.SetCartTypeIndex({
                            cartType: CartType.SELECTIVE,
                            cartId: payload.cartId,
                        });
                    }
                    break;
                }
            }
        }), filter(isNotUndefined)));
        this.setActiveCartId$ = createEffect(() => this.actions$.pipe(ofType(CartActions.LOAD_CART_SUCCESS, CartActions.LOAD_CART, CartActions.CREATE_CART_SUCCESS, CartActions.CREATE_CART, CartActions.SET_ACTIVE_CART_ID), map((action) => {
            switch (action.type) {
                case CartActions.LOAD_CART: {
                    return this.getActiveCartTypeOnLoad(action);
                }
                case CartActions.LOAD_CART_SUCCESS: {
                    return this.getActiveCartTypeOnLoadSuccess(action);
                }
                case CartActions.CREATE_CART: {
                    return this.getActiveCartTypeOnCreate(action);
                }
                case CartActions.CREATE_CART_SUCCESS: {
                    return new CartActions.SetCartTypeIndex({
                        cartType: action?.payload?.extraData?.active
                            ? CartType.ACTIVE
                            : CartType.NEW_CREATED,
                        cartId: action.meta.entityId,
                    });
                }
                case CartActions.SET_ACTIVE_CART_ID:
                    return new CartActions.SetCartTypeIndex({
                        cartType: CartType.ACTIVE,
                        cartId: action.payload,
                    });
            }
            return undefined;
        }), filter(isNotUndefined)));
    }
}
MultiCartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MultiCartEffects, deps: [{ token: i1.Actions }, { token: i2.MultiCartEffectsService }], target: i0.ɵɵFactoryTarget.Injectable });
MultiCartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MultiCartEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MultiCartEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.MultiCartEffectsService }]; } });
//# sourceMappingURL=data:application/json;base64,