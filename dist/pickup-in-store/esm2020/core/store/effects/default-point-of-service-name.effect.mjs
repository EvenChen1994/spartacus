/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { getProperty, PREFERRED_STORE_LOCAL_STORAGE_KEY, } from '@spartacus/pickup-in-store/root';
import { iif, of } from 'rxjs';
import { catchError, filter, map, mergeMap, switchMap, tap, } from 'rxjs/operators';
import { DefaultPointOfServiceActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@ngrx/store";
import * as i3 from "@spartacus/user/profile/root";
import * as i4 from "@spartacus/core";
export class DefaultPointOfServiceEffect {
    constructor(actions$, store, userProfileService, winRef) {
        this.actions$ = actions$;
        this.store = store;
        this.userProfileService = userProfileService;
        this.winRef = winRef;
        this.loadDefaultPointOfService$ = createEffect(() => this.actions$.pipe(ofType(DefaultPointOfServiceActions.LOAD_DEFAULT_POINT_OF_SERVICE), switchMap(() => this.userProfileService.get().pipe(mergeMap((preferredStore) => iif(() => !!preferredStore && !!preferredStore.defaultPointOfServiceName, of({
            name: getProperty(preferredStore, 'defaultPointOfServiceName'),
            displayName: '',
        }), (() => {
            const PREFERRED_STORE = this.winRef.localStorage?.getItem(PREFERRED_STORE_LOCAL_STORAGE_KEY);
            return of(PREFERRED_STORE ? JSON.parse(PREFERRED_STORE) : undefined);
        })())), filter((defaultPointOfService) => defaultPointOfService), map((defaultPointOfService) => DefaultPointOfServiceActions.LoadDefaultPointOfServiceSuccess({
            payload: defaultPointOfService,
        })), catchError((_error) => of(DefaultPointOfServiceActions.LoadDefaultPointOfServiceSuccess({
            payload: {
                name: '',
                displayName: '',
            },
        })))))));
        this.setDefaultPointOfService$ = createEffect(() => this.actions$.pipe(ofType(DefaultPointOfServiceActions.SET_DEFAULT_POINT_OF_SERVICE), map((action) => action['payload']), tap((preferredStore) => this.winRef.localStorage?.setItem(PREFERRED_STORE_LOCAL_STORAGE_KEY, JSON.stringify(preferredStore))), switchMap((preferredStore) => this.userProfileService
            .update({
            defaultPointOfServiceName: preferredStore.name,
        })
            .pipe(map(() => DefaultPointOfServiceActions.LoadDefaultPointOfService()), catchError((_error) => of(DefaultPointOfServiceActions.LoadDefaultPointOfService)))), map(() => DefaultPointOfServiceActions.LoadDefaultPointOfService())));
    }
}
DefaultPointOfServiceEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DefaultPointOfServiceEffect, deps: [{ token: i1.Actions }, { token: i2.Store }, { token: i3.UserProfileFacade }, { token: i4.WindowRef }], target: i0.ɵɵFactoryTarget.Injectable });
DefaultPointOfServiceEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DefaultPointOfServiceEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DefaultPointOfServiceEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.Store }, { type: i3.UserProfileFacade }, { type: i4.WindowRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wb2ludC1vZi1zZXJ2aWNlLW5hbWUuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3BpY2t1cC1pbi1zdG9yZS9jb3JlL3N0b3JlL2VmZmVjdHMvZGVmYXVsdC1wb2ludC1vZi1zZXJ2aWNlLW5hbWUuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBVyxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzlELE9BQU8sRUFDTCxXQUFXLEVBRVgsaUNBQWlDLEdBQ2xDLE1BQU0saUNBQWlDLENBQUM7QUFFekMsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUNMLFVBQVUsRUFDVixNQUFNLEVBQ04sR0FBRyxFQUNILFFBQVEsRUFDUixTQUFTLEVBQ1QsR0FBRyxHQUNKLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7OztBQUloRSxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDLFlBQ1UsUUFBaUIsRUFDZixLQUFzQyxFQUN0QyxrQkFBcUMsRUFDckMsTUFBaUI7UUFIbkIsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNmLFVBQUssR0FBTCxLQUFLLENBQWlDO1FBQ3RDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7UUFDckMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUc3QiwrQkFBMEIsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsNEJBQTRCLENBQUMsNkJBQTZCLENBQUMsRUFDbEUsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNiLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQ2hDLFFBQVEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQzFCLEdBQUcsQ0FDRCxHQUFHLEVBQUUsQ0FDSCxDQUFDLENBQUMsY0FBYyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMseUJBQXlCLEVBQ2hFLEVBQUUsQ0FBQztZQUNELElBQUksRUFBRSxXQUFXLENBQUMsY0FBYyxFQUFFLDJCQUEyQixDQUFDO1lBQzlELFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUMsRUFDRixDQUFDLEdBQUcsRUFBRTtZQUNKLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FDdkQsaUNBQWlDLENBQ2xDLENBQUM7WUFDRixPQUFPLEVBQUUsQ0FDUCxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FDMUQsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUFFLENBQ0wsQ0FDRixFQUNELE1BQU0sQ0FBQyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUN4RCxHQUFHLENBQUMsQ0FBQyxxQkFBMEMsRUFBRSxFQUFFLENBQ2pELDRCQUE0QixDQUFDLGdDQUFnQyxDQUFDO1lBQzVELE9BQU8sRUFBRSxxQkFBcUI7U0FDL0IsQ0FBQyxDQUNILEVBQ0QsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDcEIsRUFBRSxDQUNBLDRCQUE0QixDQUFDLGdDQUFnQyxDQUFDO1lBQzVELE9BQU8sRUFBRTtnQkFDUCxJQUFJLEVBQUUsRUFBRTtnQkFDUixXQUFXLEVBQUUsRUFBRTthQUNoQjtTQUNGLENBQUMsQ0FDSCxDQUNGLENBQ0YsQ0FDRixDQUNGLENBQ0YsQ0FBQztRQUVGLDhCQUF5QixHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyw0QkFBNEIsQ0FBQyxFQUNqRSxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQXVCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDdkQsR0FBRyxDQUFDLENBQUMsY0FBbUMsRUFBRSxFQUFFLENBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FDL0IsaUNBQWlDLEVBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQy9CLENBQ0YsRUFDRCxTQUFTLENBQUMsQ0FBQyxjQUFtQyxFQUFFLEVBQUUsQ0FDaEQsSUFBSSxDQUFDLGtCQUFrQjthQUNwQixNQUFNLENBQUM7WUFDTix5QkFBeUIsRUFBRSxjQUFjLENBQUMsSUFBSTtTQUMvQyxDQUFDO2FBQ0QsSUFBSSxDQUNILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEVBQ25FLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ3BCLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUMzRCxDQUNGLENBQ0osRUFDRCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsNEJBQTRCLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUNwRSxDQUNGLENBQUM7SUF0RUMsQ0FBQzs7d0hBTk8sMkJBQTJCOzRIQUEzQiwyQkFBMkI7MkZBQTNCLDJCQUEyQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIGNyZWF0ZUVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFdpbmRvd1JlZiB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBnZXRQcm9wZXJ0eSxcbiAgUG9pbnRPZlNlcnZpY2VOYW1lcyxcbiAgUFJFRkVSUkVEX1NUT1JFX0xPQ0FMX1NUT1JBR0VfS0VZLFxufSBmcm9tICdAc3BhcnRhY3VzL3BpY2t1cC1pbi1zdG9yZS9yb290JztcbmltcG9ydCB7IFVzZXJQcm9maWxlRmFjYWRlIH0gZnJvbSAnQHNwYXJ0YWN1cy91c2VyL3Byb2ZpbGUvcm9vdCc7XG5pbXBvcnQgeyBpaWYsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIGNhdGNoRXJyb3IsXG4gIGZpbHRlcixcbiAgbWFwLFxuICBtZXJnZU1hcCxcbiAgc3dpdGNoTWFwLFxuICB0YXAsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IERlZmF1bHRQb2ludE9mU2VydmljZUFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IFN0YXRlV2l0aFBpY2t1cExvY2F0aW9ucyB9IGZyb20gJy4uL3BpY2t1cC1sb2NhdGlvbi1zdGF0ZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWZhdWx0UG9pbnRPZlNlcnZpY2VFZmZlY3Qge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByb3RlY3RlZCBzdG9yZTogU3RvcmU8U3RhdGVXaXRoUGlja3VwTG9jYXRpb25zPixcbiAgICBwcm90ZWN0ZWQgdXNlclByb2ZpbGVTZXJ2aWNlOiBVc2VyUHJvZmlsZUZhY2FkZSxcbiAgICBwcm90ZWN0ZWQgd2luUmVmOiBXaW5kb3dSZWZcbiAgKSB7fVxuXG4gIGxvYWREZWZhdWx0UG9pbnRPZlNlcnZpY2UkID0gY3JlYXRlRWZmZWN0KCgpID0+XG4gICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgb2ZUeXBlKERlZmF1bHRQb2ludE9mU2VydmljZUFjdGlvbnMuTE9BRF9ERUZBVUxUX1BPSU5UX09GX1NFUlZJQ0UpLFxuICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgIHRoaXMudXNlclByb2ZpbGVTZXJ2aWNlLmdldCgpLnBpcGUoXG4gICAgICAgICAgbWVyZ2VNYXAoKHByZWZlcnJlZFN0b3JlKSA9PlxuICAgICAgICAgICAgaWlmKFxuICAgICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgICEhcHJlZmVycmVkU3RvcmUgJiYgISFwcmVmZXJyZWRTdG9yZS5kZWZhdWx0UG9pbnRPZlNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICBvZih7XG4gICAgICAgICAgICAgICAgbmFtZTogZ2V0UHJvcGVydHkocHJlZmVycmVkU3RvcmUsICdkZWZhdWx0UG9pbnRPZlNlcnZpY2VOYW1lJyksXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICcnLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBQUkVGRVJSRURfU1RPUkUgPSB0aGlzLndpblJlZi5sb2NhbFN0b3JhZ2U/LmdldEl0ZW0oXG4gICAgICAgICAgICAgICAgICBQUkVGRVJSRURfU1RPUkVfTE9DQUxfU1RPUkFHRV9LRVlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgICAgICAgIFBSRUZFUlJFRF9TVE9SRSA/IEpTT04ucGFyc2UoUFJFRkVSUkVEX1NUT1JFKSA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIGZpbHRlcigoZGVmYXVsdFBvaW50T2ZTZXJ2aWNlKSA9PiBkZWZhdWx0UG9pbnRPZlNlcnZpY2UpLFxuICAgICAgICAgIG1hcCgoZGVmYXVsdFBvaW50T2ZTZXJ2aWNlOiBQb2ludE9mU2VydmljZU5hbWVzKSA9PlxuICAgICAgICAgICAgRGVmYXVsdFBvaW50T2ZTZXJ2aWNlQWN0aW9ucy5Mb2FkRGVmYXVsdFBvaW50T2ZTZXJ2aWNlU3VjY2Vzcyh7XG4gICAgICAgICAgICAgIHBheWxvYWQ6IGRlZmF1bHRQb2ludE9mU2VydmljZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBjYXRjaEVycm9yKChfZXJyb3IpID0+XG4gICAgICAgICAgICBvZihcbiAgICAgICAgICAgICAgRGVmYXVsdFBvaW50T2ZTZXJ2aWNlQWN0aW9ucy5Mb2FkRGVmYXVsdFBvaW50T2ZTZXJ2aWNlU3VjY2Vzcyh7XG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgbmFtZTogJycsXG4gICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogJycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG5cbiAgc2V0RGVmYXVsdFBvaW50T2ZTZXJ2aWNlJCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShEZWZhdWx0UG9pbnRPZlNlcnZpY2VBY3Rpb25zLlNFVF9ERUZBVUxUX1BPSU5UX09GX1NFUlZJQ0UpLFxuICAgICAgbWFwKChhY3Rpb24pOiBQb2ludE9mU2VydmljZU5hbWVzID0+IGFjdGlvblsncGF5bG9hZCddKSxcbiAgICAgIHRhcCgocHJlZmVycmVkU3RvcmU6IFBvaW50T2ZTZXJ2aWNlTmFtZXMpID0+XG4gICAgICAgIHRoaXMud2luUmVmLmxvY2FsU3RvcmFnZT8uc2V0SXRlbShcbiAgICAgICAgICBQUkVGRVJSRURfU1RPUkVfTE9DQUxfU1RPUkFHRV9LRVksXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJlZmVycmVkU3RvcmUpXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBzd2l0Y2hNYXAoKHByZWZlcnJlZFN0b3JlOiBQb2ludE9mU2VydmljZU5hbWVzKSA9PlxuICAgICAgICB0aGlzLnVzZXJQcm9maWxlU2VydmljZVxuICAgICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgICAgZGVmYXVsdFBvaW50T2ZTZXJ2aWNlTmFtZTogcHJlZmVycmVkU3RvcmUubmFtZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+IERlZmF1bHRQb2ludE9mU2VydmljZUFjdGlvbnMuTG9hZERlZmF1bHRQb2ludE9mU2VydmljZSgpKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKF9lcnJvcikgPT5cbiAgICAgICAgICAgICAgb2YoRGVmYXVsdFBvaW50T2ZTZXJ2aWNlQWN0aW9ucy5Mb2FkRGVmYXVsdFBvaW50T2ZTZXJ2aWNlKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICksXG4gICAgICBtYXAoKCkgPT4gRGVmYXVsdFBvaW50T2ZTZXJ2aWNlQWN0aW9ucy5Mb2FkRGVmYXVsdFBvaW50T2ZTZXJ2aWNlKCkpXG4gICAgKVxuICApO1xufVxuIl19