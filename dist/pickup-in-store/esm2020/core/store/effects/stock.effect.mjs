/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { LoggerService, normalizeHttpError } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, concatMap, map, switchMap } from 'rxjs/operators';
import { StockLevelActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/index";
export class StockEffect {
    constructor(actions$, stockConnector) {
        this.actions$ = actions$;
        this.stockConnector = stockConnector;
        this.logger = inject(LoggerService);
        this.loadStockLevels$ = createEffect(() => this.actions$.pipe(ofType(StockLevelActions.STOCK_LEVEL), map((action) => action.payload), switchMap(({ productCode, ...location }) => this.stockConnector.loadStockLevels(productCode, location).pipe(map((stockLevels) => new StockLevelActions.StockLevelSuccess({
            productCode,
            stockLevels,
        })), catchError((error) => of(new StockLevelActions.StockLevelFail(normalizeHttpError(error, this.logger))))))));
        this.loadStockLevelAtStore$ = createEffect(() => this.actions$.pipe(ofType(StockLevelActions.STOCK_LEVEL_AT_STORE), map(({ payload }) => payload), concatMap(({ productCode, storeName }) => this.stockConnector.loadStockLevelAtStore(productCode, storeName).pipe(map((stockLevel) => StockLevelActions.StockLevelAtStoreSuccess({
            payload: { productCode, storeName, stockLevel },
        }))))));
        // Intentional empty constructor
    }
}
StockEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: StockEffect, deps: [{ token: i1.Actions }, { token: i2.StockConnector }], target: i0.ɵɵFactoryTarget.Injectable });
StockEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: StockEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: StockEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.StockConnector }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2suZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3BpY2t1cC1pbi1zdG9yZS9jb3JlL3N0b3JlL2VmZmVjdHMvc3RvY2suZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQVcsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7QUFHckQsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFDVSxRQUFpQixFQUNqQixjQUE4QjtRQUQ5QixhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUo5QixXQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBU3pDLHFCQUFnQixHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsRUFDckMsR0FBRyxDQUFDLENBQUMsTUFBb0MsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUM3RCxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxHQUFHLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FDekMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDN0QsR0FBRyxDQUNELENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FDZCxJQUFJLGlCQUFpQixDQUFDLGlCQUFpQixDQUFDO1lBQ3RDLFdBQVc7WUFDWCxXQUFXO1NBQ1osQ0FBQyxDQUNMLEVBQ0QsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDbkIsRUFBRSxDQUNBLElBQUksaUJBQWlCLENBQUMsY0FBYyxDQUNsQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUN2QyxDQUNGLENBQ0YsQ0FDRixDQUNGLENBQ0YsQ0FDRixDQUFDO1FBRUYsMkJBQXNCLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLEVBQzlDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUE2QyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFDeEUsU0FBUyxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUN2QyxJQUFJLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3BFLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQ2pCLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDO1lBQ3pDLE9BQU8sRUFBRSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFO1NBQ2hELENBQUMsQ0FDSCxDQUNGLENBQ0YsQ0FDRixDQUNGLENBQUM7UUExQ0EsZ0NBQWdDO0lBQ2xDLENBQUM7O3dHQVJVLFdBQVc7NEdBQVgsV0FBVzsyRkFBWCxXQUFXO2tCQUR2QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zLCBjcmVhdGVFZmZlY3QsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSwgbm9ybWFsaXplSHR0cEVycm9yIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBjb25jYXRNYXAsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3RvY2tDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL2luZGV4JztcbmltcG9ydCB7IFN0b2NrTGV2ZWxBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdG9ja0VmZmVjdCB7XG4gIHByb3RlY3RlZCBsb2dnZXIgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIHN0b2NrQ29ubmVjdG9yOiBTdG9ja0Nvbm5lY3RvclxuICApIHtcbiAgICAvLyBJbnRlbnRpb25hbCBlbXB0eSBjb25zdHJ1Y3RvclxuICB9XG5cbiAgbG9hZFN0b2NrTGV2ZWxzJCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShTdG9ja0xldmVsQWN0aW9ucy5TVE9DS19MRVZFTCksXG4gICAgICBtYXAoKGFjdGlvbjogU3RvY2tMZXZlbEFjdGlvbnMuU3RvY2tMZXZlbCkgPT4gYWN0aW9uLnBheWxvYWQpLFxuICAgICAgc3dpdGNoTWFwKCh7IHByb2R1Y3RDb2RlLCAuLi5sb2NhdGlvbiB9KSA9PlxuICAgICAgICB0aGlzLnN0b2NrQ29ubmVjdG9yLmxvYWRTdG9ja0xldmVscyhwcm9kdWN0Q29kZSwgbG9jYXRpb24pLnBpcGUoXG4gICAgICAgICAgbWFwKFxuICAgICAgICAgICAgKHN0b2NrTGV2ZWxzKSA9PlxuICAgICAgICAgICAgICBuZXcgU3RvY2tMZXZlbEFjdGlvbnMuU3RvY2tMZXZlbFN1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIHByb2R1Y3RDb2RlLFxuICAgICAgICAgICAgICAgIHN0b2NrTGV2ZWxzLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICAgICAgICBvZihcbiAgICAgICAgICAgICAgbmV3IFN0b2NrTGV2ZWxBY3Rpb25zLlN0b2NrTGV2ZWxGYWlsKFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciwgdGhpcy5sb2dnZXIpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG5cbiAgbG9hZFN0b2NrTGV2ZWxBdFN0b3JlJCA9IGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShTdG9ja0xldmVsQWN0aW9ucy5TVE9DS19MRVZFTF9BVF9TVE9SRSksXG4gICAgICBtYXAoKHsgcGF5bG9hZCB9OiBTdG9ja0xldmVsQWN0aW9ucy5TdG9ja0xldmVsQXRTdG9yZUFjdGlvbikgPT4gcGF5bG9hZCksXG4gICAgICBjb25jYXRNYXAoKHsgcHJvZHVjdENvZGUsIHN0b3JlTmFtZSB9KSA9PlxuICAgICAgICB0aGlzLnN0b2NrQ29ubmVjdG9yLmxvYWRTdG9ja0xldmVsQXRTdG9yZShwcm9kdWN0Q29kZSwgc3RvcmVOYW1lKS5waXBlKFxuICAgICAgICAgIG1hcCgoc3RvY2tMZXZlbCkgPT5cbiAgICAgICAgICAgIFN0b2NrTGV2ZWxBY3Rpb25zLlN0b2NrTGV2ZWxBdFN0b3JlU3VjY2Vzcyh7XG4gICAgICAgICAgICAgIHBheWxvYWQ6IHsgcHJvZHVjdENvZGUsIHN0b3JlTmFtZSwgc3RvY2tMZXZlbCB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG59XG4iXX0=