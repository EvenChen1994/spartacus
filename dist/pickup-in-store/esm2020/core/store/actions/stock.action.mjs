/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createAction, props } from '@ngrx/store';
import { StateUtils } from '@spartacus/core';
import { STOCK_DATA } from '../stock-state';
export const STOCK_LEVEL = '[Stock] Get Stock Level';
export const STOCK_LEVEL_ON_HOLD = '[Stock] On Hold';
export const STOCK_LEVEL_FAIL = '[Stock] Get Stock Level Fail';
export const STOCK_LEVEL_SUCCESS = '[Stock] Get Stock Level Success';
export const CLEAR_STOCK_DATA = '[Stock] Clear Data';
export const STOCK_LEVEL_AT_STORE = '[Stock] Get Stock Level at Store';
export const STOCK_LEVEL_AT_STORE_SUCCESS = '[Stock] Get Stock Level at Store Success';
export class StockLevel extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(STOCK_DATA);
        this.payload = payload;
        this.type = STOCK_LEVEL;
    }
}
export class StockLevelOnHold extends StateUtils.LoaderLoadAction {
    constructor() {
        super(STOCK_DATA);
        this.type = STOCK_LEVEL_ON_HOLD;
    }
}
export class StockLevelFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(STOCK_DATA, payload);
        this.payload = payload;
        this.type = STOCK_LEVEL_FAIL;
    }
}
export class StockLevelSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(STOCK_DATA);
        this.payload = payload;
        this.type = STOCK_LEVEL_SUCCESS;
    }
}
export class ClearStockData extends StateUtils.LoaderResetAction {
    constructor() {
        super(STOCK_DATA);
        this.type = CLEAR_STOCK_DATA;
    }
}
/**
 * Add a proposed pickup location for a product code.
 */
export const StockLevelAtStore = createAction(STOCK_LEVEL_AT_STORE, props());
/**
 * Add the stock level for a product at a store.
 */
export const StockLevelAtStoreSuccess = createAction(STOCK_LEVEL_AT_STORE_SUCCESS, props());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2suYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3BpY2t1cC1pbi1zdG9yZS9jb3JlL3N0b3JlL2FjdGlvbnMvc3RvY2suYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFxQyxNQUFNLGlCQUFpQixDQUFDO0FBRWhGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcseUJBQXlCLENBQUM7QUFDckQsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsaUJBQWlCLENBQUM7QUFDckQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsOEJBQThCLENBQUM7QUFDL0QsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsaUNBQWlDLENBQUM7QUFDckUsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsb0JBQW9CLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsa0NBQWtDLENBQUM7QUFDdkUsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQ3ZDLDBDQUEwQyxDQUFDO0FBRTdDLE1BQU0sT0FBTyxVQUFXLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUV6RCxZQUFtQixPQUFrQztRQUNuRCxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFERCxZQUFPLEdBQVAsT0FBTyxDQUEyQjtRQUQ1QyxTQUFJLEdBQUcsV0FBVyxDQUFDO0lBRzVCLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRS9EO1FBQ0UsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRlgsU0FBSSxHQUFHLG1CQUFtQixDQUFDO0lBR3BDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxjQUFlLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUU3RCxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEVixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxnQkFBZ0IsQ0FBQztJQUdqQyxDQUFDO0NBQ0Y7QUFPRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsVUFBVSxDQUFDLG1CQUFtQjtJQUVuRSxZQUFtQixPQUFpQztRQUNsRCxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFERCxZQUFPLEdBQVAsT0FBTyxDQUEwQjtRQUQzQyxTQUFJLEdBQUcsbUJBQW1CLENBQUM7SUFHcEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGNBQWUsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRTlEO1FBQ0UsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRlgsU0FBSSxHQUFHLGdCQUFnQixDQUFDO0lBR2pDLENBQUM7Q0FDRjtBQVdEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsWUFBWSxDQUMzQyxvQkFBb0IsRUFDcEIsS0FBSyxFQUF5QyxDQUMvQyxDQUFDO0FBUUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxZQUFZLENBQ2xELDRCQUE0QixFQUM1QixLQUFLLEVBQWdELENBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBjcmVhdGVBY3Rpb24sIHByb3BzIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgU3RhdGVVdGlscywgU3RvY2ssIFN0b3JlRmluZGVyU3RvY2tTZWFyY2hQYWdlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFN0b2NrTG9jYXRpb25TZWFyY2hQYXJhbXMgfSBmcm9tICdAc3BhcnRhY3VzL3BpY2t1cC1pbi1zdG9yZS9yb290JztcbmltcG9ydCB7IFNUT0NLX0RBVEEgfSBmcm9tICcuLi9zdG9jay1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBTVE9DS19MRVZFTCA9ICdbU3RvY2tdIEdldCBTdG9jayBMZXZlbCc7XG5leHBvcnQgY29uc3QgU1RPQ0tfTEVWRUxfT05fSE9MRCA9ICdbU3RvY2tdIE9uIEhvbGQnO1xuZXhwb3J0IGNvbnN0IFNUT0NLX0xFVkVMX0ZBSUwgPSAnW1N0b2NrXSBHZXQgU3RvY2sgTGV2ZWwgRmFpbCc7XG5leHBvcnQgY29uc3QgU1RPQ0tfTEVWRUxfU1VDQ0VTUyA9ICdbU3RvY2tdIEdldCBTdG9jayBMZXZlbCBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBDTEVBUl9TVE9DS19EQVRBID0gJ1tTdG9ja10gQ2xlYXIgRGF0YSc7XG5cbmV4cG9ydCBjb25zdCBTVE9DS19MRVZFTF9BVF9TVE9SRSA9ICdbU3RvY2tdIEdldCBTdG9jayBMZXZlbCBhdCBTdG9yZSc7XG5leHBvcnQgY29uc3QgU1RPQ0tfTEVWRUxfQVRfU1RPUkVfU1VDQ0VTUyA9XG4gICdbU3RvY2tdIEdldCBTdG9jayBMZXZlbCBhdCBTdG9yZSBTdWNjZXNzJztcblxuZXhwb3J0IGNsYXNzIFN0b2NrTGV2ZWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU1RPQ0tfTEVWRUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBTdG9ja0xvY2F0aW9uU2VhcmNoUGFyYW1zKSB7XG4gICAgc3VwZXIoU1RPQ0tfREFUQSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0b2NrTGV2ZWxPbkhvbGQgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU1RPQ0tfTEVWRUxfT05fSE9MRDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoU1RPQ0tfREFUQSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0b2NrTGV2ZWxGYWlsIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJGYWlsQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFNUT0NLX0xFVkVMX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihTVE9DS19EQVRBLCBwYXlsb2FkKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBTdG9ja0xldmVsU3VjY2Vzc1BheWxvYWQgPSB7XG4gIHByb2R1Y3RDb2RlOiBzdHJpbmc7XG4gIHN0b2NrTGV2ZWxzOiBTdG9yZUZpbmRlclN0b2NrU2VhcmNoUGFnZTtcbn07XG5cbmV4cG9ydCBjbGFzcyBTdG9ja0xldmVsU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTVE9DS19MRVZFTF9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogU3RvY2tMZXZlbFN1Y2Nlc3NQYXlsb2FkKSB7XG4gICAgc3VwZXIoU1RPQ0tfREFUQSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsZWFyU3RvY2tEYXRhIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9TVE9DS19EQVRBO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihTVE9DS19EQVRBKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBTdG9ja0xldmVsQWN0aW9uID1cbiAgfCBTdG9ja0xldmVsXG4gIHwgU3RvY2tMZXZlbE9uSG9sZFxuICB8IFN0b2NrTGV2ZWxGYWlsXG4gIHwgU3RvY2tMZXZlbFN1Y2Nlc3NcbiAgfCBDbGVhclN0b2NrRGF0YTtcblxudHlwZSBTdG9ja0xldmVsQXRTdG9yZVBheWxvYWQgPSB7IHByb2R1Y3RDb2RlOiBzdHJpbmc7IHN0b3JlTmFtZTogc3RyaW5nIH07XG5cbi8qKlxuICogQWRkIGEgcHJvcG9zZWQgcGlja3VwIGxvY2F0aW9uIGZvciBhIHByb2R1Y3QgY29kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFN0b2NrTGV2ZWxBdFN0b3JlID0gY3JlYXRlQWN0aW9uKFxuICBTVE9DS19MRVZFTF9BVF9TVE9SRSxcbiAgcHJvcHM8eyBwYXlsb2FkOiBTdG9ja0xldmVsQXRTdG9yZVBheWxvYWQgfT4oKVxuKTtcblxuZXhwb3J0IHR5cGUgU3RvY2tMZXZlbEF0U3RvcmVBY3Rpb24gPSBSZXR1cm5UeXBlPHR5cGVvZiBTdG9ja0xldmVsQXRTdG9yZT47XG5cbnR5cGUgU3RvY2tMZXZlbEF0U3RvcmVTdWNjZXNzUGF5bG9hZCA9IFN0b2NrTGV2ZWxBdFN0b3JlUGF5bG9hZCAmIHtcbiAgc3RvY2tMZXZlbDogU3RvY2s7XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgc3RvY2sgbGV2ZWwgZm9yIGEgcHJvZHVjdCBhdCBhIHN0b3JlLlxuICovXG5leHBvcnQgY29uc3QgU3RvY2tMZXZlbEF0U3RvcmVTdWNjZXNzID0gY3JlYXRlQWN0aW9uKFxuICBTVE9DS19MRVZFTF9BVF9TVE9SRV9TVUNDRVNTLFxuICBwcm9wczx7IHBheWxvYWQ6IFN0b2NrTGV2ZWxBdFN0b3JlU3VjY2Vzc1BheWxvYWQgfT4oKVxuKTtcbiJdfQ==