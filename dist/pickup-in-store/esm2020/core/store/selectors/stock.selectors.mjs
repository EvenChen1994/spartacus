/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { createSelector } from '@ngrx/store';
import { StateUtils } from '@spartacus/core';
import { storeHasStock } from '../../utils';
import { getStockState } from './feature.selectors';
import { getHideOutOfStockState } from './hide-out-of-stock.selectors';
export const getStockLevelState = createSelector(getStockState, (stockState) => stockState.stockLevel);
export const getStockEntities = createSelector(getStockLevelState, (state) => StateUtils.loaderValueSelector(state));
export const getStockLoading = createSelector(getStockLevelState, (state) => StateUtils.loaderLoadingSelector(state));
export const getStockSuccess = createSelector(getStockLevelState, (state) => StateUtils.loaderSuccessSelector(state));
export const getStockError = createSelector(getStockLevelState, (state) => StateUtils.loaderErrorSelector(state));
export const hasSearchStarted = createSelector(getStockLoading, getStockSuccess, getStockError, (_getStockLoading, _getStockSuccess, _getStockError) => _getStockLoading || _getStockSuccess || _getStockError);
export const hasSearchStartedForProductCode = (productCode) => createSelector(hasSearchStarted, getStockEntities, (hasSearchBeenStarted, stockEntities) => {
    return hasSearchBeenStarted && !!stockEntities[productCode];
});
export const getStoresWithStockForProductCode = (productCode) => createSelector(getStockEntities, getHideOutOfStockState, (stockEntities, hideOutOfStock) => stockEntities[productCode]?.stores?.filter((store) => !hideOutOfStock || storeHasStock(store)) ?? []);
export const getStockAtStore = (productCode, storeName) => createSelector(getStockState, (stockState) => stockState?.stockLevelAtStore?.[productCode]?.[storeName]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2suc2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3BpY2t1cC1pbi1zdG9yZS9jb3JlL3N0b3JlL3NlbGVjdG9ycy9zdG9jay5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxjQUFjLEVBQW9CLE1BQU0sYUFBYSxDQUFDO0FBQy9ELE9BQU8sRUFBdUIsVUFBVSxFQUFTLE1BQU0saUJBQWlCLENBQUM7QUFDekUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUU1QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFdkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBRzNCLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUV6RSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FHekIsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDL0MsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUN0QyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUMxQixjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUMzQyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQ3hDLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQzFCLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQzNDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDeEMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FDeEIsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDM0MsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUN0QyxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQzNCLGNBQWMsQ0FDWixlQUFlLEVBQ2YsZUFBZSxFQUNmLGFBQWEsRUFDYixDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxFQUFFLENBQ3JELGdCQUFnQixJQUFJLGdCQUFnQixJQUFJLGNBQWMsQ0FDekQsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLFdBQW1CLEVBQ3dCLEVBQUUsQ0FDN0MsY0FBYyxDQUNaLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLEVBQUUsRUFBRTtJQUN0QyxPQUFPLG9CQUFvQixJQUFJLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDOUQsQ0FBQyxDQUNGLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxXQUFtQixFQUNzQyxFQUFFLENBQzNELGNBQWMsQ0FDWixnQkFBZ0IsRUFDaEIsc0JBQXNCLEVBQ3RCLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFLENBQ2hDLGFBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUN4QyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxjQUFjLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUNuRCxJQUFJLEVBQUUsQ0FDVixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQzdCLFdBQW1CLEVBQ25CLFNBQWlCLEVBQ29DLEVBQUUsQ0FDdkQsY0FBYyxDQUNaLGFBQWEsRUFDYixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsVUFBVSxFQUFFLGlCQUFpQixFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDMUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yLCBNZW1vaXplZFNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgUG9pbnRPZlNlcnZpY2VTdG9jaywgU3RhdGVVdGlscywgU3RvY2sgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgc3RvcmVIYXNTdG9jayB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IFN0YXRlV2l0aFN0b2NrLCBTdG9ja0xldmVsU3RhdGUgfSBmcm9tICcuLi9zdG9jay1zdGF0ZSc7XG5pbXBvcnQgeyBnZXRTdG9ja1N0YXRlIH0gZnJvbSAnLi9mZWF0dXJlLnNlbGVjdG9ycyc7XG5pbXBvcnQgeyBnZXRIaWRlT3V0T2ZTdG9ja1N0YXRlIH0gZnJvbSAnLi9oaWRlLW91dC1vZi1zdG9jay5zZWxlY3RvcnMnO1xuXG5leHBvcnQgY29uc3QgZ2V0U3RvY2tMZXZlbFN0YXRlOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhTdG9jayxcbiAgU3RhdGVVdGlscy5Mb2FkZXJTdGF0ZTxTdG9ja0xldmVsU3RhdGU+XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0U3RvY2tTdGF0ZSwgKHN0b2NrU3RhdGUpID0+IHN0b2NrU3RhdGUuc3RvY2tMZXZlbCk7XG5cbmV4cG9ydCBjb25zdCBnZXRTdG9ja0VudGl0aWVzOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhTdG9jayxcbiAgU3RvY2tMZXZlbFN0YXRlXG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0U3RvY2tMZXZlbFN0YXRlLCAoc3RhdGUpID0+XG4gIFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSlcbik7XG5cbmV4cG9ydCBjb25zdCBnZXRTdG9ja0xvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoU3RvY2ssIGJvb2xlYW4+ID1cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0U3RvY2tMZXZlbFN0YXRlLCAoc3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRTdG9ja1N1Y2Nlc3M6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoU3RvY2ssIGJvb2xlYW4+ID1cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0U3RvY2tMZXZlbFN0YXRlLCAoc3RhdGUpID0+XG4gICAgU3RhdGVVdGlscy5sb2FkZXJTdWNjZXNzU2VsZWN0b3Ioc3RhdGUpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRTdG9ja0Vycm9yOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFN0b2NrLCBib29sZWFuPiA9XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFN0b2NrTGV2ZWxTdGF0ZSwgKHN0YXRlKSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyRXJyb3JTZWxlY3RvcihzdGF0ZSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IGhhc1NlYXJjaFN0YXJ0ZWQ6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoU3RvY2ssIGJvb2xlYW4+ID1cbiAgY3JlYXRlU2VsZWN0b3IoXG4gICAgZ2V0U3RvY2tMb2FkaW5nLFxuICAgIGdldFN0b2NrU3VjY2VzcyxcbiAgICBnZXRTdG9ja0Vycm9yLFxuICAgIChfZ2V0U3RvY2tMb2FkaW5nLCBfZ2V0U3RvY2tTdWNjZXNzLCBfZ2V0U3RvY2tFcnJvcikgPT5cbiAgICAgIF9nZXRTdG9ja0xvYWRpbmcgfHwgX2dldFN0b2NrU3VjY2VzcyB8fCBfZ2V0U3RvY2tFcnJvclxuICApO1xuXG5leHBvcnQgY29uc3QgaGFzU2VhcmNoU3RhcnRlZEZvclByb2R1Y3RDb2RlID0gKFxuICBwcm9kdWN0Q29kZTogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFN0b2NrLCBib29sZWFuPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBoYXNTZWFyY2hTdGFydGVkLFxuICAgIGdldFN0b2NrRW50aXRpZXMsXG4gICAgKGhhc1NlYXJjaEJlZW5TdGFydGVkLCBzdG9ja0VudGl0aWVzKSA9PiB7XG4gICAgICByZXR1cm4gaGFzU2VhcmNoQmVlblN0YXJ0ZWQgJiYgISFzdG9ja0VudGl0aWVzW3Byb2R1Y3RDb2RlXTtcbiAgICB9XG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRTdG9yZXNXaXRoU3RvY2tGb3JQcm9kdWN0Q29kZSA9IChcbiAgcHJvZHVjdENvZGU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhTdG9jaywgUG9pbnRPZlNlcnZpY2VTdG9ja1tdPiA9PlxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRTdG9ja0VudGl0aWVzLFxuICAgIGdldEhpZGVPdXRPZlN0b2NrU3RhdGUsXG4gICAgKHN0b2NrRW50aXRpZXMsIGhpZGVPdXRPZlN0b2NrKSA9PlxuICAgICAgc3RvY2tFbnRpdGllc1twcm9kdWN0Q29kZV0/LnN0b3Jlcz8uZmlsdGVyKFxuICAgICAgICAoc3RvcmUpID0+ICFoaWRlT3V0T2ZTdG9jayB8fCBzdG9yZUhhc1N0b2NrKHN0b3JlKVxuICAgICAgKSA/PyBbXVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0U3RvY2tBdFN0b3JlID0gKFxuICBwcm9kdWN0Q29kZTogc3RyaW5nLFxuICBzdG9yZU5hbWU6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhTdG9jaywgU3RvY2sgfCB1bmRlZmluZWQ+ID0+XG4gIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldFN0b2NrU3RhdGUsXG4gICAgKHN0b2NrU3RhdGUpID0+IHN0b2NrU3RhdGU/LnN0b2NrTGV2ZWxBdFN0b3JlPy5bcHJvZHVjdENvZGVdPy5bc3RvcmVOYW1lXVxuICApO1xuIl19