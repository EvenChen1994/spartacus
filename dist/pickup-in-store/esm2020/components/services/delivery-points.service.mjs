/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { getProperty, } from '@spartacus/pickup-in-store/root';
import { combineLatest, iif, of } from 'rxjs';
import { filter, map, mergeMap, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/cart/base/root";
import * as i2 from "@spartacus/pickup-in-store/root";
import * as i3 from "@spartacus/order/root";
/**
 * A service to get the Delivery Points Of Service for items to be picked up in store for the active cart
 */
export class DeliveryPointsService {
    constructor(activeCartFacade, pickupLocationsSearchFacade, orderFacade) {
        this.activeCartFacade = activeCartFacade;
        this.pickupLocationsSearchFacade = pickupLocationsSearchFacade;
        this.orderFacade = orderFacade;
    }
    /*
     * deliveryPointsOfService$ comprises arrays within an array.
     * It has an array of stores, and then for each store, an array of products to be collected from that store.
     * We need to get data from two different services. One of the services has the product data, ie the products to be picked up from in store.
     * This data only has the store name, no other information about the store eg address etc.
     * We then use another service to get data about the store. This service has two methods that must be called.
     * loadStoreDetails is called to make the api call. The data returned from this call populates an area of the ngrx store.
     * Then getStoreDetails is used to get store detail data from the relevant slice of state in the ngrx store.
     * So the below:
     * - gets active cart
     * - gets items in the cart
     * - gets those items that are to be picked up from a store
     * - get the data about each store
     *
     * Some of the below involves turning array data into lookup object data simply because this is easier to deal with
     */
    getDeliveryPointsOfServiceFromCart() {
        return this.activeCartFacade.getPickupEntries().pipe(filter((entries) => !!entries && !!entries.length), switchMap((entries) => this.getDeliveryPointsOfService(entries)));
    }
    getDeliveryPointsOfServiceFromOrder() {
        return this.orderFacade.getPickupEntries().pipe(filter((entries) => !!entries && !!entries.length), switchMap((entries) => this.getDeliveryPointsOfService(entries)));
    }
    getDeliveryPointsOfService(entries) {
        return of(entries).pipe(map((items) => items.filter((entry) => !!entry.deliveryPointOfService)), switchMap((elements) => iif(() => !!elements.length, of(elements).pipe(map((_elements) => {
            const COPY = [..._elements];
            COPY.sort((a, b) => a.deliveryPointOfService?.name?.localeCompare(getProperty(b.deliveryPointOfService, 'name') || '') || 0);
            return COPY;
        }), map((sortedArray) => sortedArray.reduce((accumulator, value) => {
            const DELIVERY_POINT_OF_SERVICE = value
                .deliveryPointOfService?.name;
            const existingValue = accumulator[DELIVERY_POINT_OF_SERVICE]
                ? accumulator[DELIVERY_POINT_OF_SERVICE]
                : [];
            return {
                ...accumulator,
                [DELIVERY_POINT_OF_SERVICE]: [...existingValue, value],
            };
        }, {})), map((deliveryPointOfServiceMap) => Object.keys(deliveryPointOfServiceMap).map((key) => ({
            name: key,
            value: deliveryPointOfServiceMap[key],
        }))), tap((deliveryPointOfServiceMap) => deliveryPointOfServiceMap
            .map((deliveryPointOfService) => deliveryPointOfService.name)
            .forEach((name) => this.pickupLocationsSearchFacade.loadStoreDetails(name))), mergeMap((deliveryPointOfServiceMap) => combineLatest(deliveryPointOfServiceMap
            .map((deliveryPointOfService) => deliveryPointOfService.name)
            .map((name) => this.pickupLocationsSearchFacade.getStoreDetails(name))).pipe(map((storeDetails) => {
            const STORE_DETAILS_MAP = storeDetails
                .filter((_storeDetails) => !!_storeDetails)
                .reduce((accumulator, value) => ({
                ...accumulator,
                [value.name]: value,
            }), {});
            return deliveryPointOfServiceMap.map((store) => ({
                ...store,
                storeDetails: STORE_DETAILS_MAP[store.name],
            }));
        })))), of([]))));
    }
}
DeliveryPointsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DeliveryPointsService, deps: [{ token: i1.ActiveCartFacade }, { token: i2.PickupLocationsSearchFacade }, { token: i3.OrderFacade }], target: i0.ɵɵFactoryTarget.Injectable });
DeliveryPointsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DeliveryPointsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: DeliveryPointsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActiveCartFacade }, { type: i2.PickupLocationsSearchFacade }, { type: i3.OrderFacade }]; } });
//# sourceMappingURL=data:application/json;base64,