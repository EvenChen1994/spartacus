/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@spartacus/core";
/**
 * The presentational component of a pair of radio buttons for pickup options for a product.
 */
export class PickupOptionsComponent {
    constructor() {
        // /** Disable Radio Buttons */
        this.disableControls = false;
        /** Emitted when the selected option is changed. */
        this.pickupOptionChange = new EventEmitter();
        /** Emitted when a new store should be selected. */
        this.pickupLocationChange = new EventEmitter();
        this.pickupId = `pickup-id:${Math.random().toString(16)}`;
        this.deliveryId = `delivery-id:${Math.random().toString(16)}`;
        this.pickupOptionsForm = new FormGroup({
            pickupOption: new FormControl(null),
        });
    }
    ngOnChanges() {
        if (this.disableControls) {
            this.pickupOptionsForm.get('pickupOption')?.disable();
        }
        this.pickupOptionsForm.markAllAsTouched();
        this.pickupOptionsForm.get('pickupOption')?.setValue(this.selectedOption);
    }
    /** Emit a new selected option. */
    onPickupOptionChange(option) {
        this.pickupOptionChange.emit(option);
    }
    /** Emit to indicate a new store should be selected. */
    onPickupLocationChange() {
        this.pickupLocationChange.emit();
        // Return false to stop `onPickupOptionChange` being called after this
        return false;
    }
}
PickupOptionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PickupOptionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PickupOptionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PickupOptionsComponent, selector: "cx-pickup-options", inputs: { selectedOption: "selectedOption", displayPickupLocation: "displayPickupLocation", disableControls: "disableControls" }, outputs: { pickupOptionChange: "pickupOptionChange", pickupLocationChange: "pickupLocationChange" }, usesOnChanges: true, ngImport: i0, template: "<form [formGroup]=\"pickupOptionsForm\">\n  <div class=\"form-check\">\n    <input\n      type=\"radio\"\n      role=\"radio\"\n      [attr.id]=\"deliveryId\"\n      data-pickup=\"delivery\"\n      value=\"delivery\"\n      (click)=\"onPickupOptionChange('delivery')\"\n      formControlName=\"pickupOption\"\n      [attr.aria-label]=\"'pickupOptions.delivery' | cxTranslate\"\n      [attr.aria-checked]=\"pickupOptionsForm.value.pickupOption === 'delivery'\"\n    />\n    <label [attr.for]=\"deliveryId\">\n      {{ 'pickupOptions.delivery' | cxTranslate }}\n    </label>\n  </div>\n  <div class=\"form-check\">\n    <input\n      type=\"radio\"\n      role=\"radio\"\n      [attr.id]=\"pickupId\"\n      data-pickup=\"pickup\"\n      value=\"pickup\"\n      (click)=\"onPickupOptionChange('pickup')\"\n      formControlName=\"pickupOption\"\n      [attr.aria-label]=\"'pickupOptions.pickup' | cxTranslate\"\n      [attr.aria-checked]=\"pickupOptionsForm.value.pickupOption === 'pickup'\"\n    />\n    <label [attr.for]=\"pickupId\">\n      <p>\n        {{ 'pickupOptions.pickup' | cxTranslate\n        }}<ng-container *ngIf=\"displayPickupLocation\"\n          >:\n          <strong [attr.data-pickup-location]=\"displayPickupLocation\">{{\n            displayPickupLocation\n          }}</strong>\n        </ng-container>\n        |\n        <a\n          role=\"button\"\n          [attr.data-store-location-link]=\"\n            displayPickupLocation ? 'change' : 'select'\n          \"\n          class=\"cx-action-link\"\n          (click)=\"onPickupLocationChange()\"\n          tabindex=\"0\"\n          >{{\n            (displayPickupLocation\n              ? 'pickupOptions.changeStore'\n              : 'pickupOptions.selectStore'\n            ) | cxTranslate\n          }}</a\n        >\n      </p>\n    </label>\n  </div>\n</form>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PickupOptionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-pickup-options', template: "<form [formGroup]=\"pickupOptionsForm\">\n  <div class=\"form-check\">\n    <input\n      type=\"radio\"\n      role=\"radio\"\n      [attr.id]=\"deliveryId\"\n      data-pickup=\"delivery\"\n      value=\"delivery\"\n      (click)=\"onPickupOptionChange('delivery')\"\n      formControlName=\"pickupOption\"\n      [attr.aria-label]=\"'pickupOptions.delivery' | cxTranslate\"\n      [attr.aria-checked]=\"pickupOptionsForm.value.pickupOption === 'delivery'\"\n    />\n    <label [attr.for]=\"deliveryId\">\n      {{ 'pickupOptions.delivery' | cxTranslate }}\n    </label>\n  </div>\n  <div class=\"form-check\">\n    <input\n      type=\"radio\"\n      role=\"radio\"\n      [attr.id]=\"pickupId\"\n      data-pickup=\"pickup\"\n      value=\"pickup\"\n      (click)=\"onPickupOptionChange('pickup')\"\n      formControlName=\"pickupOption\"\n      [attr.aria-label]=\"'pickupOptions.pickup' | cxTranslate\"\n      [attr.aria-checked]=\"pickupOptionsForm.value.pickupOption === 'pickup'\"\n    />\n    <label [attr.for]=\"pickupId\">\n      <p>\n        {{ 'pickupOptions.pickup' | cxTranslate\n        }}<ng-container *ngIf=\"displayPickupLocation\"\n          >:\n          <strong [attr.data-pickup-location]=\"displayPickupLocation\">{{\n            displayPickupLocation\n          }}</strong>\n        </ng-container>\n        |\n        <a\n          role=\"button\"\n          [attr.data-store-location-link]=\"\n            displayPickupLocation ? 'change' : 'select'\n          \"\n          class=\"cx-action-link\"\n          (click)=\"onPickupLocationChange()\"\n          tabindex=\"0\"\n          >{{\n            (displayPickupLocation\n              ? 'pickupOptions.changeStore'\n              : 'pickupOptions.selectStore'\n            ) | cxTranslate\n          }}</a\n        >\n      </p>\n    </label>\n  </div>\n</form>\n" }]
        }], propDecorators: { selectedOption: [{
                type: Input
            }], displayPickupLocation: [{
                type: Input
            }], disableControls: [{
                type: Input
            }], pickupOptionChange: [{
                type: Output
            }], pickupLocationChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlja3VwLW9wdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3BpY2t1cC1pbi1zdG9yZS9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL3BpY2t1cC1vcHRpb25zL3BpY2t1cC1vcHRpb25zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9waWNrdXAtaW4tc3RvcmUvY29tcG9uZW50cy9wcmVzZW50YXRpb25hbC9waWNrdXAtb3B0aW9ucy9waWNrdXAtb3B0aW9ucy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUd4RDs7R0FFRztBQUtILE1BQU0sT0FBTyxzQkFBc0I7SUFKbkM7UUFVRSwrQkFBK0I7UUFDdEIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFFakMsbURBQW1EO1FBQ3pDLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO1FBQ2hFLG1EQUFtRDtRQUN6Qyx5QkFBb0IsR0FBRyxJQUFJLFlBQVksRUFBYSxDQUFDO1FBRS9ELGFBQVEsR0FBRyxhQUFhLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNyRCxlQUFVLEdBQUcsZUFBZSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFFekQsc0JBQWlCLEdBQUcsSUFBSSxTQUFTLENBQUM7WUFDaEMsWUFBWSxFQUFFLElBQUksV0FBVyxDQUFzQixJQUFJLENBQUM7U0FDekQsQ0FBQyxDQUFDO0tBcUJKO0lBbkJDLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUN2RDtRQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsa0NBQWtDO0lBQ2xDLG9CQUFvQixDQUFDLE1BQW9CO1FBQ3ZDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELHVEQUF1RDtJQUN2RCxzQkFBc0I7UUFDcEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pDLHNFQUFzRTtRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O21IQXZDVSxzQkFBc0I7dUdBQXRCLHNCQUFzQixxVEN2Qm5DLHd6REEwREE7MkZEbkNhLHNCQUFzQjtrQkFKbEMsU0FBUzsrQkFDRSxtQkFBbUI7OEJBS3BCLGNBQWM7c0JBQXRCLEtBQUs7Z0JBRUcscUJBQXFCO3NCQUE3QixLQUFLO2dCQUdHLGVBQWU7c0JBQXZCLEtBQUs7Z0JBR0ksa0JBQWtCO3NCQUEzQixNQUFNO2dCQUVHLG9CQUFvQjtzQkFBN0IsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFBpY2t1cE9wdGlvbiB9IGZyb20gJ0BzcGFydGFjdXMvcGlja3VwLWluLXN0b3JlL3Jvb3QnO1xuXG4vKipcbiAqIFRoZSBwcmVzZW50YXRpb25hbCBjb21wb25lbnQgb2YgYSBwYWlyIG9mIHJhZGlvIGJ1dHRvbnMgZm9yIHBpY2t1cCBvcHRpb25zIGZvciBhIHByb2R1Y3QuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXBpY2t1cC1vcHRpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BpY2t1cC1vcHRpb25zLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgUGlja3VwT3B0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIC8qKiBUaGUgc2VsZWN0ZWQgb3B0aW9uLCBlaXRoZXIgYCdwaWNrdXAnYCBvciBgJ2RlbGl2ZXJ5J2AuICovXG4gIEBJbnB1dCgpIHNlbGVjdGVkT3B0aW9uOiBQaWNrdXBPcHRpb247XG4gIC8qKiBUaGUgbG9jYXRpb24gdG8gZGlzcGxheSBpbiB0aGUgcGlja3VwIG9wdGlvbi4gKi9cbiAgQElucHV0KCkgZGlzcGxheVBpY2t1cExvY2F0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLy8gLyoqIERpc2FibGUgUmFkaW8gQnV0dG9ucyAqL1xuICBASW5wdXQoKSBkaXNhYmxlQ29udHJvbHMgPSBmYWxzZTtcblxuICAvKiogRW1pdHRlZCB3aGVuIHRoZSBzZWxlY3RlZCBvcHRpb24gaXMgY2hhbmdlZC4gKi9cbiAgQE91dHB1dCgpIHBpY2t1cE9wdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8UGlja3VwT3B0aW9uPigpO1xuICAvKiogRW1pdHRlZCB3aGVuIGEgbmV3IHN0b3JlIHNob3VsZCBiZSBzZWxlY3RlZC4gKi9cbiAgQE91dHB1dCgpIHBpY2t1cExvY2F0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx1bmRlZmluZWQ+KCk7XG5cbiAgcGlja3VwSWQgPSBgcGlja3VwLWlkOiR7TWF0aC5yYW5kb20oKS50b1N0cmluZygxNil9YDtcbiAgZGVsaXZlcnlJZCA9IGBkZWxpdmVyeS1pZDoke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpfWA7XG5cbiAgcGlja3VwT3B0aW9uc0Zvcm0gPSBuZXcgRm9ybUdyb3VwKHtcbiAgICBwaWNrdXBPcHRpb246IG5ldyBGb3JtQ29udHJvbDxQaWNrdXBPcHRpb24gfCBudWxsPihudWxsKSxcbiAgfSk7XG5cbiAgbmdPbkNoYW5nZXMoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZUNvbnRyb2xzKSB7XG4gICAgICB0aGlzLnBpY2t1cE9wdGlvbnNGb3JtLmdldCgncGlja3VwT3B0aW9uJyk/LmRpc2FibGUoKTtcbiAgICB9XG4gICAgdGhpcy5waWNrdXBPcHRpb25zRm9ybS5tYXJrQWxsQXNUb3VjaGVkKCk7XG4gICAgdGhpcy5waWNrdXBPcHRpb25zRm9ybS5nZXQoJ3BpY2t1cE9wdGlvbicpPy5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkT3B0aW9uKTtcbiAgfVxuXG4gIC8qKiBFbWl0IGEgbmV3IHNlbGVjdGVkIG9wdGlvbi4gKi9cbiAgb25QaWNrdXBPcHRpb25DaGFuZ2Uob3B0aW9uOiBQaWNrdXBPcHRpb24pOiB2b2lkIHtcbiAgICB0aGlzLnBpY2t1cE9wdGlvbkNoYW5nZS5lbWl0KG9wdGlvbik7XG4gIH1cblxuICAvKiogRW1pdCB0byBpbmRpY2F0ZSBhIG5ldyBzdG9yZSBzaG91bGQgYmUgc2VsZWN0ZWQuICovXG4gIG9uUGlja3VwTG9jYXRpb25DaGFuZ2UoKTogYm9vbGVhbiB7XG4gICAgdGhpcy5waWNrdXBMb2NhdGlvbkNoYW5nZS5lbWl0KCk7XG4gICAgLy8gUmV0dXJuIGZhbHNlIHRvIHN0b3AgYG9uUGlja3VwT3B0aW9uQ2hhbmdlYCBiZWluZyBjYWxsZWQgYWZ0ZXIgdGhpc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiPGZvcm0gW2Zvcm1Hcm91cF09XCJwaWNrdXBPcHRpb25zRm9ybVwiPlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgIDxpbnB1dFxuICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgIHJvbGU9XCJyYWRpb1wiXG4gICAgICBbYXR0ci5pZF09XCJkZWxpdmVyeUlkXCJcbiAgICAgIGRhdGEtcGlja3VwPVwiZGVsaXZlcnlcIlxuICAgICAgdmFsdWU9XCJkZWxpdmVyeVwiXG4gICAgICAoY2xpY2spPVwib25QaWNrdXBPcHRpb25DaGFuZ2UoJ2RlbGl2ZXJ5JylcIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwicGlja3VwT3B0aW9uXCJcbiAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiJ3BpY2t1cE9wdGlvbnMuZGVsaXZlcnknIHwgY3hUcmFuc2xhdGVcIlxuICAgICAgW2F0dHIuYXJpYS1jaGVja2VkXT1cInBpY2t1cE9wdGlvbnNGb3JtLnZhbHVlLnBpY2t1cE9wdGlvbiA9PT0gJ2RlbGl2ZXJ5J1wiXG4gICAgLz5cbiAgICA8bGFiZWwgW2F0dHIuZm9yXT1cImRlbGl2ZXJ5SWRcIj5cbiAgICAgIHt7ICdwaWNrdXBPcHRpb25zLmRlbGl2ZXJ5JyB8IGN4VHJhbnNsYXRlIH19XG4gICAgPC9sYWJlbD5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgPGlucHV0XG4gICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgcm9sZT1cInJhZGlvXCJcbiAgICAgIFthdHRyLmlkXT1cInBpY2t1cElkXCJcbiAgICAgIGRhdGEtcGlja3VwPVwicGlja3VwXCJcbiAgICAgIHZhbHVlPVwicGlja3VwXCJcbiAgICAgIChjbGljayk9XCJvblBpY2t1cE9wdGlvbkNoYW5nZSgncGlja3VwJylcIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwicGlja3VwT3B0aW9uXCJcbiAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiJ3BpY2t1cE9wdGlvbnMucGlja3VwJyB8IGN4VHJhbnNsYXRlXCJcbiAgICAgIFthdHRyLmFyaWEtY2hlY2tlZF09XCJwaWNrdXBPcHRpb25zRm9ybS52YWx1ZS5waWNrdXBPcHRpb24gPT09ICdwaWNrdXAnXCJcbiAgICAvPlxuICAgIDxsYWJlbCBbYXR0ci5mb3JdPVwicGlja3VwSWRcIj5cbiAgICAgIDxwPlxuICAgICAgICB7eyAncGlja3VwT3B0aW9ucy5waWNrdXAnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgfX08bmctY29udGFpbmVyICpuZ0lmPVwiZGlzcGxheVBpY2t1cExvY2F0aW9uXCJcbiAgICAgICAgICA+OlxuICAgICAgICAgIDxzdHJvbmcgW2F0dHIuZGF0YS1waWNrdXAtbG9jYXRpb25dPVwiZGlzcGxheVBpY2t1cExvY2F0aW9uXCI+e3tcbiAgICAgICAgICAgIGRpc3BsYXlQaWNrdXBMb2NhdGlvblxuICAgICAgICAgIH19PC9zdHJvbmc+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICB8XG4gICAgICAgIDxhXG4gICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgW2F0dHIuZGF0YS1zdG9yZS1sb2NhdGlvbi1saW5rXT1cIlxuICAgICAgICAgICAgZGlzcGxheVBpY2t1cExvY2F0aW9uID8gJ2NoYW5nZScgOiAnc2VsZWN0J1xuICAgICAgICAgIFwiXG4gICAgICAgICAgY2xhc3M9XCJjeC1hY3Rpb24tbGlua1wiXG4gICAgICAgICAgKGNsaWNrKT1cIm9uUGlja3VwTG9jYXRpb25DaGFuZ2UoKVwiXG4gICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICA+e3tcbiAgICAgICAgICAgIChkaXNwbGF5UGlja3VwTG9jYXRpb25cbiAgICAgICAgICAgICAgPyAncGlja3VwT3B0aW9ucy5jaGFuZ2VTdG9yZSdcbiAgICAgICAgICAgICAgOiAncGlja3VwT3B0aW9ucy5zZWxlY3RTdG9yZSdcbiAgICAgICAgICAgICkgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgIH19PC9hXG4gICAgICAgID5cbiAgICAgIDwvcD5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbjwvZm9ybT5cbiJdfQ==