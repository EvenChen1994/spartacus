/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Optional, ViewChild, } from '@angular/core';
import { CartType, } from '@spartacus/cart/base/root';
import { cartWithIdAndUserId, getProperty, } from '@spartacus/pickup-in-store/root';
import { EMPTY, iif, of, Subscription } from 'rxjs';
import { concatMap, filter, map, startWith, switchMap, take, tap, withLatestFrom, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/cart/base/root";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@spartacus/pickup-in-store/root";
import * as i4 from "@spartacus/core";
import * as i5 from "@angular/common";
import * as i6 from "../../presentational/pickup-options/pickup-options.component";
/** Custom type guard to ensure we have an order entry with all the required fields */
export function orderEntryWithRequiredFields(orderEntry) {
    return (!!orderEntry &&
        orderEntry.entryNumber !== undefined &&
        orderEntry.quantity !== undefined &&
        orderEntry.product !== undefined &&
        orderEntry.product.code !== undefined &&
        orderEntry.product.availableForPickup !== undefined);
}
/**
 * A container component of the pair of the pickup options radio buttons for cart entry.
 */
export class CartPickupOptionsContainerComponent {
    constructor(activeCartFacade, launchDialogService, pickupLocationsSearchService, pickupOptionFacade, preferredStoreFacade, vcr, cmsService, intendedPickupLocationService, outlet) {
        this.activeCartFacade = activeCartFacade;
        this.launchDialogService = launchDialogService;
        this.pickupLocationsSearchService = pickupLocationsSearchService;
        this.pickupOptionFacade = pickupOptionFacade;
        this.preferredStoreFacade = preferredStoreFacade;
        this.vcr = vcr;
        this.cmsService = cmsService;
        this.intendedPickupLocationService = intendedPickupLocationService;
        this.outlet = outlet;
        this.subscription = new Subscription();
        this.displayNameIsSet = false;
        this.CartType = CartType;
        // Intentional empty constructor
    }
    ngOnInit() {
        const outletContext = this.outlet?.context$?.pipe(map((context) => {
            this.cartType = context.cartType;
            return context.item;
        }), filter(orderEntryWithRequiredFields)) ?? EMPTY;
        this.cmsService
            .getCurrentPage()
            .pipe(filter(Boolean), take(1), tap((cmsPage) => {
            this.page = cmsPage.pageId;
            this.pickupOptionFacade.setPageContext(cmsPage.pageId ?? '');
        }))
            .subscribe();
        this.availableForPickup$ = outletContext.pipe(map((orderEntry) => !!orderEntry.product.availableForPickup), startWith(false));
        this.pickupOption$ = outletContext.pipe(withLatestFrom(this.activeCartFacade.getActive().pipe(filter(cartWithIdAndUserId))), tap(([orderEntry, cart]) => {
            this.entryNumber = orderEntry.entryNumber;
            this.quantity = orderEntry.quantity;
            this.productCode = orderEntry.product.code;
            this.cartId = cart.user.uid === 'anonymous' ? cart.guid : cart.code;
            this.userId = cart.user.uid;
        }), switchMap(([orderEntry]) => {
            const pickupOption = orderEntry.deliveryPointOfService
                ? 'pickup'
                : 'delivery';
            this.pickupOptionFacade.setPickupOption(this.entryNumber, pickupOption);
            return this.pickupOptionFacade.getPickupOption(this.entryNumber);
        }));
        this.disableControls$ = this.activeCartFacade.getEntries().pipe(map((entries) => entries.map((entry) => entry.product?.code)), switchMap((productCodes) => outletContext.pipe(map((orderEntry) => orderEntry?.product.code), map((orderEntry) => productCodes.filter((productCode) => productCode === orderEntry)
            .length > 1))));
        this.storeDetails$ = outletContext.pipe(map((orderEntry) => ({
            storeName: orderEntry.deliveryPointOfService?.name,
            productCode: orderEntry.product.code,
        })), switchMap(({ storeName, productCode }) => iif(() => !!storeName, of(storeName).pipe(tap((_storeName) => {
            return this.pickupLocationsSearchService.loadStoreDetails(_storeName);
        }), concatMap((_storeName) => this.pickupLocationsSearchService.getStoreDetails(_storeName)), filter((storeDetails) => !!storeDetails), tap((storeDetails) => {
            this.intendedPickupLocationService.setIntendedLocation(productCode, {
                ...storeDetails,
                pickupOption: 'pickup',
            });
        })), this.intendedPickupLocationService
            .getIntendedLocation(productCode)
            .pipe(map((intendedLocation) => ({
            intendedLocation,
            givenProductCode: productCode,
        })), switchMap(({ intendedLocation, givenProductCode }) => iif(() => !!intendedLocation && !!intendedLocation.displayName, of({
            displayName: getProperty(intendedLocation, 'displayName'),
            name: getProperty(intendedLocation, 'name'),
        }), this.preferredStoreFacade
            .getPreferredStoreWithProductInStock(productCode)
            .pipe(map(({ name }) => name), tap((_storeName) => this.pickupLocationsSearchService.loadStoreDetails(_storeName)), concatMap((_storeName) => this.pickupLocationsSearchService.getStoreDetails(_storeName)), filter((storeDetails) => !!storeDetails), tap((storeDetails) => {
            this.intendedPickupLocationService.setIntendedLocation(givenProductCode, {
                ...storeDetails,
                pickupOption: 'delivery',
            });
        }))))))), map(({ displayName, name }) => ({ displayName, name })), tap((_) => (this.displayNameIsSet = true)));
    }
    onPickupOptionChange(pickupOption) {
        this.pickupOptionFacade.setPickupOption(this.entryNumber, pickupOption);
        if (pickupOption === 'delivery') {
            this.activeCartFacade.updateEntry(this.entryNumber, this.quantity, undefined, true);
            return;
        }
        [pickupOption]
            .filter((option) => option === 'pickup')
            .forEach(() => {
            this.subscription.add(this.storeDetails$
                .pipe(filter(({ name }) => !!name), tap(({ name }) => this.activeCartFacade.updateEntry(this.entryNumber, this.quantity, name, true)))
                .subscribe());
        });
        if (!this.displayNameIsSet) {
            this.openDialog();
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    openDialog() {
        const dialog = this.launchDialogService.openDialog("PICKUP_IN_STORE" /* LAUNCH_CALLER.PICKUP_IN_STORE */, this.element, this.vcr, {
            productCode: this.productCode,
            entryNumber: this.entryNumber,
            quantity: this.quantity,
        });
        if (dialog) {
            dialog.pipe(take(1)).subscribe();
        }
    }
}
CartPickupOptionsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CartPickupOptionsContainerComponent, deps: [{ token: i1.ActiveCartFacade }, { token: i2.LaunchDialogService }, { token: i3.PickupLocationsSearchFacade }, { token: i3.PickupOptionFacade }, { token: i3.PreferredStoreFacade }, { token: i0.ViewContainerRef }, { token: i4.CmsService }, { token: i3.IntendedPickupLocationFacade }, { token: i2.OutletContextData, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CartPickupOptionsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: CartPickupOptionsContainerComponent, selector: "cx-cart-pickup-options-container", viewQueries: [{ propertyName: "element", first: true, predicate: ["open"], descendants: true }], ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    (availableForPickup$ | async) &&\n    !(outlet?.context$ | async)?.orderCode &&\n    !(this.cartType === CartType.SELECTIVE)\n  \"\n>\n  <cx-pickup-options\n    [disableControls]=\"disableControls$ | async\"\n    [displayPickupLocation]=\"(storeDetails$ | async)?.displayName\"\n    [selectedOption]=\"pickupOption$ | async\"\n    (pickupOptionChange)=\"onPickupOptionChange($event)\"\n    (pickupLocationChange)=\"openDialog()\"\n  ></cx-pickup-options>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.PickupOptionsComponent, selector: "cx-pickup-options", inputs: ["selectedOption", "displayPickupLocation", "disableControls"], outputs: ["pickupOptionChange", "pickupLocationChange"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CartPickupOptionsContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-cart-pickup-options-container', template: "<ng-container\n  *ngIf=\"\n    (availableForPickup$ | async) &&\n    !(outlet?.context$ | async)?.orderCode &&\n    !(this.cartType === CartType.SELECTIVE)\n  \"\n>\n  <cx-pickup-options\n    [disableControls]=\"disableControls$ | async\"\n    [displayPickupLocation]=\"(storeDetails$ | async)?.displayName\"\n    [selectedOption]=\"pickupOption$ | async\"\n    (pickupOptionChange)=\"onPickupOptionChange($event)\"\n    (pickupLocationChange)=\"openDialog()\"\n  ></cx-pickup-options>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ActiveCartFacade }, { type: i2.LaunchDialogService }, { type: i3.PickupLocationsSearchFacade }, { type: i3.PickupOptionFacade }, { type: i3.PreferredStoreFacade }, { type: i0.ViewContainerRef }, { type: i4.CmsService }, { type: i3.IntendedPickupLocationFacade }, { type: i2.OutletContextData, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { element: [{
                type: ViewChild,
                args: ['open']
            }] } });
//# sourceMappingURL=data:application/json;base64,