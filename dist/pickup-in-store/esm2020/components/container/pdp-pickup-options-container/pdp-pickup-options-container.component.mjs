/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, ViewChild, } from '@angular/core';
import { getProperty, } from '@spartacus/pickup-in-store/root';
import { combineLatest, iif, of, Subscription } from 'rxjs';
import { concatMap, filter, map, startWith, switchMap, take, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/pickup-in-store/root";
import * as i3 from "@angular/common";
import * as i4 from "../../presentational/pickup-options/pickup-options.component";
/** Custom type guard to ensure we have a product a defined code */
function isProductWithCode(product) {
    return !!product?.code;
}
/**
 * A container component of the pair of the pickup options radio buttons for cart entry.
 */
export class PdpPickupOptionsContainerComponent {
    constructor(currentProductService, intendedPickupLocationService, launchDialogService, pickupOptionFacade, preferredStoreFacade, pickupLocationsSearchService, vcr) {
        this.currentProductService = currentProductService;
        this.intendedPickupLocationService = intendedPickupLocationService;
        this.launchDialogService = launchDialogService;
        this.pickupOptionFacade = pickupOptionFacade;
        this.preferredStoreFacade = preferredStoreFacade;
        this.pickupLocationsSearchService = pickupLocationsSearchService;
        this.vcr = vcr;
        this.subscription = new Subscription();
        this.availableForPickup = false;
        this.displayNameIsSet = false;
        // Intentional empty constructor
    }
    ngOnInit() {
        this.pickupOptionFacade.setPageContext('PDP');
        const productCode$ = this.currentProductService.getProduct().pipe(filter(isProductWithCode), map((product) => {
            this.productCode = product.code;
            this.availableForPickup = !!product.availableForPickup;
            return this.productCode;
        }), tap((productCode) => (this.pickupOption$ =
            this.intendedPickupLocationService.getPickupOption(productCode))));
        this.displayPickupLocation$ = this.currentProductService.getProduct().pipe(filter(isProductWithCode), map((product) => product.code), switchMap((productCode) => this.intendedPickupLocationService
            .getIntendedLocation(productCode)
            .pipe(map((intendedLocation) => ({ intendedLocation, productCode })))), switchMap(({ intendedLocation, productCode }) => iif(() => !!intendedLocation && !!intendedLocation.displayName, of(getProperty(intendedLocation, 'displayName')), this.preferredStoreFacade
            .getPreferredStoreWithProductInStock(productCode)
            .pipe(map(({ name }) => name), tap((storeName) => this.pickupLocationsSearchService.loadStoreDetails(storeName)), concatMap((storeName) => this.pickupLocationsSearchService.getStoreDetails(storeName)), filter((storeDetails) => !!storeDetails), tap((storeDetails) => {
            this.intendedPickupLocationService.setIntendedLocation(productCode, {
                ...storeDetails,
                pickupOption: 'delivery',
            });
        })))), tap(() => (this.displayNameIsSet = true)));
        this.intendedPickupLocation$ = this.currentProductService.getProduct().pipe(filter(isProductWithCode), map((product) => product.code), switchMap((productCode) => this.intendedPickupLocationService.getIntendedLocation(productCode)));
        this.subscription.add(combineLatest([
            productCode$,
            this.launchDialogService.dialogClose.pipe(filter((reason) => reason !== undefined), startWith(undefined)),
        ])
            .pipe(switchMap(([productCode]) => this.intendedPickupLocationService.getIntendedLocation(productCode)))
            .subscribe());
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    openDialog() {
        const dialog = this.launchDialogService.openDialog("PICKUP_IN_STORE" /* LAUNCH_CALLER.PICKUP_IN_STORE */, this.element, this.vcr, { productCode: this.productCode });
        if (dialog) {
            dialog.pipe(take(1)).subscribe();
        }
    }
    onPickupOptionChange(option) {
        this.intendedPickupLocationService.setPickupOption(this.productCode, option);
        if (option === 'delivery') {
            return;
        }
        if (!this.displayNameIsSet) {
            this.openDialog();
        }
    }
}
PdpPickupOptionsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PdpPickupOptionsContainerComponent, deps: [{ token: i1.CurrentProductService }, { token: i2.IntendedPickupLocationFacade }, { token: i1.LaunchDialogService }, { token: i2.PickupOptionFacade }, { token: i2.PreferredStoreFacade }, { token: i2.PickupLocationsSearchFacade }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
PdpPickupOptionsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PdpPickupOptionsContainerComponent, selector: "cx-cart-pickup-options-container", viewQueries: [{ propertyName: "element", first: true, predicate: ["open"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"availableForPickup\">\n  <cx-pickup-options\n    [selectedOption]=\"pickupOption$ | async\"\n    [displayPickupLocation]=\"displayPickupLocation$ | async\"\n    (pickupOptionChange)=\"onPickupOptionChange($event)\"\n    (pickupLocationChange)=\"openDialog()\"\n  ></cx-pickup-options>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.PickupOptionsComponent, selector: "cx-pickup-options", inputs: ["selectedOption", "displayPickupLocation", "disableControls"], outputs: ["pickupOptionChange", "pickupLocationChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PdpPickupOptionsContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-cart-pickup-options-container', template: "<ng-container *ngIf=\"availableForPickup\">\n  <cx-pickup-options\n    [selectedOption]=\"pickupOption$ | async\"\n    [displayPickupLocation]=\"displayPickupLocation$ | async\"\n    (pickupOptionChange)=\"onPickupOptionChange($event)\"\n    (pickupLocationChange)=\"openDialog()\"\n  ></cx-pickup-options>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CurrentProductService }, { type: i2.IntendedPickupLocationFacade }, { type: i1.LaunchDialogService }, { type: i2.PickupOptionFacade }, { type: i2.PreferredStoreFacade }, { type: i2.PickupLocationsSearchFacade }, { type: i0.ViewContainerRef }]; }, propDecorators: { element: [{
                type: ViewChild,
                args: ['open']
            }] } });
//# sourceMappingURL=data:application/json;base64,