/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { of } from 'rxjs';
import { delay, distinctUntilChanged, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@spartacus/product-configurator/common";
import * as i3 from "../config/configurator-message.config";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class ConfiguratorUpdateMessageComponent {
    constructor(configuratorCommonsService, configRouterExtractorService, config) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.config = config;
        this.hasPendingChanges$ = this.configRouterExtractorService
            .extractRouterData()
            .pipe(switchMap((routerData) => this.configuratorCommonsService.hasPendingChanges(routerData.owner)), distinctUntilChanged(), // avoid subsequent emissions of the same value from the source observable
        switchMap((isLoading) => isLoading
            ? of(isLoading).pipe(delay(this.config.productConfigurator?.updateConfigurationMessage
                ?.waitingTime || 1000)) // delay information if it is loading
            : of(isLoading) // inform immediately if it's not loading anymore
        ));
    }
}
ConfiguratorUpdateMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorUpdateMessageComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorRouterExtractorService }, { token: i3.ConfiguratorMessageConfig }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorUpdateMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorUpdateMessageComponent, selector: "cx-configurator-update-message", ngImport: i0, template: "<div aria-live=\"polite\" aria-atomic=\"false\">\n  <div class=\"cx-update-msg\" [class.visible]=\"hasPendingChanges$ | async\">\n    <cx-spinner></cx-spinner>\n    <strong>{{ 'configurator.header.updateMessage' | cxTranslate }}</strong>\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i4.SpinnerComponent, selector: "cx-spinner" }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorUpdateMessageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-update-message', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div aria-live=\"polite\" aria-atomic=\"false\">\n  <div class=\"cx-update-msg\" [class.visible]=\"hasPendingChanges$ | async\">\n    <cx-spinner></cx-spinner>\n    <strong>{{ 'configurator.header.updateMessage' | cxTranslate }}</strong>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorRouterExtractorService }, { type: i3.ConfiguratorMessageConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdG9yLXVwZGF0ZS1tZXNzYWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9wcm9kdWN0LWNvbmZpZ3VyYXRvci9ydWxlYmFzZWQvY29tcG9uZW50cy91cGRhdGUtbWVzc2FnZS9jb25maWd1cmF0b3ItdXBkYXRlLW1lc3NhZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QtY29uZmlndXJhdG9yL3J1bGViYXNlZC9jb21wb25lbnRzL3VwZGF0ZS1tZXNzYWdlL2NvbmZpZ3VyYXRvci11cGRhdGUtbWVzc2FnZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxLQUFLLEVBQUUsb0JBQW9CLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7O0FBU3hFLE1BQU0sT0FBTyxrQ0FBa0M7SUFxQjdDLFlBQ1ksMEJBQXNELEVBQ3RELDRCQUFnRSxFQUNoRSxNQUFpQztRQUZqQywrQkFBMEIsR0FBMUIsMEJBQTBCLENBQTRCO1FBQ3RELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBb0M7UUFDaEUsV0FBTSxHQUFOLE1BQU0sQ0FBMkI7UUF2QjdDLHVCQUFrQixHQUF3QixJQUFJLENBQUMsNEJBQTRCO2FBQ3hFLGlCQUFpQixFQUFFO2FBQ25CLElBQUksQ0FDSCxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUN2QixJQUFJLENBQUMsMEJBQTBCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUNwRSxFQUNELG9CQUFvQixFQUFFLEVBQUUsMEVBQTBFO1FBQ2xHLFNBQVMsQ0FDUCxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQ1osU0FBUztZQUNQLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUNoQixLQUFLLENBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSwwQkFBMEI7Z0JBQ3pELEVBQUUsV0FBVyxJQUFJLElBQUksQ0FDeEIsQ0FDRixDQUFDLHFDQUFxQztZQUN6QyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGlEQUFpRDtTQUN0RSxDQUNGLENBQUM7SUFNRCxDQUFDOzsrSEF6Qk8sa0NBQWtDO21IQUFsQyxrQ0FBa0Msc0VDbEIvQyxtUUFNQTsyRkRZYSxrQ0FBa0M7a0JBTDlDLFNBQVM7K0JBQ0UsZ0NBQWdDLG1CQUV6Qix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlndXJhdG9yUm91dGVyRXh0cmFjdG9yU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvcHJvZHVjdC1jb25maWd1cmF0b3IvY29tbW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWxheSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvbmZpZ3VyYXRvckNvbW1vbnNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9mYWNhZGUvY29uZmlndXJhdG9yLWNvbW1vbnMuc2VydmljZSc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3JNZXNzYWdlQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZ3VyYXRvci1tZXNzYWdlLmNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LWNvbmZpZ3VyYXRvci11cGRhdGUtbWVzc2FnZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb25maWd1cmF0b3ItdXBkYXRlLW1lc3NhZ2UuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdG9yVXBkYXRlTWVzc2FnZUNvbXBvbmVudCB7XG4gIGhhc1BlbmRpbmdDaGFuZ2VzJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuY29uZmlnUm91dGVyRXh0cmFjdG9yU2VydmljZVxuICAgIC5leHRyYWN0Um91dGVyRGF0YSgpXG4gICAgLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHJvdXRlckRhdGEpID0+XG4gICAgICAgIHRoaXMuY29uZmlndXJhdG9yQ29tbW9uc1NlcnZpY2UuaGFzUGVuZGluZ0NoYW5nZXMocm91dGVyRGF0YS5vd25lcilcbiAgICAgICksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCAvLyBhdm9pZCBzdWJzZXF1ZW50IGVtaXNzaW9ucyBvZiB0aGUgc2FtZSB2YWx1ZSBmcm9tIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZVxuICAgICAgc3dpdGNoTWFwKFxuICAgICAgICAoaXNMb2FkaW5nKSA9PlxuICAgICAgICAgIGlzTG9hZGluZ1xuICAgICAgICAgICAgPyBvZihpc0xvYWRpbmcpLnBpcGUoXG4gICAgICAgICAgICAgICAgZGVsYXkoXG4gICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5wcm9kdWN0Q29uZmlndXJhdG9yPy51cGRhdGVDb25maWd1cmF0aW9uTWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICA/LndhaXRpbmdUaW1lIHx8IDEwMDBcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgLy8gZGVsYXkgaW5mb3JtYXRpb24gaWYgaXQgaXMgbG9hZGluZ1xuICAgICAgICAgICAgOiBvZihpc0xvYWRpbmcpIC8vIGluZm9ybSBpbW1lZGlhdGVseSBpZiBpdCdzIG5vdCBsb2FkaW5nIGFueW1vcmVcbiAgICAgIClcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjb25maWd1cmF0b3JDb21tb25zU2VydmljZTogQ29uZmlndXJhdG9yQ29tbW9uc1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbmZpZ1JvdXRlckV4dHJhY3RvclNlcnZpY2U6IENvbmZpZ3VyYXRvclJvdXRlckV4dHJhY3RvclNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogQ29uZmlndXJhdG9yTWVzc2FnZUNvbmZpZ1xuICApIHt9XG59XG4iLCI8ZGl2IGFyaWEtbGl2ZT1cInBvbGl0ZVwiIGFyaWEtYXRvbWljPVwiZmFsc2VcIj5cbiAgPGRpdiBjbGFzcz1cImN4LXVwZGF0ZS1tc2dcIiBbY2xhc3MudmlzaWJsZV09XCJoYXNQZW5kaW5nQ2hhbmdlcyQgfCBhc3luY1wiPlxuICAgIDxjeC1zcGlubmVyPjwvY3gtc3Bpbm5lcj5cbiAgICA8c3Ryb25nPnt7ICdjb25maWd1cmF0b3IuaGVhZGVyLnVwZGF0ZU1lc3NhZ2UnIHwgY3hUcmFuc2xhdGUgfX08L3N0cm9uZz5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==