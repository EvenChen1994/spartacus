/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { GlobalMessageType, } from '@spartacus/core';
import { CommonConfigurator, ConfiguratorModelUtils, ConfiguratorRouter, } from '@spartacus/product-configurator/common';
import { ICON_TYPE, } from '@spartacus/storefront';
import { of, Subscription } from 'rxjs';
import { delay, distinctUntilChanged, filter, map, switchMap, take, } from 'rxjs/operators';
import { UntypedFormControl } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../core/facade/configurator-commons.service";
import * as i3 from "../../core/facade/configurator-cart.service";
import * as i4 from "../../core/facade/configurator-groups.service";
import * as i5 from "@spartacus/product-configurator/common";
import * as i6 from "@spartacus/order/root";
import * as i7 from "../service/configurator-storefront-utils.service";
import * as i8 from "@spartacus/storefront";
import * as i9 from "../../core/services/configurator-quantity.service";
import * as i10 from "@angular/common";
const CX_SELECTOR = 'cx-configurator-add-to-cart-button';
export class ConfiguratorAddToCartButtonComponent {
    constructor(routingService, configuratorCommonsService, configuratorCartService, configuratorGroupsService, configRouterExtractorService, globalMessageService, orderHistoryFacade, commonConfiguratorUtilsService, configUtils, intersectionService, configuratorQuantityService) {
        this.routingService = routingService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorCartService = configuratorCartService;
        this.configuratorGroupsService = configuratorGroupsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.globalMessageService = globalMessageService;
        this.orderHistoryFacade = orderHistoryFacade;
        this.commonConfiguratorUtilsService = commonConfiguratorUtilsService;
        this.configUtils = configUtils;
        this.intersectionService = intersectionService;
        this.configuratorQuantityService = configuratorQuantityService;
        this.subscription = new Subscription();
        this.quantityControl = new UntypedFormControl(1);
        this.iconType = ICON_TYPE;
        this.container$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService
            .getConfiguration(routerData.owner)
            .pipe(map((configuration) => ({ routerData, configuration })))
            .pipe(switchMap((cont) => this.configuratorCommonsService
            .hasPendingChanges(cont.configuration.owner)
            .pipe(map((hasPendingChanges) => ({
            routerData: cont.routerData,
            configuration: cont.configuration,
            hasPendingChanges,
        })))))));
    }
    ngOnInit() {
        this.makeAddToCartButtonSticky();
        if (this.configuratorQuantityService) {
            this.configuratorQuantityService
                .getQuantity()
                .pipe(take(1))
                .subscribe((quantity) => {
                this.quantityControl.setValue(quantity);
            });
        }
        this.subscription.add(this.quantityControl.valueChanges
            .pipe(distinctUntilChanged())
            .subscribe(() => this.configuratorQuantityService?.setQuantity(this.quantityControl.value)));
    }
    navigateToCart() {
        this.routingService.go('cart');
    }
    navigateToOverview(configuratorType, owner) {
        this.routingService.go({
            cxRoute: 'configureOverview' + configuratorType,
            params: { ownerType: 'cartEntry', entityKey: owner.id },
        });
    }
    displayConfirmationMessage(key) {
        this.globalMessageService.add({ key: key }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
    }
    /**
     * Performs the navigation to the corresponding location (cart or overview pages).
     *
     * @param {string} configuratorType - Configurator type
     * @param {CommonConfigurator.Owner} owner - Owner
     * @param {boolean} isAdd - Is add to cart
     * @param {boolean} isOverview - Is overview page
     * @param {boolean} showMessage - Show message
     */
    performNavigation(configuratorType, owner, isAdd, isOverview, showMessage) {
        const messageKey = isAdd
            ? 'configurator.addToCart.confirmation'
            : 'configurator.addToCart.confirmationUpdate';
        if (isOverview) {
            this.navigateToCart();
        }
        else {
            this.navigateToOverview(configuratorType, owner);
        }
        if (showMessage) {
            this.displayConfirmationMessage(messageKey);
        }
    }
    /**
     * Decides on the resource key for the button. Depending on the business process (owner of the configuration) and the
     * need for a cart update, the text will differ.
     *
     * @param {ConfiguratorRouter.Data} routerData - Reflects the current router state
     * @param {Configurator.Configuration} configuration - Configuration
     * @returns {string} The resource key that controls the button description
     */
    getButtonResourceKey(routerData, configuration) {
        if (routerData.isOwnerCartEntry &&
            configuration.isCartEntryUpdateRequired) {
            return 'configurator.addToCart.buttonUpdateCart';
        }
        else if (routerData.isOwnerCartEntry &&
            !configuration.isCartEntryUpdateRequired) {
            return 'configurator.addToCart.buttonAfterAddToCart';
        }
        else {
            return 'configurator.addToCart.button';
        }
    }
    /**
     * Verifies whether it is a cart entry.
     *
     * @param {ConfiguratorRouter.Data} routerData - Reflects the current router state
     * @returns {boolean} - 'true' if it is a cart entry, otherwise 'false'
     */
    isCartEntry(routerData) {
        return routerData.isOwnerCartEntry ? routerData.isOwnerCartEntry : false;
    }
    /**
     * Triggers action and navigation, both depending on the context. Might result in an addToCart, updateCartEntry,
     * just a cart navigation or a browser back navigation
     * @param {Configurator.Configuration} configuration - Configuration
     * @param {ConfiguratorRouter.Data} routerData - Reflects the current router state
     */
    onAddToCart(configuration, routerData) {
        const pageType = routerData.pageType;
        const configuratorType = configuration.owner.configuratorType;
        const isOverview = pageType === ConfiguratorRouter.PageType.OVERVIEW;
        const isOwnerCartEntry = routerData.owner.type === CommonConfigurator.OwnerType.CART_ENTRY;
        const owner = configuration.owner;
        const currentGroup = configuration.interactionState.currentGroup;
        if (currentGroup) {
            this.configuratorGroupsService.setGroupStatusVisited(configuration.owner, currentGroup);
        }
        this.container$
            .pipe(filter((cont) => !cont.hasPendingChanges), take(1))
            .subscribe(() => {
            if (isOwnerCartEntry) {
                this.onUpdateCart(configuration, configuratorType, owner, isOverview);
            }
            else {
                this.onAddToCartForProduct(owner, configuration, configuratorType, isOverview);
            }
        });
    }
    onAddToCartForProduct(owner, configuration, configuratorType, isOverview) {
        const quantity = this.quantityControl.value;
        this.configuratorCartService.addToCart(owner.id, configuration.configId, owner, quantity);
        this.configuratorCommonsService
            .getConfiguration(owner)
            .pipe(filter((configWithNextOwner) => configWithNextOwner.nextOwner !== undefined), take(1))
            .subscribe((configWithNextOwner) => {
            //See preceding filter operator: configWithNextOwner.nextOwner is always defined here
            this.navigateForProductBound(configWithNextOwner, configuratorType, isOverview);
        });
    }
    navigateForProductBound(configWithNextOwner, configuratorType, isOverview) {
        const nextOwner = configWithNextOwner.nextOwner ??
            ConfiguratorModelUtils.createInitialOwner();
        this.performNavigation(configuratorType, nextOwner, true, isOverview, true);
        // we clean up the cart entry related configuration, as we might have a
        // configuration for the same cart entry number stored already.
        // (Cart entries might have been deleted)
        // Needs to happen only if we are on configuration page, navigation to
        // cart will anyhow delete.
        // We do not clean up the product bound configuration yet, as existing
        // observables would instantly trigger a re-create.
        // Cleaning up this obsolete product bound configuration (with link to the cart) will
        // only happen on leaving the configurator pages, see ConfiguratorRouterListener
        if (!isOverview) {
            this.configuratorCommonsService.removeConfiguration(nextOwner);
        }
    }
    onUpdateCart(configuration, configuratorType, owner, isOverview) {
        if (configuration.isCartEntryUpdateRequired) {
            this.configuratorCartService.updateCartEntry(configuration);
        }
        this.performNavigation(configuratorType, owner, false, isOverview, configuration.isCartEntryUpdateRequired ?? false);
        //Only remove if we are on configuration page, because on final cart navigation,
        //the configuration will anyhow be removed
        if (configuration.isCartEntryUpdateRequired && !isOverview) {
            this.configuratorCommonsService.removeConfiguration(owner);
        }
    }
    leaveConfigurationOverview() {
        this.container$.pipe(take(1)).subscribe((container) => {
            if (container.routerData.owner.type ===
                CommonConfigurator.OwnerType.ORDER_ENTRY) {
                this.goToOrderDetails(container.routerData.owner);
            }
            else {
                this.routingService.go({ cxRoute: 'checkoutReviewOrder' });
            }
        });
    }
    goToOrderDetails(owner) {
        this.orderHistoryFacade.loadOrderDetails(this.commonConfiguratorUtilsService.decomposeOwnerId(owner.id).documentId);
        this.orderHistoryFacade
            .getOrderDetails()
            .pipe(filter((order) => order !== undefined), take(1))
            .subscribe((order) => this.routingService.go({ cxRoute: 'orderDetails', params: order }));
    }
    extractConfigPrices(configuration) {
        const priceSummary = configuration.priceSummary;
        const basePrice = priceSummary?.basePrice?.formattedValue;
        const selectedOptions = priceSummary?.selectedOptions?.formattedValue;
        const totalPrice = priceSummary?.currentTotal?.formattedValue;
        const prices = {
            basePrice: basePrice,
            selectedOptions: selectedOptions,
            totalPrice: totalPrice,
        };
        if (!basePrice || basePrice === '-') {
            prices.basePrice = '0';
        }
        if (!selectedOptions || selectedOptions === '-') {
            prices.selectedOptions = '0';
        }
        if (!totalPrice || totalPrice === '-') {
            prices.totalPrice = '0';
        }
        return prices;
    }
    makeAddToCartButtonSticky() {
        // The add-to-cart button has to be shown at the bottom of the configuration view
        // and scrolled out together with the configuration view when it is moved to the top out from the viewport.
        // From the technical point of view it is controlled by checking whether the add-to-cart button intersects the price-summary or not:
        // the add-to-cart button has to be shown sticky, if intersects, and fixed, if not.
        // To avoid the situation where the add-to-cart button is shown fixed below the footer view
        // when the configuration view is scrolled out to the top on small mobile screens, we use the rootMargin parameter.
        // The first field of the rootMargin controls the delay in pixel after them the add-to-cart button has to be shown fixed again.
        // We set this value very high, so the add-to-cart button will never appear below the footer view even in case of small screens.
        const options = {
            rootMargin: '9999px 0px -100px 0px',
        };
        this.subscription.add(this.container$
            .pipe(take(1), delay(0), map(() => this.configUtils.getElement('cx-configurator-price-summary')), switchMap((priceSummary) => priceSummary
            ? this.intersectionService.isIntersecting(priceSummary, options)
            : of(undefined)), filter((isIntersecting) => isIntersecting !== undefined))
            .subscribe((isIntersecting) => {
            if (isIntersecting) {
                this.configUtils.changeStyling(CX_SELECTOR, 'position', 'sticky');
            }
            else {
                this.configUtils.changeStyling(CX_SELECTOR, 'position', 'fixed');
            }
        }));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ConfiguratorAddToCartButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAddToCartButtonComponent, deps: [{ token: i1.RoutingService }, { token: i2.ConfiguratorCommonsService }, { token: i3.ConfiguratorCartService }, { token: i4.ConfiguratorGroupsService }, { token: i5.ConfiguratorRouterExtractorService }, { token: i1.GlobalMessageService }, { token: i6.OrderHistoryFacade }, { token: i5.CommonConfiguratorUtilsService }, { token: i7.ConfiguratorStorefrontUtilsService }, { token: i8.IntersectionService }, { token: i9.ConfiguratorQuantityService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAddToCartButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAddToCartButtonComponent, selector: "cx-configurator-add-to-cart-button", ngImport: i0, template: "<ng-container *ngIf=\"container$ | async as container\">\n  <ng-container *ngIf=\"!container.routerData.displayOnly; else displayOnly\">\n    <div class=\"cx-add-to-cart-btn-container\">\n      <ng-container *cxFeatureLevel=\"'!6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n          (click)=\"onAddToCart(container.configuration, container.routerData)\"\n          [attr.aria-label]=\"\n            (getButtonResourceKey(container.routerData, container.configuration)\n              | cxTranslate) +\n            ' ' +\n            ('configurator.a11y.addToCartPrices'\n              | cxTranslate: extractConfigPrices(container.configuration))\n          \"\n        >\n          {{\n            getButtonResourceKey(container.routerData, container.configuration)\n              | cxTranslate\n          }}\n        </button>\n      </ng-container>\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <ng-container *ngIf=\"!isCartEntry(container.routerData)\">\n          <div class=\"cx-quantity-add-to-cart-container\">\n            <div class=\"cx-quantity-add-to-cart-row\">\n              <div class=\"cx-quantity\">\n                <label>{{\n                  'configurator.addToCart.quantity' | cxTranslate\n                }}</label>\n                <cx-item-counter [control]=\"quantityControl\"></cx-item-counter>\n              </div>\n              <button\n                class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n                (click)=\"\n                  onAddToCart(container.configuration, container.routerData)\n                \"\n                [attr.aria-label]=\"\n                  (getButtonResourceKey(\n                    container.routerData,\n                    container.configuration\n                  ) | cxTranslate) +\n                  ' ' +\n                  ('configurator.a11y.addToCartPrices'\n                    | cxTranslate: extractConfigPrices(container.configuration))\n                \"\n                title=\"{{\n                  getButtonResourceKey(\n                    container.routerData,\n                    container.configuration\n                  ) | cxTranslate\n                }}\"\n              >\n                <cx-icon [type]=\"iconType.CART_PLUS\"></cx-icon>\n              </button>\n            </div>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"isCartEntry(container.routerData)\">\n          <button\n            class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n            (click)=\"onAddToCart(container.configuration, container.routerData)\"\n            [attr.aria-label]=\"\n              (getButtonResourceKey(\n                container.routerData,\n                container.configuration\n              ) | cxTranslate) +\n              ' ' +\n              ('configurator.a11y.addToCartPrices'\n                | cxTranslate: extractConfigPrices(container.configuration))\n            \"\n          >\n            {{\n              getButtonResourceKey(\n                container.routerData,\n                container.configuration\n              ) | cxTranslate\n            }}\n          </button>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-template #displayOnly>\n    <div class=\"cx-display-only-btn-container\">\n      <ng-container *cxFeatureLevel=\"'!6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-primary cx-display-only-btn\"\n          (click)=\"leaveConfigurationOverview()\"\n        >\n          {{ 'configurator.addToCart.buttonDisplayOnly' | cxTranslate }}\n        </button>\n      </ng-container>\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-secondary cx-display-only-btn\"\n          (click)=\"leaveConfigurationOverview()\"\n        >\n          {{ 'configurator.addToCart.buttonClose' | cxTranslate }}\n        </button>\n      </ng-container>\n    </div>\n  </ng-template>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i8.ItemCounterComponent, selector: "cx-item-counter", inputs: ["control", "min", "max", "step", "allowZero", "readonly"] }, { kind: "component", type: i8.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i1.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "pipe", type: i10.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAddToCartButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: CX_SELECTOR, changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"container$ | async as container\">\n  <ng-container *ngIf=\"!container.routerData.displayOnly; else displayOnly\">\n    <div class=\"cx-add-to-cart-btn-container\">\n      <ng-container *cxFeatureLevel=\"'!6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n          (click)=\"onAddToCart(container.configuration, container.routerData)\"\n          [attr.aria-label]=\"\n            (getButtonResourceKey(container.routerData, container.configuration)\n              | cxTranslate) +\n            ' ' +\n            ('configurator.a11y.addToCartPrices'\n              | cxTranslate: extractConfigPrices(container.configuration))\n          \"\n        >\n          {{\n            getButtonResourceKey(container.routerData, container.configuration)\n              | cxTranslate\n          }}\n        </button>\n      </ng-container>\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <ng-container *ngIf=\"!isCartEntry(container.routerData)\">\n          <div class=\"cx-quantity-add-to-cart-container\">\n            <div class=\"cx-quantity-add-to-cart-row\">\n              <div class=\"cx-quantity\">\n                <label>{{\n                  'configurator.addToCart.quantity' | cxTranslate\n                }}</label>\n                <cx-item-counter [control]=\"quantityControl\"></cx-item-counter>\n              </div>\n              <button\n                class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n                (click)=\"\n                  onAddToCart(container.configuration, container.routerData)\n                \"\n                [attr.aria-label]=\"\n                  (getButtonResourceKey(\n                    container.routerData,\n                    container.configuration\n                  ) | cxTranslate) +\n                  ' ' +\n                  ('configurator.a11y.addToCartPrices'\n                    | cxTranslate: extractConfigPrices(container.configuration))\n                \"\n                title=\"{{\n                  getButtonResourceKey(\n                    container.routerData,\n                    container.configuration\n                  ) | cxTranslate\n                }}\"\n              >\n                <cx-icon [type]=\"iconType.CART_PLUS\"></cx-icon>\n              </button>\n            </div>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"isCartEntry(container.routerData)\">\n          <button\n            class=\"cx-btn btn btn-block btn-primary cx-add-to-cart-btn\"\n            (click)=\"onAddToCart(container.configuration, container.routerData)\"\n            [attr.aria-label]=\"\n              (getButtonResourceKey(\n                container.routerData,\n                container.configuration\n              ) | cxTranslate) +\n              ' ' +\n              ('configurator.a11y.addToCartPrices'\n                | cxTranslate: extractConfigPrices(container.configuration))\n            \"\n          >\n            {{\n              getButtonResourceKey(\n                container.routerData,\n                container.configuration\n              ) | cxTranslate\n            }}\n          </button>\n        </ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n  <ng-template #displayOnly>\n    <div class=\"cx-display-only-btn-container\">\n      <ng-container *cxFeatureLevel=\"'!6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-primary cx-display-only-btn\"\n          (click)=\"leaveConfigurationOverview()\"\n        >\n          {{ 'configurator.addToCart.buttonDisplayOnly' | cxTranslate }}\n        </button>\n      </ng-container>\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <button\n          class=\"cx-btn btn btn-block btn-secondary cx-display-only-btn\"\n          (click)=\"leaveConfigurationOverview()\"\n        >\n          {{ 'configurator.addToCart.buttonClose' | cxTranslate }}\n        </button>\n      </ng-container>\n    </div>\n  </ng-template>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.ConfiguratorCommonsService }, { type: i3.ConfiguratorCartService }, { type: i4.ConfiguratorGroupsService }, { type: i5.ConfiguratorRouterExtractorService }, { type: i1.GlobalMessageService }, { type: i6.OrderHistoryFacade }, { type: i5.CommonConfiguratorUtilsService }, { type: i7.ConfiguratorStorefrontUtilsService }, { type: i8.IntersectionService }, { type: i9.ConfiguratorQuantityService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,