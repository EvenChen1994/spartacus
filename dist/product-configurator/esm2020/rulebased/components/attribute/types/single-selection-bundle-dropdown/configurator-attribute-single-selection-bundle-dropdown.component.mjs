/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeSingleSelectionBaseComponent } from '../base/configurator-attribute-single-selection-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../quantity/configurator-attribute-quantity.service";
import * as i2 from "@spartacus/core";
import * as i3 from "../../composition/configurator-attribute-composition.model";
import * as i4 from "../../../../core/facade/configurator-commons.service";
import * as i5 from "../../../service/configurator-storefront-utils.service";
import * as i6 from "@angular/common";
import * as i7 from "../../product-card/configurator-attribute-product-card.component";
import * as i8 from "@angular/forms";
import * as i9 from "@spartacus/storefront";
import * as i10 from "../../quantity/configurator-attribute-quantity.component";
import * as i11 from "../../../price/configurator-price.component";
export class ConfiguratorAttributeSingleSelectionBundleDropdownComponent extends ConfiguratorAttributeSingleSelectionBaseComponent {
    constructor(quantityService, translation, attributeComponentContext, configuratorCommonsService, configuratorStorefrontUtilsService) {
        super(quantityService, translation, attributeComponentContext, configuratorCommonsService, configuratorStorefrontUtilsService);
        this.quantityService = quantityService;
        this.translation = translation;
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorStorefrontUtilsService = configuratorStorefrontUtilsService;
        this.RETRACT_VALUE_CODE = Configurator.RetractValueCode;
        this.attributeDropDownForm = new UntypedFormControl('');
        this.group = attributeComponentContext.group.id;
    }
    ngOnInit() {
        this.attributeDropDownForm.setValue(this.attribute.selectedSingleValue);
        const values = this.attribute.values;
        if (values && values.length > 0) {
            const selectedValue = values.find((value) => value.selected);
            if (selectedValue) {
                this.selectionValue = selectedValue;
            }
        }
    }
    /**
     * Returns selected value. We assume that when this method is called,
     * a selection has been made before. In case this assumption is false,
     * an error is thrown
     * @returns selected value
     */
    get selectedValue() {
        let selectedValue;
        if (this.selectionValue) {
            selectedValue = this.selectionValue;
        }
        else {
            throw new Error('selectedValue called without a defined selectionValue');
        }
        return selectedValue;
    }
    /**
     * Extract corresponding product card parameters
     *
     * @return {ConfiguratorAttributeProductCardComponentOptions} - New product card options
     */
    extractProductCardParameters() {
        return {
            hideRemoveButton: true,
            productBoundValue: this.selectedValue,
            singleDropdown: true,
            withQuantity: false,
            loading$: this.loading$,
            attributeId: this.getAttributeCode(this.attribute),
            attributeName: this.attribute.name,
            itemCount: 0,
            itemIndex: 0,
        };
    }
    /**
     * Verifies whether a selection value is defined and its value code is not a retract one.
     *
     * @returns {boolean} - 'True' if a selection value is defined and its value code is not a retract one, otherwise 'false'.
     */
    isNotRetractValue() {
        return ((this.selectionValue &&
            this.selectionValue?.valueCode !== Configurator.RetractValueCode) ??
            false);
    }
    /**
     * Verifies whether a value code is a retract one.
     *
     * @param {string} valueCode - Value code
     * @returns {boolean} - 'True' if a value code is a retract one, otherwise 'false'.
     */
    isRetractValue(valueCode) {
        return valueCode === Configurator.RetractValueCode;
    }
}
ConfiguratorAttributeSingleSelectionBundleDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeSingleSelectionBundleDropdownComponent, deps: [{ token: i1.ConfiguratorAttributeQuantityService }, { token: i2.TranslationService }, { token: i3.ConfiguratorAttributeCompositionContext }, { token: i4.ConfiguratorCommonsService }, { token: i5.ConfiguratorStorefrontUtilsService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeSingleSelectionBundleDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeSingleSelectionBundleDropdownComponent, selector: "cx-configurator-attribute-single-selection-bundle-dropdown", usesInheritance: true, ngImport: i0, template: "<div class=\"form-group\" *ngIf=\"attribute?.values?.length\">\n  <label\n    for=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n    class=\"cx-visually-hidden\"\n  >\n    {{\n      'configurator.a11y.listbox'\n        | cxTranslate\n          : {\n              count: attribute.values?.length\n            }\n    }}\n  </label>\n  <ng-container *cxFeatureLevel=\"'!6.2'\">\n    <select\n      id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      class=\"form-control\"\n      [formControl]=\"attributeDropDownForm\"\n      [cxFocus]=\"{ key: attribute.name }\"\n      (change)=\"onSelect(attributeDropDownForm.value)\"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n    >\n      <option\n        *ngFor=\"let item of attribute.values\"\n        [label]=\"getLabel(false, item.valueDisplay, undefined, item)\"\n        [selected]=\"item.selected\"\n        [value]=\"item.valueCode\"\n        [attr.aria-label]=\"\n          isRetractValue(item.valueCode)\n            ? ('configurator.a11y.forAttribute'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n            : item.valuePrice && item.valuePrice?.value !== 0\n            ? ('configurator.a11y.selectedValueOfAttributeFullWithPrice'\n              | cxTranslate\n                : {\n                    value: item.valueDisplay,\n                    attribute: attribute.label,\n                    price: item.valuePriceTotal?.formattedValue ?? 0\n                  })\n            : ('configurator.a11y.selectedValueOfAttributeFull'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n        \"\n        [value]=\"item.valueCode\"\n      >\n        {{ getLabel(false, item.valueDisplay, undefined, item) }}\n      </option>\n    </select>\n  </ng-container>\n  <ng-container *cxFeatureLevel=\"'6.2'\">\n    <select\n      id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      class=\"form-control\"\n      [ngClass]=\"{\n        'cx-required-error-msg ': (showRequiredErrorMessage$ | async)\n      }\"\n      [formControl]=\"attributeDropDownForm\"\n      [cxFocus]=\"{ key: attribute.name }\"\n      (change)=\"onSelect(attributeDropDownForm.value)\"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n    >\n      <option\n        *ngFor=\"let item of attribute.values\"\n        [label]=\"getLabel(false, item.valueDisplay, undefined, item)\"\n        [selected]=\"item.selected\"\n        [value]=\"item.valueCode\"\n        [attr.aria-label]=\"\n          isRetractValue(item.valueCode)\n            ? ('configurator.a11y.forAttribute'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n            : item.valuePrice && item.valuePrice?.value !== 0\n            ? ('configurator.a11y.selectedValueOfAttributeFullWithPrice'\n              | cxTranslate\n                : {\n                    value: item.valueDisplay,\n                    attribute: attribute.label,\n                    price: item.valuePriceTotal?.formattedValue ?? 0\n                  })\n            : ('configurator.a11y.selectedValueOfAttributeFull'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n        \"\n        [value]=\"item.valueCode\"\n      >\n        {{ getLabel(false, item.valueDisplay, undefined, item) }}\n      </option>\n    </select>\n  </ng-container>\n</div>\n\n<cx-configurator-attribute-product-card\n  *ngIf=\"isNotRetractValue()\"\n  id=\"{{\n    createAttributeValueIdForConfigurator(attribute, selectedValue.valueCode)\n  }}\"\n  (handleDeselect)=\"onSelect(RETRACT_VALUE_CODE)\"\n  [productCardOptions]=\"extractProductCardParameters()\"\n>\n</cx-configurator-attribute-product-card>\n\n<div *ngIf=\"withQuantity\" class=\"cx-attribute-level-quantity-price\">\n  <cx-configurator-attribute-quantity\n    (changeQuantity)=\"onChangeQuantity($event, attributeDropDownForm)\"\n    [quantityOptions]=\"extractQuantityParameters(attributeDropDownForm)\"\n  ></cx-configurator-attribute-quantity>\n  <cx-configurator-price\n    [formula]=\"extractPriceFormulaParameters()\"\n  ></cx-configurator-price>\n</div>\n", dependencies: [{ kind: "directive", type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfiguratorAttributeProductCardComponent, selector: "cx-configurator-attribute-product-card", inputs: ["productCardOptions"], outputs: ["handleDeselect", "handleQuantity", "handleSelect"] }, { kind: "directive", type: i8.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i8.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i9.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i8.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i10.ConfiguratorAttributeQuantityComponent, selector: "cx-configurator-attribute-quantity", inputs: ["quantityOptions"], outputs: ["changeQuantity"] }, { kind: "component", type: i11.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "directive", type: i2.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i2.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeSingleSelectionBundleDropdownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-single-selection-bundle-dropdown', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"form-group\" *ngIf=\"attribute?.values?.length\">\n  <label\n    for=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n    class=\"cx-visually-hidden\"\n  >\n    {{\n      'configurator.a11y.listbox'\n        | cxTranslate\n          : {\n              count: attribute.values?.length\n            }\n    }}\n  </label>\n  <ng-container *cxFeatureLevel=\"'!6.2'\">\n    <select\n      id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      class=\"form-control\"\n      [formControl]=\"attributeDropDownForm\"\n      [cxFocus]=\"{ key: attribute.name }\"\n      (change)=\"onSelect(attributeDropDownForm.value)\"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n    >\n      <option\n        *ngFor=\"let item of attribute.values\"\n        [label]=\"getLabel(false, item.valueDisplay, undefined, item)\"\n        [selected]=\"item.selected\"\n        [value]=\"item.valueCode\"\n        [attr.aria-label]=\"\n          isRetractValue(item.valueCode)\n            ? ('configurator.a11y.forAttribute'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n            : item.valuePrice && item.valuePrice?.value !== 0\n            ? ('configurator.a11y.selectedValueOfAttributeFullWithPrice'\n              | cxTranslate\n                : {\n                    value: item.valueDisplay,\n                    attribute: attribute.label,\n                    price: item.valuePriceTotal?.formattedValue ?? 0\n                  })\n            : ('configurator.a11y.selectedValueOfAttributeFull'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n        \"\n        [value]=\"item.valueCode\"\n      >\n        {{ getLabel(false, item.valueDisplay, undefined, item) }}\n      </option>\n    </select>\n  </ng-container>\n  <ng-container *cxFeatureLevel=\"'6.2'\">\n    <select\n      id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      class=\"form-control\"\n      [ngClass]=\"{\n        'cx-required-error-msg ': (showRequiredErrorMessage$ | async)\n      }\"\n      [formControl]=\"attributeDropDownForm\"\n      [cxFocus]=\"{ key: attribute.name }\"\n      (change)=\"onSelect(attributeDropDownForm.value)\"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n    >\n      <option\n        *ngFor=\"let item of attribute.values\"\n        [label]=\"getLabel(false, item.valueDisplay, undefined, item)\"\n        [selected]=\"item.selected\"\n        [value]=\"item.valueCode\"\n        [attr.aria-label]=\"\n          isRetractValue(item.valueCode)\n            ? ('configurator.a11y.forAttribute'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n            : item.valuePrice && item.valuePrice?.value !== 0\n            ? ('configurator.a11y.selectedValueOfAttributeFullWithPrice'\n              | cxTranslate\n                : {\n                    value: item.valueDisplay,\n                    attribute: attribute.label,\n                    price: item.valuePriceTotal?.formattedValue ?? 0\n                  })\n            : ('configurator.a11y.selectedValueOfAttributeFull'\n              | cxTranslate\n                : { value: item.valueDisplay, attribute: attribute.label })\n        \"\n        [value]=\"item.valueCode\"\n      >\n        {{ getLabel(false, item.valueDisplay, undefined, item) }}\n      </option>\n    </select>\n  </ng-container>\n</div>\n\n<cx-configurator-attribute-product-card\n  *ngIf=\"isNotRetractValue()\"\n  id=\"{{\n    createAttributeValueIdForConfigurator(attribute, selectedValue.valueCode)\n  }}\"\n  (handleDeselect)=\"onSelect(RETRACT_VALUE_CODE)\"\n  [productCardOptions]=\"extractProductCardParameters()\"\n>\n</cx-configurator-attribute-product-card>\n\n<div *ngIf=\"withQuantity\" class=\"cx-attribute-level-quantity-price\">\n  <cx-configurator-attribute-quantity\n    (changeQuantity)=\"onChangeQuantity($event, attributeDropDownForm)\"\n    [quantityOptions]=\"extractQuantityParameters(attributeDropDownForm)\"\n  ></cx-configurator-attribute-quantity>\n  <cx-configurator-price\n    [formula]=\"extractPriceFormulaParameters()\"\n  ></cx-configurator-price>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorAttributeQuantityService }, { type: i2.TranslationService }, { type: i3.ConfiguratorAttributeCompositionContext }, { type: i4.ConfiguratorCommonsService }, { type: i5.ConfiguratorStorefrontUtilsService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,