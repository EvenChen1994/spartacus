/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../composition/configurator-attribute-composition.model";
import * as i2 from "../../../../core/facade/configurator-commons.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/forms";
import * as i5 from "../../../price/configurator-price.component";
import * as i6 from "@spartacus/core";
export class ConfiguratorAttributeCheckBoxComponent extends ConfiguratorAttributeBaseComponent {
    constructor(attributeComponentContext, configuratorCommonsService) {
        super();
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.attributeCheckBoxForm = new UntypedFormControl('');
        this.attribute = attributeComponentContext.attribute;
        this.group = attributeComponentContext.group.id;
        this.ownerKey = attributeComponentContext.owner.key;
        this.expMode = attributeComponentContext.expMode;
    }
    ngOnInit() {
        this.attributeCheckBoxForm.setValue(this.attribute.selectedSingleValue);
        this.attributeValue = this.getValueFromAttribute();
    }
    /**
     * Fired when a check box has been selected i.e. when a value has been set
     */
    onSelect() {
        const selectedValues = this.assembleSingleValue();
        this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
            ...this.attribute,
            values: selectedValues,
        }, Configurator.UpdateType.ATTRIBUTE);
    }
    getValueFromAttribute() {
        //we can assume that for this component, value is always present
        //otherwise attribute type would not be correct,
        //could only happen in exceptional cases, on wrong modifications e.g.
        return this.attribute.values ? this.attribute.values[0] : { valueCode: '' };
    }
    assembleSingleValue() {
        const localAssembledValues = [];
        const value = this.getValueFromAttribute();
        const localAttributeValue = {
            valueCode: value.valueCode,
        };
        localAttributeValue.name = value.name;
        localAttributeValue.selected = this.attributeCheckBoxForm.value;
        localAssembledValues.push(localAttributeValue);
        return localAssembledValues;
    }
    /**
     * Extract corresponding value price formula parameters.
     * For the multi-selection attribute types the complete price formula should be displayed at the value level.
     *
     * @param {Configurator.Value} value - Configurator value
     * @return {ConfiguratorPriceComponentOptions} - New price formula
     */
    extractValuePriceFormulaParameters(value) {
        return {
            quantity: value.quantity,
            price: value.valuePrice,
            priceTotal: value.valuePriceTotal,
            isLightedUp: value.selected,
        };
    }
}
ConfiguratorAttributeCheckBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeCheckBoxComponent, deps: [{ token: i1.ConfiguratorAttributeCompositionContext }, { token: i2.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeCheckBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeCheckBoxComponent, selector: "cx-configurator-attribute-checkbox", usesInheritance: true, ngImport: i0, template: "<ng-container>\n  <fieldset>\n    <legend style=\"display: none\">{{ attribute.label }}</legend>\n    <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attributeValue.valueCode\n              )\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [value]=\"attributeValue.valueCode\"\n            [cxFocus]=\"{\n              key: attribute.name + '-' + attributeValue.name\n            }\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForm\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              attributeValue.valuePrice &&\n              attributeValue.valuePrice?.value !== 0\n                ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                  | cxTranslate\n                    : {\n                        value: attributeValue.valueDisplay,\n                        attribute: attribute.label,\n                        price: attributeValue.valuePrice.formattedValue\n                      })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : {\n                        value: attributeValue.valueDisplay,\n                        attribute: attribute.label\n                      })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name) +\n              ' ' +\n              createAttributeUiKey('attribute-msg', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey(\n                'label',\n                attribute.name,\n                attributeValue.valueCode\n              )\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attributeValue.valueCode\n              )\n            }}\"\n            aria-hidden=\"true\"\n            class=\"form-check-label\"\n            >{{\n              getLabel(\n                expMode,\n                attributeValue.valueDisplay,\n                attributeValue.valueCode\n              )\n            }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(attributeValue)\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i4.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i5.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeCheckBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container>\n  <fieldset>\n    <legend style=\"display: none\">{{ attribute.label }}</legend>\n    <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attributeValue.valueCode\n              )\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [value]=\"attributeValue.valueCode\"\n            [cxFocus]=\"{\n              key: attribute.name + '-' + attributeValue.name\n            }\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForm\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              attributeValue.valuePrice &&\n              attributeValue.valuePrice?.value !== 0\n                ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                  | cxTranslate\n                    : {\n                        value: attributeValue.valueDisplay,\n                        attribute: attribute.label,\n                        price: attributeValue.valuePrice.formattedValue\n                      })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : {\n                        value: attributeValue.valueDisplay,\n                        attribute: attribute.label\n                      })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name) +\n              ' ' +\n              createAttributeUiKey('attribute-msg', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey(\n                'label',\n                attribute.name,\n                attributeValue.valueCode\n              )\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(\n                attribute,\n                attributeValue.valueCode\n              )\n            }}\"\n            aria-hidden=\"true\"\n            class=\"form-check-label\"\n            >{{\n              getLabel(\n                expMode,\n                attributeValue.valueDisplay,\n                attributeValue.valueCode\n              )\n            }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(attributeValue)\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorAttributeCompositionContext }, { type: i2.ConfiguratorCommonsService }]; } });
//# sourceMappingURL=data:application/json;base64,