/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { CommonConfigurator } from '@spartacus/product-configurator/common';
import { of, timer } from 'rxjs';
import { debounce, map } from 'rxjs/operators';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../config/configurator-ui-settings.config";
import * as i2 from "../../composition/configurator-attribute-composition.model";
import * as i3 from "../../../../core/facade/configurator-commons.service";
import * as i4 from "../../../service/configurator-storefront-utils.service";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/common";
import * as i8 from "@spartacus/core";
export class ConfiguratorAttributeInputFieldComponent extends ConfiguratorAttributeBaseComponent {
    // TODO (CXSPA-3392): make ConfiguratorStorefrontUtilsService a required dependency
    constructor(config, attributeComponentContext, configuratorCommonsService, configuratorStorefrontUtilsService) {
        super();
        this.config = config;
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorStorefrontUtilsService = configuratorStorefrontUtilsService;
        this.attributeInputForm = new UntypedFormControl('');
        this.showRequiredErrorMessage$ = of(false);
        /**
         * In case no config is injected, or when the debounce time is not configured at all,
         * this value will be used as fallback.
         */
        this.FALLBACK_DEBOUNCE_TIME = 500;
        this.attribute = attributeComponentContext.attribute;
        this.group = attributeComponentContext.group.id;
        this.owner = attributeComponentContext.owner;
        this.ownerKey = attributeComponentContext.owner.key;
        this.ownerType = attributeComponentContext.owner.type;
        if (this.configuratorStorefrontUtilsService) {
            this.showRequiredErrorMessage$ = this.configuratorStorefrontUtilsService
                .isCartEntryOrGroupVisited(this.owner, this.group)
                .pipe(map((result) => result
                ? this.isRequiredErrorMsg(this.attribute) &&
                    this.isUserInput(this.attribute)
                : false));
        }
    }
    ngOnInit() {
        this.attributeInputForm.setValue(this.attribute.userInput);
        if (this.ownerType === CommonConfigurator.OwnerType.CART_ENTRY &&
            this.attribute.required &&
            this.attribute.incomplete &&
            !this.attributeInputForm.value) {
            this.attributeInputForm.markAsTouched();
        }
        this.sub = this.attributeInputForm.valueChanges
            .pipe(debounce(() => timer(this.config.productConfigurator?.updateDebounceTime?.input ??
            this.FALLBACK_DEBOUNCE_TIME)))
            .subscribe(() => this.onChange());
    }
    onChange() {
        if (!this.attributeInputForm.invalid) {
            this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
                ...this.attribute,
                userInput: this.attributeInputForm.value,
                selectedSingleValue: this.attributeInputForm.value,
            }, Configurator.UpdateType.ATTRIBUTE);
        }
    }
    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }
    /**
     * Verifies if the user input has a non-blank value.
     * @returns {boolean} - 'True' if the user input is undefined, empty or contains only blanks, otherwise 'false'.
     */
    get isUserInputEmpty() {
        return (!this.attribute.userInput || this.attribute.userInput.trim().length === 0);
    }
    /**
     * Checks if the component needs to be marked as required.
     * This is never the case if it is used as sub component for an attribute type which allows an additional value
     * @returns Required?
     */
    get isRequired() {
        return this.isUserInput(this.attribute)
            ? this.attribute.required ?? false
            : false;
    }
}
ConfiguratorAttributeInputFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeInputFieldComponent, deps: [{ token: i1.ConfiguratorUISettingsConfig }, { token: i2.ConfiguratorAttributeCompositionContext }, { token: i3.ConfiguratorCommonsService }, { token: i4.ConfiguratorStorefrontUtilsService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeInputFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeInputFieldComponent, selector: "cx-configurator-attribute-input-field", usesInheritance: true, ngImport: i0, template: "<div id=\"{{ createAttributeIdForConfigurator(attribute) }}\" class=\"form-group\">\n  <ng-container *cxFeatureLevel=\"'!6.2'\">\n    <input\n      [formControl]=\"attributeInputForm\"\n      [required]=\"isRequired\"\n      class=\"form-control\"\n      attr.required=\"{{ attribute.required }}\"\n      maxlength=\"{{ attribute.maxlength }}\"\n      [attr.aria-label]=\"\n        isUserInputEmpty\n          ? ('configurator.a11y.valueOfAttributeBlank'\n            | cxTranslate\n              : {\n                  attribute: attribute.label\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute.userInput,\n                  attribute: attribute.label\n                })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [cxFocus]=\"{\n        key: createAttributeIdForConfigurator(attribute)\n      }\"\n    />\n  </ng-container>\n  <ng-container *cxFeatureLevel=\"'6.2'\">\n    <input\n      [formControl]=\"attributeInputForm\"\n      class=\"form-control\"\n      [ngClass]=\"{\n        'cx-required-error-msg ': (showRequiredErrorMessage$ | async)\n      }\"\n      [class.ng-invalid]=\"isRequired && isUserInputEmpty\"\n      maxlength=\"{{ attribute.maxlength }}\"\n      [attr.aria-label]=\"\n        isUserInputEmpty\n          ? ('configurator.a11y.valueOfAttributeBlank'\n            | cxTranslate\n              : {\n                  attribute: attribute.label\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute.userInput,\n                  attribute: attribute.label\n                })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [cxFocus]=\"{\n        key: createAttributeIdForConfigurator(attribute)\n      }\"\n    />\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i8.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }, { kind: "pipe", type: i8.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeInputFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-input-field', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"{{ createAttributeIdForConfigurator(attribute) }}\" class=\"form-group\">\n  <ng-container *cxFeatureLevel=\"'!6.2'\">\n    <input\n      [formControl]=\"attributeInputForm\"\n      [required]=\"isRequired\"\n      class=\"form-control\"\n      attr.required=\"{{ attribute.required }}\"\n      maxlength=\"{{ attribute.maxlength }}\"\n      [attr.aria-label]=\"\n        isUserInputEmpty\n          ? ('configurator.a11y.valueOfAttributeBlank'\n            | cxTranslate\n              : {\n                  attribute: attribute.label\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute.userInput,\n                  attribute: attribute.label\n                })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [cxFocus]=\"{\n        key: createAttributeIdForConfigurator(attribute)\n      }\"\n    />\n  </ng-container>\n  <ng-container *cxFeatureLevel=\"'6.2'\">\n    <input\n      [formControl]=\"attributeInputForm\"\n      class=\"form-control\"\n      [ngClass]=\"{\n        'cx-required-error-msg ': (showRequiredErrorMessage$ | async)\n      }\"\n      [class.ng-invalid]=\"isRequired && isUserInputEmpty\"\n      maxlength=\"{{ attribute.maxlength }}\"\n      [attr.aria-label]=\"\n        isUserInputEmpty\n          ? ('configurator.a11y.valueOfAttributeBlank'\n            | cxTranslate\n              : {\n                  attribute: attribute.label\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : {\n                  value: attribute.userInput,\n                  attribute: attribute.label\n                })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [cxFocus]=\"{\n        key: createAttributeIdForConfigurator(attribute)\n      }\"\n    />\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorUISettingsConfig }, { type: i2.ConfiguratorAttributeCompositionContext }, { type: i3.ConfiguratorCommonsService }, { type: i4.ConfiguratorStorefrontUtilsService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,