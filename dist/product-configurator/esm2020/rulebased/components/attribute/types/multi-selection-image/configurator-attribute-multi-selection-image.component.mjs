/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../service/configurator-storefront-utils.service";
import * as i2 from "../../composition/configurator-attribute-composition.model";
import * as i3 from "../../../../core/facade/configurator-commons.service";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "../../../price/configurator-price.component";
import * as i8 from "@spartacus/core";
export class ConfiguratorAttributeMultiSelectionImageComponent extends ConfiguratorAttributeBaseComponent {
    constructor(configUtilsService, attributeComponentContext, configuratorCommonsService) {
        super();
        this.configUtilsService = configUtilsService;
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.attributeCheckBoxForms = new Array();
        this.attribute = attributeComponentContext.attribute;
        this.ownerKey = attributeComponentContext.owner.key;
        this.expMode = attributeComponentContext.expMode;
    }
    ngOnInit() {
        const values = this.attribute.values;
        if (values) {
            for (const value of values) {
                let attributeCheckBoxForm;
                if (value.selected) {
                    attributeCheckBoxForm = new UntypedFormControl(true);
                }
                else {
                    attributeCheckBoxForm = new UntypedFormControl(false);
                }
                this.attributeCheckBoxForms.push(attributeCheckBoxForm);
            }
        }
    }
    /**
     * Fired when a value has been selected
     * @param index Index of selected value
     */
    onSelect(index) {
        this.attributeCheckBoxForms[index].setValue(!this.attributeCheckBoxForms[index].value);
        const selectedValues = this.configUtilsService.assembleValuesForMultiSelectAttributes(this.attributeCheckBoxForms, this.attribute);
        this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
            ...this.attribute,
            values: selectedValues,
        }, Configurator.UpdateType.ATTRIBUTE);
    }
    extractValuePriceFormulaParameters(value) {
        return {
            quantity: value.quantity,
            price: value.valuePrice,
            priceTotal: value.valuePriceTotal,
            isLightedUp: value.selected,
        };
    }
}
ConfiguratorAttributeMultiSelectionImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeMultiSelectionImageComponent, deps: [{ token: i1.ConfiguratorStorefrontUtilsService }, { token: i2.ConfiguratorAttributeCompositionContext }, { token: i3.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeMultiSelectionImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeMultiSelectionImageComponent, selector: "cx-configurator-attribute-multi-selection-image", usesInheritance: true, ngImport: i0, template: "<div id=\"{{ createAttributeIdForConfigurator(attribute) }}\" class=\"cx-row\">\n  <div\n    *ngFor=\"let value of attribute.values; let i = index\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"checkbox\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      [formControl]=\"attributeCheckBoxForms[i]\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      (click)=\"onSelect(i)\"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [attr.checked]=\"attributeCheckBoxForms[i].value ? 'checked' : null\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label\"\n      >\n        <img\n          *ngIf=\"getImage(value) as image\"\n          class=\"cx-img\"\n          src=\"{{ image?.url }}\"\n          alt=\"{{ image?.altText }}\"\n        />\n        <div *ngIf=\"!getImage(value)\" class=\"cx-img-dummy\"></div>\n        {{ getLabel(expMode, value.valueDisplay, value.valueCode) }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i4.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i5.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i8.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeMultiSelectionImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-multi-selection-image', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"{{ createAttributeIdForConfigurator(attribute) }}\" class=\"cx-row\">\n  <div\n    *ngFor=\"let value of attribute.values; let i = index\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"checkbox\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      [formControl]=\"attributeCheckBoxForms[i]\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      (click)=\"onSelect(i)\"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      [attr.checked]=\"attributeCheckBoxForms[i].value ? 'checked' : null\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label\"\n      >\n        <img\n          *ngIf=\"getImage(value) as image\"\n          class=\"cx-img\"\n          src=\"{{ image?.url }}\"\n          alt=\"{{ image?.altText }}\"\n        />\n        <div *ngIf=\"!getImage(value)\" class=\"cx-img-dummy\"></div>\n        {{ getLabel(expMode, value.valueDisplay, value.valueCode) }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorStorefrontUtilsService }, { type: i2.ConfiguratorAttributeCompositionContext }, { type: i3.ConfiguratorCommonsService }]; } });
//# sourceMappingURL=data:application/json;base64,