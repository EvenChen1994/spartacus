/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../composition/configurator-attribute-composition.model";
import * as i2 from "../../../../core/facade/configurator-commons.service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "../../../price/configurator-price.component";
import * as i7 from "@spartacus/core";
export class ConfiguratorAttributeSingleSelectionImageComponent extends ConfiguratorAttributeBaseComponent {
    constructor(attributeComponentContext, configuratorCommonsService) {
        super();
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.attributeRadioButtonForm = new UntypedFormControl('');
        this.attribute = attributeComponentContext.attribute;
        this.ownerKey = attributeComponentContext.owner.key;
        this.expMode = attributeComponentContext.expMode;
    }
    ngOnInit() {
        this.attributeRadioButtonForm.setValue(this.attribute.selectedSingleValue);
    }
    /**
     * Submits a value.
     *
     * @param {string} value - Selected value
     */
    onClick(value) {
        this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
            ...this.attribute,
            selectedSingleValue: value,
        }, Configurator.UpdateType.ATTRIBUTE);
    }
    extractValuePriceFormulaParameters(value) {
        return {
            price: value?.valuePrice,
            isLightedUp: value ? value.selected : false,
        };
    }
}
ConfiguratorAttributeSingleSelectionImageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeSingleSelectionImageComponent, deps: [{ token: i1.ConfiguratorAttributeCompositionContext }, { token: i2.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeSingleSelectionImageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeSingleSelectionImageComponent, selector: "cx-configurator-attribute-single-selection-image", usesInheritance: true, ngImport: i0, template: "<div\n  id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n  class=\"cx-row\"\n  role=\"radiogroup\"\n>\n  <div\n    *ngFor=\"let value of attribute.values\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"radio\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      formcontrolname=\"attributeRadioButtonForm\"\n      [formControl]=\"attributeRadioButtonForm\"\n      [value]=\"value.valueCode\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      [attr.required]=\"attribute.required\"\n      [attr.checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'checked' : null\n      \"\n      [attr.aria-checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'true' : 'false'\n      \"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      (click)=\"onClick(value.valueCode)\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n      role=\"radio\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label form-radio-label\"\n      >\n        <img\n          *ngIf=\"getImage(value)\"\n          class=\"cx-img\"\n          src=\"{{ getImage(value)?.url }}\"\n          alt=\"{{ getImage(value)?.altText }}\"\n        />\n        <div *ngIf=\"!getImage(value)\" class=\"cx-img-dummy\"></div>\n        {{ getLabel(expMode, value.valueDisplay, value.valueCode) }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i3.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i7.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeSingleSelectionImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-single-selection-image', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  id=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n  class=\"cx-row\"\n  role=\"radiogroup\"\n>\n  <div\n    *ngFor=\"let value of attribute.values\"\n    id=\"{{ createAttributeValueIdForConfigurator(attribute, value.valueCode) }}\"\n    class=\"cx-configurator-select\"\n  >\n    <input\n      id=\"{{\n        createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n          '-input'\n      }}\"\n      type=\"radio\"\n      class=\"form-input\"\n      [value]=\"value.valueCode\"\n      formcontrolname=\"attributeRadioButtonForm\"\n      [formControl]=\"attributeRadioButtonForm\"\n      [value]=\"value.valueCode\"\n      name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n      [attr.required]=\"attribute.required\"\n      [attr.checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'checked' : null\n      \"\n      [attr.aria-checked]=\"\n        attributeRadioButtonForm.value === value.valueCode ? 'true' : 'false'\n      \"\n      [attr.aria-label]=\"\n        value.valuePrice && value.valuePrice?.value !== 0\n          ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n            | cxTranslate\n              : {\n                  value: value.valueDisplay,\n                  attribute: attribute.label,\n                  price: value.valuePrice.formattedValue\n                })\n          : ('configurator.a11y.valueOfAttributeFull'\n            | cxTranslate\n              : { value: value.valueDisplay, attribute: attribute.label })\n      \"\n      [attr.aria-describedby]=\"createAttributeUiKey('label', attribute.name)\"\n      (click)=\"onClick(value.valueCode)\"\n      [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n      role=\"radio\"\n    />\n    <div class=\"cx-label-container\">\n      <label\n        id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n        for=\"{{\n          createAttributeValueIdForConfigurator(attribute, value.valueCode) +\n            '-input'\n        }}\"\n        aria-hidden=\"true\"\n        class=\"form-check-label form-radio-label\"\n      >\n        <img\n          *ngIf=\"getImage(value)\"\n          class=\"cx-img\"\n          src=\"{{ getImage(value)?.url }}\"\n          alt=\"{{ getImage(value)?.altText }}\"\n        />\n        <div *ngIf=\"!getImage(value)\" class=\"cx-img-dummy\"></div>\n        {{ getLabel(expMode, value.valueDisplay, value.valueCode) }}\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </label>\n    </div>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorAttributeCompositionContext }, { type: i2.ConfiguratorCommonsService }]; } });
//# sourceMappingURL=data:application/json;base64,