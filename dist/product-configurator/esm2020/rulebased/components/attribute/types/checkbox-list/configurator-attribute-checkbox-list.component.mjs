/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, inject, isDevMode, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { LoggerService } from '@spartacus/core';
import { Configurator } from '../../../../core/model/configurator.model';
import { ConfiguratorAttributeMultiSelectionBaseComponent } from '../base/configurator-attribute-multi-selection-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../service/configurator-storefront-utils.service";
import * as i2 from "../../quantity/configurator-attribute-quantity.service";
import * as i3 from "../../composition/configurator-attribute-composition.model";
import * as i4 from "../../../../core/facade/configurator-commons.service";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/common";
import * as i8 from "../../quantity/configurator-attribute-quantity.component";
import * as i9 from "../../../price/configurator-price.component";
import * as i10 from "@spartacus/core";
export class ConfiguratorAttributeCheckBoxListComponent extends ConfiguratorAttributeMultiSelectionBaseComponent {
    constructor(configUtilsService, quantityService, attributeComponentContext, configuratorCommonsService) {
        super(quantityService, attributeComponentContext, configuratorCommonsService);
        this.configUtilsService = configUtilsService;
        this.quantityService = quantityService;
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.attributeCheckBoxForms = new Array();
        this.logger = inject(LoggerService);
        this.group = attributeComponentContext.group.id;
    }
    ngOnInit() {
        const disabled = !this.allowZeroValueQuantity;
        for (const value of this.attribute.values ?? []) {
            let attributeCheckBoxForm;
            if (value.selected) {
                attributeCheckBoxForm = new UntypedFormControl({
                    value: true,
                    disabled: disabled,
                });
            }
            else {
                attributeCheckBoxForm = new UntypedFormControl(false);
            }
            this.attributeCheckBoxForms.push(attributeCheckBoxForm);
        }
    }
    get allowZeroValueQuantity() {
        return this.quantityService.allowZeroValueQuantity(this.attribute);
    }
    onSelect() {
        const selectedValues = this.configUtilsService.assembleValuesForMultiSelectAttributes(this.attributeCheckBoxForms, this.attribute);
        this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
            ...this.attribute,
            values: selectedValues,
        }, Configurator.UpdateType.ATTRIBUTE);
    }
    onChangeValueQuantity(eventObject, valueCode, formIndex) {
        if (eventObject === 0) {
            this.attributeCheckBoxForms[formIndex].setValue(false);
            this.onSelect();
            return;
        }
        const value = this.configUtilsService
            .assembleValuesForMultiSelectAttributes(this.attributeCheckBoxForms, this.attribute)
            .find((item) => item.valueCode === valueCode);
        if (!value) {
            if (isDevMode()) {
                this.logger.warn('no value for event:', eventObject);
            }
            return;
        }
        value.quantity = eventObject;
        this.configuratorCommonsService.updateConfiguration(this.ownerKey, {
            ...this.attribute,
            values: [value],
        }, Configurator.UpdateType.VALUE_QUANTITY);
    }
    onChangeQuantity(eventObject) {
        if (!eventObject) {
            this.attributeCheckBoxForms.forEach((_, index) => this.attributeCheckBoxForms[index].setValue(false));
            this.onSelect();
        }
        else {
            this.onHandleAttributeQuantity(eventObject);
        }
    }
}
ConfiguratorAttributeCheckBoxListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeCheckBoxListComponent, deps: [{ token: i1.ConfiguratorStorefrontUtilsService }, { token: i2.ConfiguratorAttributeQuantityService }, { token: i3.ConfiguratorAttributeCompositionContext }, { token: i4.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeCheckBoxListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeCheckBoxListComponent, selector: "cx-configurator-attribute-checkbox-list", usesInheritance: true, ngImport: i0, template: "<fieldset>\n  <legend style=\"display: none\">{{ attribute.label }}</legend>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div\n      *ngIf=\"withQuantityOnAttributeLevel\"\n      class=\"cx-attribute-level-quantity-price\"\n    >\n      <cx-configurator-attribute-quantity\n        (changeQuantity)=\"onChangeQuantity($event)\"\n        [quantityOptions]=\"\n          extractQuantityParameters(attribute.quantity, !attribute.required)\n        \"\n      ></cx-configurator-attribute-quantity>\n      <cx-configurator-price\n        [formula]=\"extractPriceFormulaParameters()\"\n      ></cx-configurator-price>\n    </div>\n    <ng-container *ngFor=\"let value of attribute.values; let i = index\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(attribute, value.valueCode)\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n            [value]=\"value.valueCode\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForms[i]\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              value.valuePrice && value.valuePrice?.value !== 0\n                ? value.valuePriceTotal && value.valuePriceTotal?.value !== 0\n                  ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                    | cxTranslate\n                      : {\n                          value: value.valueDisplay,\n                          attribute: attribute.label,\n                          price: value.valuePriceTotal.formattedValue\n                        })\n                  : ('configurator.a11y.valueOfAttributeFullWithPrice'\n                    | cxTranslate\n                      : {\n                          value: value.valueDisplay,\n                          attribute: attribute.label,\n                          price: value.valuePrice.formattedValue\n                        })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : { value: value.valueDisplay, attribute: attribute.label })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey('label', attribute.name, value.valueCode)\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(attribute, value.valueCode)\n            }}\"\n            aria-hidden=\"true\"\n            class=\"cx-configurator-attribute-value-label form-check-label\"\n            >{{ getLabel(expMode, value.valueDisplay, value.valueCode) }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(value)\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n      <cx-configurator-attribute-quantity\n        *ngIf=\"value.selected && withQuantity && !withQuantityOnAttributeLevel\"\n        (changeQuantity)=\"onChangeValueQuantity($event, value.valueCode, i)\"\n        [quantityOptions]=\"\n          extractQuantityParameters(value.quantity, allowZeroValueQuantity)\n        \"\n      ></cx-configurator-attribute-quantity>\n    </ng-container>\n  </div>\n</fieldset>\n", dependencies: [{ kind: "directive", type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i6.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i8.ConfiguratorAttributeQuantityComponent, selector: "cx-configurator-attribute-quantity", inputs: ["quantityOptions"], outputs: ["changeQuantity"] }, { kind: "component", type: i9.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "pipe", type: i10.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeCheckBoxListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-checkbox-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<fieldset>\n  <legend style=\"display: none\">{{ attribute.label }}</legend>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div\n      *ngIf=\"withQuantityOnAttributeLevel\"\n      class=\"cx-attribute-level-quantity-price\"\n    >\n      <cx-configurator-attribute-quantity\n        (changeQuantity)=\"onChangeQuantity($event)\"\n        [quantityOptions]=\"\n          extractQuantityParameters(attribute.quantity, !attribute.required)\n        \"\n      ></cx-configurator-attribute-quantity>\n      <cx-configurator-price\n        [formula]=\"extractPriceFormulaParameters()\"\n      ></cx-configurator-price>\n    </div>\n    <ng-container *ngFor=\"let value of attribute.values; let i = index\">\n      <div class=\"form-check\">\n        <div class=\"cx-value-label-pair\">\n          <input\n            id=\"{{\n              createAttributeValueIdForConfigurator(attribute, value.valueCode)\n            }}\"\n            type=\"checkbox\"\n            class=\"form-check-input\"\n            [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n            [value]=\"value.valueCode\"\n            (change)=\"onSelect()\"\n            [formControl]=\"attributeCheckBoxForms[i]\"\n            name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n            [attr.aria-label]=\"\n              value.valuePrice && value.valuePrice?.value !== 0\n                ? value.valuePriceTotal && value.valuePriceTotal?.value !== 0\n                  ? ('configurator.a11y.valueOfAttributeFullWithPrice'\n                    | cxTranslate\n                      : {\n                          value: value.valueDisplay,\n                          attribute: attribute.label,\n                          price: value.valuePriceTotal.formattedValue\n                        })\n                  : ('configurator.a11y.valueOfAttributeFullWithPrice'\n                    | cxTranslate\n                      : {\n                          value: value.valueDisplay,\n                          attribute: attribute.label,\n                          price: value.valuePrice.formattedValue\n                        })\n                : ('configurator.a11y.valueOfAttributeFull'\n                  | cxTranslate\n                    : { value: value.valueDisplay, attribute: attribute.label })\n            \"\n            [attr.aria-describedby]=\"\n              createAttributeUiKey('label', attribute.name)\n            \"\n          />\n          <label\n            id=\"{{\n              createValueUiKey('label', attribute.name, value.valueCode)\n            }}\"\n            for=\"{{\n              createAttributeValueIdForConfigurator(attribute, value.valueCode)\n            }}\"\n            aria-hidden=\"true\"\n            class=\"cx-configurator-attribute-value-label form-check-label\"\n            >{{ getLabel(expMode, value.valueDisplay, value.valueCode) }}</label\n          >\n        </div>\n        <div class=\"cx-value-price\">\n          <cx-configurator-price\n            [formula]=\"extractValuePriceFormulaParameters(value)\"\n          ></cx-configurator-price>\n        </div>\n      </div>\n      <cx-configurator-attribute-quantity\n        *ngIf=\"value.selected && withQuantity && !withQuantityOnAttributeLevel\"\n        (changeQuantity)=\"onChangeValueQuantity($event, value.valueCode, i)\"\n        [quantityOptions]=\"\n          extractQuantityParameters(value.quantity, allowZeroValueQuantity)\n        \"\n      ></cx-configurator-attribute-quantity>\n    </ng-container>\n  </div>\n</fieldset>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorStorefrontUtilsService }, { type: i2.ConfiguratorAttributeQuantityService }, { type: i3.ConfiguratorAttributeCompositionContext }, { type: i4.ConfiguratorCommonsService }]; } });
//# sourceMappingURL=data:application/json;base64,