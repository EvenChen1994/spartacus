/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { ConfiguratorAttributeBaseComponent } from '../base/configurator-attribute-base.component';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../composition/configurator-attribute-composition.model";
import * as i3 from "../../../price/configurator-price.component";
import * as i4 from "@angular/common";
export class ConfiguratorAttributeReadOnlyComponent extends ConfiguratorAttributeBaseComponent {
    constructor(translationService, attributeComponentContext) {
        super();
        this.translationService = translationService;
        this.attributeComponentContext = attributeComponentContext;
        this.attribute = attributeComponentContext.attribute;
        this.group = attributeComponentContext.group.id;
        this.expMode = attributeComponentContext.expMode;
    }
    getCurrentValueName(attribute, value) {
        let name = '';
        if (attribute.selectedSingleValue && !value) {
            name = attribute.selectedSingleValue;
        }
        else if (attribute.userInput && !value) {
            name = attribute.userInput;
        }
        else if (value && value.valueDisplay) {
            name = value?.valueDisplay;
        }
        return name;
    }
    getAriaLabel(attribute, value) {
        let ariaLabel = '';
        if (value) {
            const valueName = this.getCurrentValueName(attribute, value);
            if (value.valuePrice && value.valuePrice?.value !== 0) {
                if (value.valuePriceTotal && value.valuePriceTotal?.value !== 0) {
                    ariaLabel = this.translate('configurator.a11y.readOnlyValueOfAttributeFullWithPrice', valueName, attribute, value.valuePriceTotal?.formattedValue);
                }
                else {
                    ariaLabel = this.translate('configurator.a11y.readOnlyValueOfAttributeFullWithPrice', valueName, attribute, value.valuePrice?.formattedValue);
                }
            }
            else {
                ariaLabel = this.translate('configurator.a11y.readOnlyValueOfAttributeFull', valueName, attribute);
            }
        }
        else {
            const valueName = this.getCurrentValueName(attribute);
            ariaLabel = this.translate('configurator.a11y.readOnlyValueOfAttributeFull', valueName, attribute);
        }
        return ariaLabel;
    }
    translate(resourceKey, valueName, attribute, formattedPrice) {
        let ariaLabel = '';
        const options = formattedPrice
            ? {
                value: valueName,
                attribute: attribute.label,
                price: formattedPrice,
            }
            : {
                value: valueName,
                attribute: attribute.label,
            };
        this.translationService
            .translate(resourceKey, options)
            .pipe(take(1))
            .subscribe((text) => (ariaLabel = text));
        return ariaLabel;
    }
    /**
     * Extract corresponding value price formula parameters.
     * For the read-only attribute types the complete price formula should be displayed at the value level.
     *
     * @param {Configurator.Value} value - Configurator value
     * @return {ConfiguratorPriceComponentOptions} - New price formula
     */
    extractValuePriceFormulaParameters(value) {
        return {
            quantity: value.quantity,
            price: value.valuePrice,
            priceTotal: value.valuePriceTotal,
            isLightedUp: value.selected,
        };
    }
}
ConfiguratorAttributeReadOnlyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeReadOnlyComponent, deps: [{ token: i1.TranslationService }, { token: i2.ConfiguratorAttributeCompositionContext }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeReadOnlyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeReadOnlyComponent, selector: "cx-configurator-attribute-read-only", usesInheritance: true, ngImport: i0, template: "<fieldset>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <ng-container\n      *ngIf=\"\n        attribute.values && attribute.values.length > 0;\n        else noStaticDomain\n      \"\n    >\n      <ng-container *ngFor=\"let value of attribute.values\">\n        <div *ngIf=\"value.selected\" class=\"form-check\">\n          <span\n            id=\"{{\n              createValueUiKey('label', attribute.name, value.valueCode)\n            }}\"\n            tabindex=\"0\"\n            class=\"cx-visually-hidden\"\n          >\n            {{ getAriaLabel(attribute, value) }}\n          </span>\n          <div class=\"cx-value-label-pair\">\n            <label\n              id=\"{{\n                createValueUiKey('label', attribute.name, value.valueCode)\n              }}\"\n              aria-hidden=\"true\"\n              class=\"cx-read-only-attribute-label\"\n              >{{\n                getLabel(expMode, value.valueDisplay, value.valueCode)\n              }}</label\n            >\n          </div>\n          <div class=\"cx-value-price\">\n            <cx-configurator-price\n              [formula]=\"extractValuePriceFormulaParameters(value)\"\n            ></cx-configurator-price>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n    <ng-template #noStaticDomain>\n      <ng-container *ngIf=\"attribute.selectedSingleValue\">\n        <span\n          id=\"{{\n            createValueUiKey(\n              'label',\n              attribute.name,\n              attribute.selectedSingleValue\n            )\n          }}\"\n          tabindex=\"0\"\n          class=\"cx-visually-hidden\"\n        >\n          {{ getAriaLabel(attribute) }}\n        </span>\n        <div class=\"cx-read-only-attribute-label\" aria-hidden=\"true\">\n          <span aria-hidden=\"true\">{{ attribute.selectedSingleValue }}</span>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"attribute.userInput\">\n        <span\n          id=\"{{\n            createValueUiKey('label', attribute.name, attribute.userInput)\n          }}\"\n          tabindex=\"0\"\n          class=\"cx-visually-hidden\"\n        >\n          {{ getAriaLabel(attribute) }}\n        </span>\n        <div class=\"cx-read-only-attribute-label\" aria-hidden=\"true\">\n          <span aria-hidden=\"true\">{{ attribute.userInput }}</span>\n        </div>\n      </ng-container>\n    </ng-template>\n  </div>\n</fieldset>\n", dependencies: [{ kind: "component", type: i3.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeReadOnlyComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-read-only', changeDetection: ChangeDetectionStrategy.OnPush, template: "<fieldset>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <ng-container\n      *ngIf=\"\n        attribute.values && attribute.values.length > 0;\n        else noStaticDomain\n      \"\n    >\n      <ng-container *ngFor=\"let value of attribute.values\">\n        <div *ngIf=\"value.selected\" class=\"form-check\">\n          <span\n            id=\"{{\n              createValueUiKey('label', attribute.name, value.valueCode)\n            }}\"\n            tabindex=\"0\"\n            class=\"cx-visually-hidden\"\n          >\n            {{ getAriaLabel(attribute, value) }}\n          </span>\n          <div class=\"cx-value-label-pair\">\n            <label\n              id=\"{{\n                createValueUiKey('label', attribute.name, value.valueCode)\n              }}\"\n              aria-hidden=\"true\"\n              class=\"cx-read-only-attribute-label\"\n              >{{\n                getLabel(expMode, value.valueDisplay, value.valueCode)\n              }}</label\n            >\n          </div>\n          <div class=\"cx-value-price\">\n            <cx-configurator-price\n              [formula]=\"extractValuePriceFormulaParameters(value)\"\n            ></cx-configurator-price>\n          </div>\n        </div>\n      </ng-container>\n    </ng-container>\n    <ng-template #noStaticDomain>\n      <ng-container *ngIf=\"attribute.selectedSingleValue\">\n        <span\n          id=\"{{\n            createValueUiKey(\n              'label',\n              attribute.name,\n              attribute.selectedSingleValue\n            )\n          }}\"\n          tabindex=\"0\"\n          class=\"cx-visually-hidden\"\n        >\n          {{ getAriaLabel(attribute) }}\n        </span>\n        <div class=\"cx-read-only-attribute-label\" aria-hidden=\"true\">\n          <span aria-hidden=\"true\">{{ attribute.selectedSingleValue }}</span>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"attribute.userInput\">\n        <span\n          id=\"{{\n            createValueUiKey('label', attribute.name, attribute.userInput)\n          }}\"\n          tabindex=\"0\"\n          class=\"cx-visually-hidden\"\n        >\n          {{ getAriaLabel(attribute) }}\n        </span>\n        <div class=\"cx-read-only-attribute-label\" aria-hidden=\"true\">\n          <span aria-hidden=\"true\">{{ attribute.userInput }}</span>\n        </div>\n      </ng-container>\n    </ng-template>\n  </div>\n</fieldset>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslationService }, { type: i2.ConfiguratorAttributeCompositionContext }]; } });
//# sourceMappingURL=data:application/json;base64,