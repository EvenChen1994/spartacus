/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { ConfiguratorAttributeSingleSelectionBaseComponent } from '../base/configurator-attribute-single-selection-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../quantity/configurator-attribute-quantity.service";
import * as i2 from "@spartacus/core";
import * as i3 from "../../composition/configurator-attribute-composition.model";
import * as i4 from "../../../../core/facade/configurator-commons.service";
import * as i5 from "../../../service/configurator-storefront-utils.service";
import * as i6 from "@angular/common";
import * as i7 from "../../quantity/configurator-attribute-quantity.component";
import * as i8 from "@angular/forms";
import * as i9 from "@spartacus/storefront";
import * as i10 from "../../../price/configurator-price.component";
import * as i11 from "../numeric-input-field/configurator-attribute-numeric-input-field.component";
import * as i12 from "../input-field/configurator-attribute-input-field.component";
export class ConfiguratorAttributeRadioButtonComponent extends ConfiguratorAttributeSingleSelectionBaseComponent {
    constructor(quantityService, translation, attributeComponentContext, configuratorCommonsService, configuratorStorefrontUtilsService) {
        super(quantityService, translation, attributeComponentContext, configuratorCommonsService, configuratorStorefrontUtilsService);
        this.quantityService = quantityService;
        this.translation = translation;
        this.attributeComponentContext = attributeComponentContext;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorStorefrontUtilsService = configuratorStorefrontUtilsService;
        this.attributeRadioButtonForm = new UntypedFormControl('');
    }
    ngOnInit() {
        this.attributeRadioButtonForm.setValue(this.attribute.selectedSingleValue);
    }
}
ConfiguratorAttributeRadioButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeRadioButtonComponent, deps: [{ token: i1.ConfiguratorAttributeQuantityService }, { token: i2.TranslationService }, { token: i3.ConfiguratorAttributeCompositionContext }, { token: i4.ConfiguratorCommonsService }, { token: i5.ConfiguratorStorefrontUtilsService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeRadioButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeRadioButtonComponent, selector: "cx-configurator-attribute-radio-button", usesInheritance: true, ngImport: i0, template: "<fieldset>\n  <legend style=\"display: none\">{{ attribute.label }}</legend>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div *ngIf=\"withQuantity\" class=\"cx-attribute-level-quantity-price\">\n      <cx-configurator-attribute-quantity\n        (changeQuantity)=\"onChangeQuantity($event)\"\n        [quantityOptions]=\"extractQuantityParameters()\"\n      ></cx-configurator-attribute-quantity>\n      <cx-configurator-price\n        [formula]=\"extractPriceFormulaParameters()\"\n      ></cx-configurator-price>\n    </div>\n\n    <div class=\"form-check\" *ngFor=\"let value of attribute.values\">\n      <div class=\"cx-value-label-pair\">\n        <input\n          id=\"{{\n            createAttributeValueIdForConfigurator(attribute, value.valueCode)\n          }}\"\n          class=\"form-check-input\"\n          type=\"radio\"\n          formcontrolname=\"attributeRadioButtonForm\"\n          [formControl]=\"attributeRadioButtonForm\"\n          [attr.required]=\"attribute.required\"\n          [value]=\"value.valueCode\"\n          name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n          attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n          [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n          [attr.aria-label]=\"getAriaLabel(value, attribute)\"\n          [attr.checked]=\"\n            attributeRadioButtonForm.value === value.valueCode\n              ? 'checked'\n              : null\n          \"\n          [attr.aria-describedby]=\"\n            createAttributeUiKey('label', attribute.name)\n          \"\n          (change)=\"onSelect(value.valueCode)\"\n        />\n        <label\n          id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n          for=\"{{\n            createAttributeValueIdForConfigurator(attribute, value.valueCode)\n          }}\"\n          aria-hidden=\"true\"\n          class=\"form-check-label form-radio-label\"\n          >{{ getLabel(expMode, value.valueDisplay, value.valueCode) }}</label\n        >\n      </div>\n\n      <div class=\"cx-value-price\">\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </div>\n    </div>\n\n    <cx-configurator-attribute-numeric-input-field\n      *ngIf=\"isAdditionalValueNumeric\"\n      class=\"cx-configurator-attribute-additional-value\"\n    ></cx-configurator-attribute-numeric-input-field>\n\n    <cx-configurator-attribute-input-field\n      *ngIf=\"isAdditionalValueAlphaNumeric\"\n      class=\"cx-configurator-attribute-additional-value\"\n    >\n    </cx-configurator-attribute-input-field>\n  </div>\n</fieldset>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfiguratorAttributeQuantityComponent, selector: "cx-configurator-attribute-quantity", inputs: ["quantityOptions"], outputs: ["changeQuantity"] }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i9.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i8.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i10.ConfiguratorPriceComponent, selector: "cx-configurator-price", inputs: ["formula"] }, { kind: "component", type: i11.ConfiguratorAttributeNumericInputFieldComponent, selector: "cx-configurator-attribute-numeric-input-field" }, { kind: "component", type: i12.ConfiguratorAttributeInputFieldComponent, selector: "cx-configurator-attribute-input-field" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeRadioButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-radio-button', changeDetection: ChangeDetectionStrategy.OnPush, template: "<fieldset>\n  <legend style=\"display: none\">{{ attribute.label }}</legend>\n  <div id=\"{{ createAttributeIdForConfigurator(attribute) }}\">\n    <div *ngIf=\"withQuantity\" class=\"cx-attribute-level-quantity-price\">\n      <cx-configurator-attribute-quantity\n        (changeQuantity)=\"onChangeQuantity($event)\"\n        [quantityOptions]=\"extractQuantityParameters()\"\n      ></cx-configurator-attribute-quantity>\n      <cx-configurator-price\n        [formula]=\"extractPriceFormulaParameters()\"\n      ></cx-configurator-price>\n    </div>\n\n    <div class=\"form-check\" *ngFor=\"let value of attribute.values\">\n      <div class=\"cx-value-label-pair\">\n        <input\n          id=\"{{\n            createAttributeValueIdForConfigurator(attribute, value.valueCode)\n          }}\"\n          class=\"form-check-input\"\n          type=\"radio\"\n          formcontrolname=\"attributeRadioButtonForm\"\n          [formControl]=\"attributeRadioButtonForm\"\n          [attr.required]=\"attribute.required\"\n          [value]=\"value.valueCode\"\n          name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n          attr.name=\"{{ createAttributeIdForConfigurator(attribute) }}\"\n          [cxFocus]=\"{ key: attribute.name + '-' + value.name }\"\n          [attr.aria-label]=\"getAriaLabel(value, attribute)\"\n          [attr.checked]=\"\n            attributeRadioButtonForm.value === value.valueCode\n              ? 'checked'\n              : null\n          \"\n          [attr.aria-describedby]=\"\n            createAttributeUiKey('label', attribute.name)\n          \"\n          (change)=\"onSelect(value.valueCode)\"\n        />\n        <label\n          id=\"{{ createValueUiKey('label', attribute.name, value.valueCode) }}\"\n          for=\"{{\n            createAttributeValueIdForConfigurator(attribute, value.valueCode)\n          }}\"\n          aria-hidden=\"true\"\n          class=\"form-check-label form-radio-label\"\n          >{{ getLabel(expMode, value.valueDisplay, value.valueCode) }}</label\n        >\n      </div>\n\n      <div class=\"cx-value-price\">\n        <cx-configurator-price\n          [formula]=\"extractValuePriceFormulaParameters(value)\"\n        ></cx-configurator-price>\n      </div>\n    </div>\n\n    <cx-configurator-attribute-numeric-input-field\n      *ngIf=\"isAdditionalValueNumeric\"\n      class=\"cx-configurator-attribute-additional-value\"\n    ></cx-configurator-attribute-numeric-input-field>\n\n    <cx-configurator-attribute-input-field\n      *ngIf=\"isAdditionalValueAlphaNumeric\"\n      class=\"cx-configurator-attribute-additional-value\"\n    >\n    </cx-configurator-attribute-input-field>\n  </div>\n</fieldset>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorAttributeQuantityService }, { type: i2.TranslationService }, { type: i3.ConfiguratorAttributeCompositionContext }, { type: i4.ConfiguratorCommonsService }, { type: i5.ConfiguratorStorefrontUtilsService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,