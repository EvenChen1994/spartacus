/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { ICON_TYPE } from '@spartacus/storefront';
import { map } from 'rxjs/operators';
import { Configurator } from '../../../core/model/configurator.model';
import { ConfiguratorAttributeBaseComponent } from '../types/base/configurator-attribute-base.component';
import * as i0 from "@angular/core";
import * as i1 from "../../service/configurator-storefront-utils.service";
import * as i2 from "../composition/configurator-attribute-composition.model";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "@spartacus/storefront";
export class ConfiguratorAttributeFooterComponent extends ConfiguratorAttributeBaseComponent {
    constructor(configUtils, attributeComponentContext, 
    // TODO (CXSPA-3392): for next major release remove featureConfigService
    featureConfigService) {
        super();
        this.configUtils = configUtils;
        this.attributeComponentContext = attributeComponentContext;
        this.featureConfigService = featureConfigService;
        this.iconType = ICON_TYPE;
        this.attribute = attributeComponentContext.attribute;
        this.owner = attributeComponentContext.owner;
        this.groupId = attributeComponentContext.group.id;
    }
    ngOnInit() {
        /**
         * Show message that indicates that attribute is required in case attribute is a
         * free input field or a drop-dow list
         */
        this.showRequiredMessageForUserInput$ = this.configUtils
            .isCartEntryOrGroupVisited(this.owner, this.groupId)
            .pipe(map((result) => result ? this.needsRequiredAttributeErrorMsg() : false));
    }
    // TODO (CXSPA-3392): for next major release remove featureConfigService
    needsRequiredAttributeErrorMsg() {
        if (this.featureConfigService?.isLevel('6.2')) {
            // TODO: for next major release only these requirements should be proved
            return this.needsUserInputMsg() || this.needsDropDownMsg();
        }
        else {
            return this.needsUserInputMsg();
        }
    }
    needsDropDownMsg() {
        return (this.isRequiredErrorMsg(this.attribute) &&
            this.isDropDown(this.attribute) &&
            this.isNoValueSelected(this.attribute));
    }
    /**
     * Checks if attribute is a user input typed attribute with empty value.
     * Method will return false for domain based attributes
     * @param {string} input - user input
     */
    isUserInputEmpty(input) {
        return input !== undefined && (!input.trim() || 0 === input.length);
    }
    needsUserInputMsg() {
        return (this.isRequiredErrorMsg(this.attribute) &&
            this.isUserInput(this.attribute) &&
            this.isUserInputEmpty(this.attribute.userInput));
    }
    /**
     * @deprecated since 6.2
     *
     * `needsUserInputMsg` method will be called instead.
     */
    needsUserInputMessage() {
        const uiType = this.attribute.uiType;
        const needsMessage = this.attribute.required &&
            this.attribute.incomplete &&
            (uiType === Configurator.UiType.STRING ||
                uiType === Configurator.UiType.NUMERIC) &&
            this.isUserInputEmpty(this.attribute.userInput);
        return needsMessage ?? false;
    }
}
ConfiguratorAttributeFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeFooterComponent, deps: [{ token: i1.ConfiguratorStorefrontUtilsService }, { token: i2.ConfiguratorAttributeCompositionContext }, { token: i3.FeatureConfigService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorAttributeFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorAttributeFooterComponent, selector: "cx-configurator-attribute-footer", usesInheritance: true, ngImport: i0, template: "<ng-container *cxFeatureLevel=\"'!6.2'\">\n  <div\n    *ngIf=\"showRequiredMessageForUserInput$ | async\"\n    class=\"cx-required-error-msg\"\n    id=\"{{ createAttributeUiKey('attribute-msg', attribute.name) }}\"\n    [attr.aria-label]=\"\n      'configurator.attribute.defaultRequiredMessage' | cxTranslate\n    \"\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    role=\"alert\"\n  >\n    <cx-icon [type]=\"iconType.ERROR\"></cx-icon>\n    {{ 'configurator.attribute.defaultRequiredMessage' | cxTranslate }}\n  </div>\n</ng-container>\n<ng-container *cxFeatureLevel=\"'6.2'\">\n  <div\n    *ngIf=\"showRequiredMessageForUserInput$ | async\"\n    class=\"cx-required-error-msg\"\n    id=\"{{ createAttributeUiKey('attribute-msg', attribute.name) }}\"\n    [attr.aria-label]=\"\n      isUserInput(attribute)\n        ? ('configurator.attribute.defaultRequiredMessage' | cxTranslate)\n        : ('configurator.attribute.singleSelectRequiredMessage' | cxTranslate)\n    \"\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    role=\"alert\"\n  >\n    <cx-icon [type]=\"iconType.ERROR\"></cx-icon>\n    <ng-container *ngIf=\"isUserInput(attribute)\">\n      {{ 'configurator.attribute.defaultRequiredMessage' | cxTranslate }}\n    </ng-container>\n    <ng-container *ngIf=\"isDropDown(attribute)\">\n      {{ 'configurator.attribute.singleSelectRequiredMessage' | cxTranslate }}\n    </ng-container>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i3.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorAttributeFooterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-attribute-footer', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *cxFeatureLevel=\"'!6.2'\">\n  <div\n    *ngIf=\"showRequiredMessageForUserInput$ | async\"\n    class=\"cx-required-error-msg\"\n    id=\"{{ createAttributeUiKey('attribute-msg', attribute.name) }}\"\n    [attr.aria-label]=\"\n      'configurator.attribute.defaultRequiredMessage' | cxTranslate\n    \"\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    role=\"alert\"\n  >\n    <cx-icon [type]=\"iconType.ERROR\"></cx-icon>\n    {{ 'configurator.attribute.defaultRequiredMessage' | cxTranslate }}\n  </div>\n</ng-container>\n<ng-container *cxFeatureLevel=\"'6.2'\">\n  <div\n    *ngIf=\"showRequiredMessageForUserInput$ | async\"\n    class=\"cx-required-error-msg\"\n    id=\"{{ createAttributeUiKey('attribute-msg', attribute.name) }}\"\n    [attr.aria-label]=\"\n      isUserInput(attribute)\n        ? ('configurator.attribute.defaultRequiredMessage' | cxTranslate)\n        : ('configurator.attribute.singleSelectRequiredMessage' | cxTranslate)\n    \"\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    role=\"alert\"\n  >\n    <cx-icon [type]=\"iconType.ERROR\"></cx-icon>\n    <ng-container *ngIf=\"isUserInput(attribute)\">\n      {{ 'configurator.attribute.defaultRequiredMessage' | cxTranslate }}\n    </ng-container>\n    <ng-container *ngIf=\"isDropDown(attribute)\">\n      {{ 'configurator.attribute.singleSelectRequiredMessage' | cxTranslate }}\n    </ng-container>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorStorefrontUtilsService }, { type: i2.ConfiguratorAttributeCompositionContext }, { type: i3.FeatureConfigService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,