/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "../../core/facade/configurator-groups.service";
import * as i3 from "@spartacus/core";
import * as i4 from "../service/configurator-storefront-utils.service";
import * as i5 from "../../core/services/configurator-expert-mode.service";
import * as i6 from "@angular/common";
import * as i7 from "../conflict-description/configurator-conflict-description.component";
import * as i8 from "../conflict-suggestion/configurator-conflict-suggestion.component";
import * as i9 from "../attribute/composition/configurator-attribute-composition.directive";
export class ConfiguratorGroupComponent {
    constructor(configuratorCommonsService, configuratorGroupsService, languageService, configUtils, configExpertModeService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorGroupsService = configuratorGroupsService;
        this.languageService = languageService;
        this.configUtils = configUtils;
        this.configExpertModeService = configExpertModeService;
        this.typePrefix = 'AttributeType_';
        this.activeLanguage$ = this.languageService.getActive();
        this.uiType = Configurator.UiType;
    }
    /**
     * Updates a configuration, specified by the configuration form update event.
     *
     * @param {ConfigFormUpdateEvent} event - Configuration form update event
     */
    updateConfiguration(event) {
        this.configuratorCommonsService.updateConfiguration(event.ownerKey, event.changedAttribute, event.updateType);
    }
    /**
     * Verifies whether the current group type is conflict one.
     *
     * @param {Configurator.GroupType | undefined} groupType - Group type
     * @return {boolean} - 'True' if the current group is conflict one, otherwise 'false'.
     */
    isConflictGroupType(groupType) {
        return groupType
            ? this.configuratorGroupsService.isConflictGroupType(groupType)
            : false;
    }
    /**
     * Display group description box only for conflict groups with a given group name (i.e. a conflict description)
     *
     * @param {Configurator.Group} group - Group
     * @returns {boolean} - 'True' if conflict description box should be displayed, otherwise 'false'.
     */
    displayConflictDescription(group) {
        return (group.groupType !== undefined &&
            this.configuratorGroupsService.isConflictGroupType(group.groupType) &&
            group.name !== '');
    }
    /**
     * Generates a group ID.
     *
     * @param {string} groupId - group ID
     * @returns {string | undefined} - generated group ID
     */
    createGroupId(groupId) {
        return this.configUtils.createGroupId(groupId);
    }
    /**
     * Retrieves information whether the expert mode is active.
     *
     * @returns {Observable<boolean> | undefined } - 'True' if the expert mode is active, otherwise 'false'.
     */
    get expMode() {
        return this.configExpertModeService.getExpModeActive();
    }
    getComponentKey(attribute) {
        return attribute.uiTypeVariation?.includes(Configurator.CustomUiTypeIndicator)
            ? this.typePrefix + attribute.uiTypeVariation
            : this.typePrefix + attribute.uiType;
    }
}
ConfiguratorGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorGroupComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorGroupsService }, { token: i3.LanguageService }, { token: i4.ConfiguratorStorefrontUtilsService }, { token: i5.ConfiguratorExpertModeService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorGroupComponent, selector: "cx-configurator-group", inputs: { group: "group", owner: "owner", isNavigationToGroupEnabled: "isNavigationToGroupEnabled" }, ngImport: i0, template: "<div id=\"{{ createGroupId(group.id) }}\" role=\"tabpanel\">\n  <ng-container *ngIf=\"displayConflictDescription(group)\">\n    <cx-configurator-conflict-description\n      [currentGroup]=\"group\"\n    ></cx-configurator-conflict-description>\n  </ng-container>\n  <div\n    class=\"cx-group-attribute\"\n    [class.cx-hidden]=\"!attribute.visible\"\n    *ngFor=\"let attribute of group.attributes; let indexOfAttribute = index\"\n  >\n    <ng-container *ngIf=\"isConflictGroupType(group.groupType)\">\n      <cx-configurator-conflict-suggestion\n        [currentGroup]=\"group\"\n        [attribute]=\"attribute\"\n        [suggestionNumber]=\"indexOfAttribute\"\n      ></cx-configurator-conflict-suggestion>\n    </ng-container>\n\n    <ng-container *ngIf=\"activeLanguage$ | async as activeLanguage\">\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: 'Header',\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false,\n          isNavigationToGroupEnabled: isNavigationToGroupEnabled\n        }\"\n      ></div>\n\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: getComponentKey(attribute),\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false\n        }\"\n      ></div>\n\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: 'Footer',\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false\n        }\"\n      ></div>\n    </ng-container>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i7.ConfiguratorConflictDescriptionComponent, selector: "cx-configurator-conflict-description", inputs: ["currentGroup"] }, { kind: "component", type: i8.ConfiguratorConflictSuggestionComponent, selector: "cx-configurator-conflict-suggestion", inputs: ["currentGroup", "attribute", "suggestionNumber"] }, { kind: "directive", type: i9.ConfiguratorAttributeCompositionDirective, selector: "[cxConfiguratorAttributeComponent]", inputs: ["cxConfiguratorAttributeComponent"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-group', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div id=\"{{ createGroupId(group.id) }}\" role=\"tabpanel\">\n  <ng-container *ngIf=\"displayConflictDescription(group)\">\n    <cx-configurator-conflict-description\n      [currentGroup]=\"group\"\n    ></cx-configurator-conflict-description>\n  </ng-container>\n  <div\n    class=\"cx-group-attribute\"\n    [class.cx-hidden]=\"!attribute.visible\"\n    *ngFor=\"let attribute of group.attributes; let indexOfAttribute = index\"\n  >\n    <ng-container *ngIf=\"isConflictGroupType(group.groupType)\">\n      <cx-configurator-conflict-suggestion\n        [currentGroup]=\"group\"\n        [attribute]=\"attribute\"\n        [suggestionNumber]=\"indexOfAttribute\"\n      ></cx-configurator-conflict-suggestion>\n    </ng-container>\n\n    <ng-container *ngIf=\"activeLanguage$ | async as activeLanguage\">\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: 'Header',\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false,\n          isNavigationToGroupEnabled: isNavigationToGroupEnabled\n        }\"\n      ></div>\n\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: getComponentKey(attribute),\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false\n        }\"\n      ></div>\n\n      <div\n        [cxConfiguratorAttributeComponent]=\"{\n          componentKey: 'Footer',\n          attribute: attribute,\n          owner: owner,\n          group: group,\n          language: activeLanguage,\n          expMode: (expMode | async) ?? false\n        }\"\n      ></div>\n    </ng-container>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorGroupsService }, { type: i3.LanguageService }, { type: i4.ConfiguratorStorefrontUtilsService }, { type: i5.ConfiguratorExpertModeService }]; }, propDecorators: { group: [{
                type: Input
            }], owner: [{
                type: Input
            }], isNavigationToGroupEnabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,