/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, Optional, } from '@angular/core';
import { ConfiguratorRouter, } from '@spartacus/product-configurator/common';
import { Subscription } from 'rxjs';
import { delay, distinctUntilChanged, filter, skip, switchMap, take, } from 'rxjs/operators';
import { GlobalMessageType, } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "../../core/facade/configurator-groups.service";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "../../core/services/configurator-expert-mode.service";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@spartacus/core";
import * as i7 from "@angular/common";
import * as i8 from "../group/configurator-group.component";
export class ConfiguratorFormComponent {
    constructor(configuratorCommonsService, configuratorGroupsService, configRouterExtractorService, configExpertModeService, launchDialogService, 
    // TODO:(CXSPA-3392) for next major release remove feature config service
    featureConfigservice, globalMessageService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configuratorGroupsService = configuratorGroupsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.configExpertModeService = configExpertModeService;
        this.launchDialogService = launchDialogService;
        this.featureConfigservice = featureConfigservice;
        this.globalMessageService = globalMessageService;
        this.subscription = new Subscription();
        this.routerData$ = this.configRouterExtractorService.extractRouterData();
        this.configuration$ = this.routerData$.pipe(filter((routerData) => routerData.pageType === ConfiguratorRouter.PageType.CONFIGURATION), switchMap((routerData) => {
            return this.configuratorCommonsService.getOrCreateConfiguration(routerData.owner, routerData.configIdTemplate);
        }));
        this.currentGroup$ = this.routerData$.pipe(switchMap((routerData) => this.configuratorGroupsService.getCurrentGroup(routerData.owner)));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    listenForConflictResolution() {
        this.subscription.add(this.routerData$
            .pipe(switchMap((routerData) => this.configuratorCommonsService.hasConflicts(routerData.owner)), distinctUntilChanged(), // we are interested only in status changes
        skip(1), // we skip the very first emission to avoid the change fron undefined -> no conflicts
        filter((hasConflicts) => !hasConflicts))
            .subscribe(() => this.displayConflictResolvedMessage()));
    }
    displayConflictResolvedMessage() {
        if (this.globalMessageService &&
            (this.featureConfigservice?.isLevel('6.1') ?? false)) {
            this.globalMessageService.add({ key: 'configurator.header.conflictsResolved' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }
    }
    ngOnInit() {
        this.listenForConflictResolution();
        this.routerData$
            .pipe(switchMap((routerData) => {
            return this.configuratorCommonsService.getConfiguration(routerData.owner);
        }), take(1))
            .subscribe((configuration) => {
            this.configuratorCommonsService.checkConflictSolverDialog(configuration.owner);
        });
        this.routerData$
            .pipe(filter((routingData) => routingData.displayRestartDialog === true), switchMap((routerData) => {
            return this.configuratorCommonsService.getConfiguration(routerData.owner);
        }), take(1), filter((configuration) => configuration.interactionState.newConfiguration === false), delay(0) // Delay because we first want the form to react on data changes
        )
            .subscribe((configuration) => {
            this.launchDialogService.openDialogAndSubscribe("CONFIGURATOR_RESTART_DIALOG" /* LAUNCH_CALLER.CONFIGURATOR_RESTART_DIALOG */, undefined, { owner: configuration.owner });
        });
        this.routerData$.pipe(take(1)).subscribe((routingData) => {
            //In case of resolving issues (if no conflict solver dialog is present!), check if the configuration contains conflicts,
            //if not, check if the configuration contains missing mandatory fields and show the group
            if (routingData.resolveIssues) {
                this.configuratorCommonsService
                    .hasConflicts(routingData.owner)
                    .pipe(take(1))
                    .subscribe((hasConflicts) => {
                    if (hasConflicts && !routingData.skipConflicts) {
                        this.configuratorGroupsService.navigateToConflictSolver(routingData.owner);
                        //Only check for Incomplete group when there are no conflicts or conflicts should be skipped
                    }
                    else {
                        this.configuratorGroupsService.navigateToFirstIncompleteGroup(routingData.owner);
                    }
                });
            }
            if (routingData.expMode) {
                this.configExpertModeService?.setExpModeRequested(routingData.expMode);
            }
        });
    }
    /**
     * Verifies whether the navigation to a conflict group is enabled.
     * @param configuration Current configuration
     * @returns {boolean} Returns 'true' if the navigation to a conflict group is enabled, otherwise 'false'.
     */
    isNavigationToGroupEnabled(configuration) {
        return !configuration.immediateConflictResolution;
    }
    /**
     * Checks if conflict solver dialog is active
     * @param configuration
     * @returns Conflict solver dialog active?
     */
    isDialogActive(configuration) {
        return configuration.interactionState.showConflictSolverDialog ?? false;
    }
}
ConfiguratorFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorFormComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorGroupsService }, { token: i3.ConfiguratorRouterExtractorService }, { token: i4.ConfiguratorExpertModeService }, { token: i5.LaunchDialogService }, { token: i6.FeatureConfigService, optional: true }, { token: i6.GlobalMessageService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorFormComponent, selector: "cx-configurator-form", ngImport: i0, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"!isDialogActive(configuration); else ghostForm\">\n    <ng-container *ngIf=\"currentGroup$ | async as group\">\n      <cx-configurator-group\n        [group]=\"group\"\n        [owner]=\"configuration.owner\"\n        [isNavigationToGroupEnabled]=\"isNavigationToGroupEnabled(configuration)\"\n      >\n      </cx-configurator-group>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div class=\"cx-ghost-text ghost\"></div>\n        <div class=\"cx-ghost-price ghost\"></div>\n      </div>\n    </div>\n\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n        <div class=\"cx-ghost-description-box\">\n          <div class=\"cx-ghost-description ghost\"></div>\n        </div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div\n          *ngFor=\"let number of [0, 1, 2]; let i = index\"\n          class=\"cx-ghost-radiobutton-value\"\n        >\n          <div class=\"cx-ghost-value-label-pair\">\n            <div class=\"cx-ghost-value-icon ghost\"></div>\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-value-price ghost\">\n            <ng-container *ngIf=\"i !== 0\">\n              <div class=\"cx-ghost-price\"></div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i8.ConfiguratorGroupComponent, selector: "cx-configurator-group", inputs: ["group", "owner", "isNavigationToGroupEnabled"] }, { kind: "pipe", type: i7.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"!isDialogActive(configuration); else ghostForm\">\n    <ng-container *ngIf=\"currentGroup$ | async as group\">\n      <cx-configurator-group\n        [group]=\"group\"\n        [owner]=\"configuration.owner\"\n        [isNavigationToGroupEnabled]=\"isNavigationToGroupEnabled(configuration)\"\n      >\n      </cx-configurator-group>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div class=\"cx-ghost-text ghost\"></div>\n        <div class=\"cx-ghost-price ghost\"></div>\n      </div>\n    </div>\n\n    <div class=\"cx-ghost-attribute\">\n      <div class=\"cx-ghost-header\">\n        <div class=\"cx-ghost-title ghost\"></div>\n        <div class=\"cx-ghost-icon ghost\"></div>\n        <div class=\"cx-ghost-description-box\">\n          <div class=\"cx-ghost-description ghost\"></div>\n        </div>\n      </div>\n      <div class=\"cx-ghost-body\">\n        <div\n          *ngFor=\"let number of [0, 1, 2]; let i = index\"\n          class=\"cx-ghost-radiobutton-value\"\n        >\n          <div class=\"cx-ghost-value-label-pair\">\n            <div class=\"cx-ghost-value-icon ghost\"></div>\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-value-price ghost\">\n            <ng-container *ngIf=\"i !== 0\">\n              <div class=\"cx-ghost-price\"></div>\n            </ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorGroupsService }, { type: i3.ConfiguratorRouterExtractorService }, { type: i4.ConfiguratorExpertModeService }, { type: i5.LaunchDialogService }, { type: i6.FeatureConfigService, decorators: [{
                    type: Optional
                }] }, { type: i6.GlobalMessageService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,