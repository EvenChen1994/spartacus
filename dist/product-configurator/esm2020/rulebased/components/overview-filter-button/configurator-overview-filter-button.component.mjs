/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, HostBinding, ViewChild } from '@angular/core';
import { filter, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "../../core/facade/configurator-commons.service";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "@angular/common";
import * as i5 from "../overview-filter-bar/configurator-overview-filter-bar.component";
import * as i6 from "@spartacus/core";
export class ConfiguratorOverviewFilterButtonComponent {
    constructor(launchDialogService, configuratorCommonsService, configRouterExtractorService) {
        this.launchDialogService = launchDialogService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.ghostStyle = true;
        //TODO(CXSPA-3392) remove this member in next major, it is not used
        /**
         * @deprecated since 6.1. Use configurationWithOv$ instead
         */
        this.config$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService.getConfiguration(routerData.owner)), 
        // filter 'strict null check safe'
        filter((configuration) => configuration.overview != null), tap(() => {
            this.ghostStyle = false;
        }));
        this.configurationWithOv$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService.getConfiguration(routerData.owner)), 
        // filter 'strict null check safe'
        filter((configuration) => configuration.overview != null), tap(() => {
            this.ghostStyle = false;
        }));
    }
    /**
     * get the number of filters currently applied to the overview page
     *
     * @param {Configurator.Overview} overview - current configuration overview data
     * @returns {number} - number of applied filters
     */
    getNumFilters(overview) {
        return ((overview.attributeFilters?.length ?? 0) +
            (overview.groupFilters?.length ?? 0));
    }
    /**
     * opens the filter modal
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    openFilterModal(config) {
        this.launchDialogService.openDialogAndSubscribe("CONFIGURATOR_OV_FILTER" /* LAUNCH_CALLER.CONFIGURATOR_OV_FILTER */, this.filterButton, config);
    }
}
ConfiguratorOverviewFilterButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterButtonComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.ConfiguratorCommonsService }, { token: i3.ConfiguratorRouterExtractorService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewFilterButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorOverviewFilterButtonComponent, selector: "cx-configurator-overview-filter-button", host: { properties: { "class.ghost": "this.ghostStyle" } }, viewQueries: [{ propertyName: "filterButton", first: true, predicate: ["filterButton"], descendants: true }], ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    configurationWithOv$ | async as configurationWithOv;\n    else ghostFilterButton\n  \"\n>\n  <button\n    #filterButton\n    class=\"btn btn-secondary cx-config-filter-button\"\n    tabindex=\"0\"\n    (click)=\"openFilterModal(configurationWithOv)\"\n    title=\"{{\n      (getNumFilters(configurationWithOv.overview) > 0\n        ? 'configurator.a11y.filterOverviewWithCount'\n        : 'configurator.a11y.filterOverview'\n      )\n        | cxTranslate\n          : { numAppliedFilters: getNumFilters(configurationWithOv.overview) }\n    }}\"\n  >\n    {{\n      (getNumFilters(configurationWithOv.overview) > 0\n        ? 'configurator.button.filterOverviewWithCount'\n        : 'configurator.button.filterOverview'\n      )\n        | cxTranslate\n          : { numAppliedFilters: getNumFilters(configurationWithOv.overview) }\n    }}\n  </button>\n  <cx-configurator-overview-filter-bar\n    [config]=\"configurationWithOv\"\n  ></cx-configurator-overview-filter-bar>\n</ng-container>\n\n<ng-template #ghostFilterButton>\n  <div class=\"cx-ghost-filter-button ghost\"></div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.ConfiguratorOverviewFilterBarComponent, selector: "cx-configurator-overview-filter-bar", inputs: ["config"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i6.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-filter-button', template: "<ng-container\n  *ngIf=\"\n    configurationWithOv$ | async as configurationWithOv;\n    else ghostFilterButton\n  \"\n>\n  <button\n    #filterButton\n    class=\"btn btn-secondary cx-config-filter-button\"\n    tabindex=\"0\"\n    (click)=\"openFilterModal(configurationWithOv)\"\n    title=\"{{\n      (getNumFilters(configurationWithOv.overview) > 0\n        ? 'configurator.a11y.filterOverviewWithCount'\n        : 'configurator.a11y.filterOverview'\n      )\n        | cxTranslate\n          : { numAppliedFilters: getNumFilters(configurationWithOv.overview) }\n    }}\"\n  >\n    {{\n      (getNumFilters(configurationWithOv.overview) > 0\n        ? 'configurator.button.filterOverviewWithCount'\n        : 'configurator.button.filterOverview'\n      )\n        | cxTranslate\n          : { numAppliedFilters: getNumFilters(configurationWithOv.overview) }\n    }}\n  </button>\n  <cx-configurator-overview-filter-bar\n    [config]=\"configurationWithOv\"\n  ></cx-configurator-overview-filter-bar>\n</ng-container>\n\n<ng-template #ghostFilterButton>\n  <div class=\"cx-ghost-filter-button ghost\"></div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.ConfiguratorCommonsService }, { type: i3.ConfiguratorRouterExtractorService }]; }, propDecorators: { filterButton: [{
                type: ViewChild,
                args: ['filterButton']
            }], ghostStyle: [{
                type: HostBinding,
                args: ['class.ghost']
            }] } });
//# sourceMappingURL=data:application/json;base64,