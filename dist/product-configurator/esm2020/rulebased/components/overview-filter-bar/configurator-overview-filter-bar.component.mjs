/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Input } from '@angular/core';
import { ICON_TYPE } from '@spartacus/storefront';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@angular/common";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@spartacus/core";
export class ConfiguratorOverviewFilterBarComponent {
    constructor(configuratorCommonsService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.iconTypes = ICON_TYPE;
        this.attributeFilterTypes = Configurator.OverviewFilter;
    }
    /**
     * gets the description for the given group id
     *
     * @param {string} groupId groupId
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    getGroupFilterDescription(overview, groupId) {
        return (overview.possibleGroups?.find((group) => group.id === groupId)
            ?.groupDescription ?? '');
    }
    /**
     * removes the given attribute filter and updates the configuration overview accordingly
     *
     * @param {Configurator.OverviewFilter} attrToRemove attribute filter to remove
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    onAttrFilterRemove(config, attrToRemove) {
        let [attrFilters, groupFilters] = this.getInputFilters(config.overview);
        attrFilters = attrFilters.filter((attrFilterName) => attrToRemove !== attrFilterName);
        this.configuratorCommonsService.updateConfigurationOverview(this.createInputConfig(config, attrFilters, groupFilters));
    }
    /**
     * removes the given group filter and updates the configuration overview accordingly
     *
     * @param {string} groupIdToRemove id of the group to be removed from filtering
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    onGroupFilterRemove(config, groupIdToRemove) {
        let [attrFilters, groupFilters] = this.getInputFilters(config.overview);
        groupFilters = groupFilters.filter((groupId) => groupIdToRemove !== groupId);
        this.configuratorCommonsService.updateConfigurationOverview(this.createInputConfig(config, attrFilters, groupFilters));
    }
    /**
     * check whether the button to remove all filters should be shown
     *
     * @param {Configurator.Overview} overview - current configuration overview data
     * @returns {boolean} - 'true' only if the button to remove all filters should be shown
     */
    isShowRemoveAll(overview) {
        const numFilters = (overview.attributeFilters?.length ?? 0) +
            (overview.groupFilters?.length ?? 0);
        return numFilters > 1;
    }
    /**
     * removes all filters and updates the configuration overview accordingly
     *
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    onRemoveAll(config) {
        this.configuratorCommonsService.updateConfigurationOverview(this.createInputConfig(config, [], []));
    }
    getInputFilters(overview) {
        return [overview.attributeFilters ?? [], overview.groupFilters ?? []];
    }
    createInputConfig(config, attrFilters, groupFilers) {
        return {
            ...config,
            overview: {
                configId: config.configId,
                productCode: config.productCode,
                attributeFilters: attrFilters,
                groupFilters: groupFilers,
                possibleGroups: config.overview?.possibleGroups,
            },
        };
    }
}
ConfiguratorOverviewFilterBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterBarComponent, deps: [{ token: i1.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewFilterBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorOverviewFilterBarComponent, selector: "cx-configurator-overview-filter-bar", inputs: { config: "config" }, ngImport: i0, template: "<ng-container\n  *ngFor=\"let filter of config.overview.attributeFilters; let i = index\"\n>\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{\n      (filter === attributeFilterTypes.PRICE_RELEVANT\n        ? 'configurator.overviewFilter.removeByPrice'\n        : 'configurator.overviewFilter.removeMySelections'\n      ) | cxTranslate\n    }}\"\n    (click)=\"onAttrFilterRemove(config, filter)\"\n  >\n    {{\n      (filter === attributeFilterTypes.PRICE_RELEVANT\n        ? 'configurator.overviewFilter.byPrice'\n        : 'configurator.overviewFilter.mySelections'\n      ) | cxTranslate\n    }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n\n<ng-container\n  *ngFor=\"let groupId of config.overview.groupFilters; let i = index\"\n>\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{\n      'configurator.overviewFilter.removeByGroup'\n        | cxTranslate\n          : { group: getGroupFilterDescription(config.overview, groupId) }\n    }}\"\n    (click)=\"onGroupFilterRemove(config, groupId)\"\n  >\n    {{ getGroupFilterDescription(config.overview, groupId) }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n\n<ng-container *ngIf=\"isShowRemoveAll(config.overview)\">\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{ 'configurator.overviewFilter.removeAllFilters' | cxTranslate }}\"\n    (click)=\"onRemoveAll(config)\"\n  >\n    {{ 'configurator.overviewFilter.removeAll' | cxTranslate }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-filter-bar', template: "<ng-container\n  *ngFor=\"let filter of config.overview.attributeFilters; let i = index\"\n>\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{\n      (filter === attributeFilterTypes.PRICE_RELEVANT\n        ? 'configurator.overviewFilter.removeByPrice'\n        : 'configurator.overviewFilter.removeMySelections'\n      ) | cxTranslate\n    }}\"\n    (click)=\"onAttrFilterRemove(config, filter)\"\n  >\n    {{\n      (filter === attributeFilterTypes.PRICE_RELEVANT\n        ? 'configurator.overviewFilter.byPrice'\n        : 'configurator.overviewFilter.mySelections'\n      ) | cxTranslate\n    }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n\n<ng-container\n  *ngFor=\"let groupId of config.overview.groupFilters; let i = index\"\n>\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{\n      'configurator.overviewFilter.removeByGroup'\n        | cxTranslate\n          : { group: getGroupFilterDescription(config.overview, groupId) }\n    }}\"\n    (click)=\"onGroupFilterRemove(config, groupId)\"\n  >\n    {{ getGroupFilterDescription(config.overview, groupId) }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n\n<ng-container *ngIf=\"isShowRemoveAll(config.overview)\">\n  <button\n    class=\"cx-overview-filter-applied\"\n    title=\"{{ 'configurator.overviewFilter.removeAllFilters' | cxTranslate }}\"\n    (click)=\"onRemoveAll(config)\"\n  >\n    {{ 'configurator.overviewFilter.removeAll' | cxTranslate }}\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }]; }, propDecorators: { config: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,