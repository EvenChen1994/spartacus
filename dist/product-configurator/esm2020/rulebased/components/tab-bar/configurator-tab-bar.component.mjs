/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding, ViewChild, } from '@angular/core';
import { ConfiguratorRouter, } from '@spartacus/product-configurator/common';
import { map, switchMap, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/product-configurator/common";
import * as i2 from "../../core/facade/configurator-commons.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
import * as i5 from "@spartacus/core";
export class ConfiguratorTabBarComponent {
    /**
     * Returns the tabindex for the configuration tab.
     * The configuration tab is excluded from the tab chain if currently the overview page is displayed.
     * @returns tabindex of the configuration tab
     */
    getTabIndexConfigTab() {
        let tabIndex = 0;
        this.isOverviewPage$.pipe(take(1)).subscribe((isOvPage) => {
            if (isOvPage) {
                tabIndex = -1;
            }
        });
        return tabIndex;
    }
    /**
     * Returns the tabindex for the overview tab.
     * The overview tab is excluded from the tab chain if currently the configuration page is displayed.
     * @returns tabindex of the overview tab
     */
    getTabIndexOverviewTab() {
        let tabIndex = 0;
        this.isOverviewPage$.pipe(take(1)).subscribe((isOvPage) => {
            if (!isOvPage) {
                tabIndex = -1;
            }
        });
        return tabIndex;
    }
    /**
     * Switches the focus of the tabs on pressing left or right arrow key.
     * @param {KeyboardEvent} event - Keyboard event
     * @param {string} currentTab - Current tab
     */
    switchTabOnArrowPress(event, currentTab) {
        if (event.code === 'ArrowLeft' || event.code === 'ArrowRight') {
            event.preventDefault();
            if (currentTab === '#configTab') {
                this.overviewTab.nativeElement?.focus();
            }
            else {
                this.configTab.nativeElement?.focus();
            }
        }
    }
    constructor(configRouterExtractorService, configuratorCommonsService) {
        this.configRouterExtractorService = configRouterExtractorService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.ghostStyle = true;
        this.routerData$ = this.configRouterExtractorService.extractRouterData();
        this.configuration$ = this.routerData$.pipe(switchMap((routerData) => this.configuratorCommonsService.getConfiguration(routerData.owner).pipe(tap(() => {
            this.ghostStyle = false;
        }))));
        this.isOverviewPage$ = this.routerData$.pipe(map((routerData) => routerData.pageType === ConfiguratorRouter.PageType.OVERVIEW));
    }
}
ConfiguratorTabBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorTabBarComponent, deps: [{ token: i1.ConfiguratorRouterExtractorService }, { token: i2.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorTabBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorTabBarComponent, selector: "cx-configurator-tab-bar", host: { properties: { "class.ghost": "this.ghostStyle" } }, viewQueries: [{ propertyName: "configTab", first: true, predicate: ["configTab"], descendants: true }, { propertyName: "overviewTab", first: true, predicate: ["overviewTab"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"routerData$ | async as routerData\">\n  <ng-container *ngIf=\"configuration$ | async; else ghostTabBar\">\n    <ng-container *ngIf=\"!routerData.displayOnly\">\n      <div class=\"cx-tab-bar\" role=\"tablist\">\n        <a\n          #configTab\n          [tabindex]=\"getTabIndexConfigTab()\"\n          role=\"tab\"\n          [class.active]=\"!(isOverviewPage$ | async)\"\n          [attr.aria-selected]=\"!(isOverviewPage$ | async)\"\n          (keydown)=\"switchTabOnArrowPress($event, '#configTab')\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [attr.aria-label]=\"\n            !(isOverviewPage$ | async)\n              ? ('configurator.a11y.configurationPage' | cxTranslate)\n              : ('configurator.a11y.configurationPageLink' | cxTranslate)\n          \"\n          >{{ 'configurator.tabBar.configuration' | cxTranslate }}</a\n        >\n        <a\n          #overviewTab\n          [tabindex]=\"getTabIndexOverviewTab()\"\n          role=\"tab\"\n          [class.active]=\"isOverviewPage$ | async\"\n          [attr.aria-selected]=\"isOverviewPage$ | async\"\n          (keydown)=\"switchTabOnArrowPress($event, '#overviewTab')\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configureOverview' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [attr.aria-label]=\"\n            (isOverviewPage$ | async)\n              ? ('configurator.a11y.overviewPage' | cxTranslate)\n              : ('configurator.a11y.overviewPageLink' | cxTranslate)\n          \"\n          >{{ 'configurator.tabBar.overview' | cxTranslate }}</a\n        >\n      </div>\n    </ng-container>\n  </ng-container>\n  <ng-template #ghostTabBar>\n    <div class=\"cx-ghost-tab-bar\"></div>\n  </ng-template>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i5.UrlPipe, name: "cxUrl" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorTabBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-tab-bar', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"routerData$ | async as routerData\">\n  <ng-container *ngIf=\"configuration$ | async; else ghostTabBar\">\n    <ng-container *ngIf=\"!routerData.displayOnly\">\n      <div class=\"cx-tab-bar\" role=\"tablist\">\n        <a\n          #configTab\n          [tabindex]=\"getTabIndexConfigTab()\"\n          role=\"tab\"\n          [class.active]=\"!(isOverviewPage$ | async)\"\n          [attr.aria-selected]=\"!(isOverviewPage$ | async)\"\n          (keydown)=\"switchTabOnArrowPress($event, '#configTab')\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configure' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [attr.aria-label]=\"\n            !(isOverviewPage$ | async)\n              ? ('configurator.a11y.configurationPage' | cxTranslate)\n              : ('configurator.a11y.configurationPageLink' | cxTranslate)\n          \"\n          >{{ 'configurator.tabBar.configuration' | cxTranslate }}</a\n        >\n        <a\n          #overviewTab\n          [tabindex]=\"getTabIndexOverviewTab()\"\n          role=\"tab\"\n          [class.active]=\"isOverviewPage$ | async\"\n          [attr.aria-selected]=\"isOverviewPage$ | async\"\n          (keydown)=\"switchTabOnArrowPress($event, '#overviewTab')\"\n          [routerLink]=\"\n            {\n              cxRoute: 'configureOverview' + routerData.owner.configuratorType,\n              params: {\n                entityKey: routerData.owner.id,\n                ownerType: routerData.owner.type\n              }\n            } | cxUrl\n          \"\n          [attr.aria-label]=\"\n            (isOverviewPage$ | async)\n              ? ('configurator.a11y.overviewPage' | cxTranslate)\n              : ('configurator.a11y.overviewPageLink' | cxTranslate)\n          \"\n          >{{ 'configurator.tabBar.overview' | cxTranslate }}</a\n        >\n      </div>\n    </ng-container>\n  </ng-container>\n  <ng-template #ghostTabBar>\n    <div class=\"cx-ghost-tab-bar\"></div>\n  </ng-template>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorRouterExtractorService }, { type: i2.ConfiguratorCommonsService }]; }, propDecorators: { ghostStyle: [{
                type: HostBinding,
                args: ['class.ghost']
            }], configTab: [{
                type: ViewChild,
                args: ['configTab']
            }], overviewTab: [{
                type: ViewChild,
                args: ['overviewTab']
            }] } });
//# sourceMappingURL=data:application/json;base64,