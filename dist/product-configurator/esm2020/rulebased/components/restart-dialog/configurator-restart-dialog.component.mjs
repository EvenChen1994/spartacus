/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import { CommonConfigurator } from '@spartacus/product-configurator/common';
import { ICON_TYPE, } from '@spartacus/storefront';
import { filter, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "../../core/facade/configurator-commons.service";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
export class ConfiguratorRestartDialogComponent {
    constructor(launchDialogService, configuratorCommonsService, routingService, productService) {
        this.launchDialogService = launchDialogService;
        this.configuratorCommonsService = configuratorCommonsService;
        this.routingService = routingService;
        this.productService = productService;
        this.dialogData$ = this.launchDialogService.data$.pipe(
        // In case conflict solver opens as well we need to filter out is data
        filter((dialogData) => dialogData && dialogData.owner));
        this.product$ = this.dialogData$.pipe(switchMap((dialogData) => this.productService.get(dialogData.owner.id)));
        this.iconTypes = ICON_TYPE;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: '.btn-primary',
            focusOnEscape: true,
        };
    }
    /**
     * Closes the dialog
     */
    close() {
        this.launchDialogService.closeDialog('Close restart configuration dialog');
    }
    /**
     * Resume with current configuration
     * @param product owning this configuration
     */
    resume(product) {
        this.close();
        // In case conflict solver was open as well, it was closed by the call above.
        // By navigating again we ensure it will open again.
        this.routingService.go({
            cxRoute: 'configure' + product.configuratorType,
            params: {
                ownerType: CommonConfigurator.OwnerType.PRODUCT,
                entityKey: product.code,
            },
        });
    }
    /**
     * Discards current configuration and requests a new default configuration
     * @param owner owner of the current configuration that will be reused for next configuration
     */
    restart(owner) {
        this.configuratorCommonsService.forceNewConfiguration(owner);
        this.close();
    }
    /**
     * Navigates back to product detail page without making a decision
     * @param product owning this configuration
     */
    backToPDP(product) {
        this.close();
        this.routingService.go({
            cxRoute: 'product',
            params: product,
        });
    }
}
ConfiguratorRestartDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorRestartDialogComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.ConfiguratorCommonsService }, { token: i3.RoutingService }, { token: i3.ProductService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorRestartDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorRestartDialogComponent, selector: "cx-configurator-restart-dialog", ngImport: i0, template: "<div class=\"cx-modal-container\">\n  <ng-container *ngIf=\"dialogData$ | async as dialogData\">\n    <ng-container *ngIf=\"product$ | async as product\">\n      <div\n        class=\"cx-modal-content\"\n        [cxFocus]=\"focusConfig\"\n        (esc)=\"backToPDP(product)\"\n      >\n        <div class=\"cx-dialog-header modal-header\">\n          <div class=\"cx-dialog-title modal-title\">\n            {{ 'configurator.restartDialog.title' | cxTranslate }}\n          </div>\n          <button\n            title=\"{{ 'configurator.a11y.closeRestartDialog' | cxTranslate }}\"\n            type=\"button\"\n            class=\"close\"\n            (click)=\"backToPDP(product)\"\n          >\n            <span aria-hidden=\"true\">\n              <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n            </span>\n          </button>\n        </div>\n\n        <div class=\"cx-dialog-body modal-body\">\n          <div id=\"cx-configurator-restart-dialog-description\">\n            {{ 'configurator.restartDialog.description' | cxTranslate }}\n          </div>\n          <button\n            class=\"btn btn-primary btn-block\"\n            (click)=\"resume(product)\"\n            aria-describedby=\"cx-configurator-restart-dialog-description\"\n          >\n            {{ 'configurator.restartDialog.resumeButton' | cxTranslate }}\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary btn-block\"\n            (click)=\"restart(dialogData.owner)\"\n            aria-describedby=\"cx-configurator-restart-dialog-description\"\n          >\n            {{ 'configurator.restartDialog.restartButton' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorRestartDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-restart-dialog', template: "<div class=\"cx-modal-container\">\n  <ng-container *ngIf=\"dialogData$ | async as dialogData\">\n    <ng-container *ngIf=\"product$ | async as product\">\n      <div\n        class=\"cx-modal-content\"\n        [cxFocus]=\"focusConfig\"\n        (esc)=\"backToPDP(product)\"\n      >\n        <div class=\"cx-dialog-header modal-header\">\n          <div class=\"cx-dialog-title modal-title\">\n            {{ 'configurator.restartDialog.title' | cxTranslate }}\n          </div>\n          <button\n            title=\"{{ 'configurator.a11y.closeRestartDialog' | cxTranslate }}\"\n            type=\"button\"\n            class=\"close\"\n            (click)=\"backToPDP(product)\"\n          >\n            <span aria-hidden=\"true\">\n              <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n            </span>\n          </button>\n        </div>\n\n        <div class=\"cx-dialog-body modal-body\">\n          <div id=\"cx-configurator-restart-dialog-description\">\n            {{ 'configurator.restartDialog.description' | cxTranslate }}\n          </div>\n          <button\n            class=\"btn btn-primary btn-block\"\n            (click)=\"resume(product)\"\n            aria-describedby=\"cx-configurator-restart-dialog-description\"\n          >\n            {{ 'configurator.restartDialog.resumeButton' | cxTranslate }}\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary btn-block\"\n            (click)=\"restart(dialogData.owner)\"\n            aria-describedby=\"cx-configurator-restart-dialog-description\"\n          >\n            {{ 'configurator.restartDialog.restartButton' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.ConfiguratorCommonsService }, { type: i3.RoutingService }, { type: i3.ProductService }]; } });
//# sourceMappingURL=data:application/json;base64,