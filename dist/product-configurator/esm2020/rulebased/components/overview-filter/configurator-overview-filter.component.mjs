/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Input } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../overview-filter-bar/configurator-overview-filter-bar.component";
import * as i5 from "@spartacus/core";
export class ConfiguratorOverviewFilterComponent {
    constructor(configuratorCommonsService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.showFilterBar = true;
        this.priceFilter = new UntypedFormControl('');
        this.mySelectionsFilter = new UntypedFormControl('');
        this.groupFilters = new Array();
    }
    ngOnChanges() {
        this.extractAttrFilterState(this.config);
        this.extractGroupFilterState(this.config);
    }
    /**
     * Updates the overview based on the filters currently selected in the UI
     *
     * @param {Configurator.ConfigurationWithOverview} config - current configuration with overview data
     */
    onFilter(config) {
        const inputConfig = this.createInputConfig(config, this.collectAttrFilters(), this.collectGroupFilters(config.overview));
        this.configuratorCommonsService.updateConfigurationOverview(inputConfig);
    }
    extractGroupFilterState(configuration) {
        this.groupFilters = [];
        configuration.overview.possibleGroups?.forEach((group) => {
            let isSelected = false;
            if (configuration.overview.groupFilters) {
                isSelected = configuration.overview.groupFilters.indexOf(group.id) >= 0;
            }
            this.groupFilters.push(new UntypedFormControl(isSelected));
        });
    }
    extractAttrFilterState(configuration) {
        if (configuration.overview.attributeFilters) {
            const isPriceFilterSelected = configuration.overview.attributeFilters.indexOf(Configurator.OverviewFilter.PRICE_RELEVANT) >= 0;
            this.priceFilter.setValue(isPriceFilterSelected);
            const isMySelectionsFilterSelected = configuration.overview.attributeFilters.indexOf(Configurator.OverviewFilter.USER_INPUT) >= 0;
            this.mySelectionsFilter.setValue(isMySelectionsFilterSelected);
        }
    }
    collectGroupFilters(overview) {
        const filters = [];
        let idx = 0;
        this.groupFilters.forEach((groupFilter) => {
            if (groupFilter.value && overview?.possibleGroups) {
                filters.push(overview.possibleGroups[idx].id);
            }
            idx++;
        });
        return filters;
    }
    collectAttrFilters() {
        const filters = [];
        if (this.priceFilter.value) {
            filters.push(Configurator.OverviewFilter.PRICE_RELEVANT);
        }
        if (this.mySelectionsFilter.value) {
            filters.push(Configurator.OverviewFilter.USER_INPUT);
        }
        return filters;
    }
    createInputConfig(config, attrFilters, groupFilers) {
        return {
            ...config,
            overview: {
                configId: config.configId,
                productCode: config.productCode,
                attributeFilters: attrFilters,
                groupFilters: groupFilers,
                possibleGroups: config.overview?.possibleGroups,
            },
        };
    }
}
ConfiguratorOverviewFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterComponent, deps: [{ token: i1.ConfiguratorCommonsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorOverviewFilterComponent, selector: "cx-configurator-overview-filter", inputs: { showFilterBar: "showFilterBar", config: "config" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngIf=\"showFilterBar\">\n  <cx-configurator-overview-filter-bar\n    [config]=\"config\"\n  ></cx-configurator-overview-filter-bar>\n</ng-container>\n<div class=\"cx-overview-filter-header\">\n  {{ 'configurator.overviewFilter.byOption' | cxTranslate }}\n</div>\n\n<div class=\"cx-overview-filter-option\">\n  <div class=\"form-check\">\n    <input\n      id=\"cx-configurator-overview-filter-option-price\"\n      type=\"checkbox\"\n      class=\"form-check-input\"\n      [formControl]=\"priceFilter\"\n      (change)=\"onFilter(config)\"\n      name=\"config-overview-price-filter\"\n      [attr.aria-label]=\"\n        'configurator.a11y.filterOverviewByPrice' | cxTranslate\n      \"\n    />\n    <label\n      class=\"form-check-label\"\n      for=\"cx-configurator-overview-filter-option-price\"\n    >\n      {{ 'configurator.overviewFilter.byPrice' | cxTranslate }}</label\n    >\n  </div>\n</div>\n\n<div class=\"cx-overview-filter-option\">\n  <div class=\"form-check\">\n    <input\n      id=\"cx-configurator-overview-filter-option-mySelections\"\n      type=\"checkbox\"\n      class=\"form-check-input\"\n      [formControl]=\"mySelectionsFilter\"\n      (change)=\"onFilter(config)\"\n      name=\"config-overview-my-selection-filter\"\n      [attr.aria-label]=\"\n        'configurator.a11y.filterOverviewByMySelections' | cxTranslate\n      \"\n    />\n    <label\n      class=\"form-check-label\"\n      for=\"cx-configurator-overview-filter-option-mySelections\"\n    >\n      {{ 'configurator.overviewFilter.mySelections' | cxTranslate }}</label\n    >\n  </div>\n</div>\n<ng-container *ngIf=\"config.overview.possibleGroups\">\n  <div class=\"cx-overview-filter-header\">\n    {{ 'configurator.overviewFilter.byGroup' | cxTranslate }}\n  </div>\n  <ng-container\n    *ngFor=\"let group of config.overview.possibleGroups; let i = index\"\n  >\n    <div class=\"cx-overview-filter-option\">\n      <div class=\"form-check\">\n        <input\n          id=\"{{ 'cx-configurator-overview-filter-option-group-' + group.id }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [formControl]=\"groupFilters[i]\"\n          (change)=\"onFilter(config)\"\n          name=\"{{ 'config-overview-group-filter-' + group.id }}\"\n          [attr.aria-label]=\"\n            'configurator.a11y.filterOverviewByGroup'\n              | cxTranslate: { groupName: group.groupDescription }\n          \"\n        />\n        <label\n          class=\"form-check-label\"\n          for=\"{{ 'cx-configurator-overview-filter-option-group-' + group.id }}\"\n          >{{ group.groupDescription }}</label\n        >\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i4.ConfiguratorOverviewFilterBarComponent, selector: "cx-configurator-overview-filter-bar", inputs: ["config"] }, { kind: "pipe", type: i5.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFilterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-filter', template: "<ng-container *ngIf=\"showFilterBar\">\n  <cx-configurator-overview-filter-bar\n    [config]=\"config\"\n  ></cx-configurator-overview-filter-bar>\n</ng-container>\n<div class=\"cx-overview-filter-header\">\n  {{ 'configurator.overviewFilter.byOption' | cxTranslate }}\n</div>\n\n<div class=\"cx-overview-filter-option\">\n  <div class=\"form-check\">\n    <input\n      id=\"cx-configurator-overview-filter-option-price\"\n      type=\"checkbox\"\n      class=\"form-check-input\"\n      [formControl]=\"priceFilter\"\n      (change)=\"onFilter(config)\"\n      name=\"config-overview-price-filter\"\n      [attr.aria-label]=\"\n        'configurator.a11y.filterOverviewByPrice' | cxTranslate\n      \"\n    />\n    <label\n      class=\"form-check-label\"\n      for=\"cx-configurator-overview-filter-option-price\"\n    >\n      {{ 'configurator.overviewFilter.byPrice' | cxTranslate }}</label\n    >\n  </div>\n</div>\n\n<div class=\"cx-overview-filter-option\">\n  <div class=\"form-check\">\n    <input\n      id=\"cx-configurator-overview-filter-option-mySelections\"\n      type=\"checkbox\"\n      class=\"form-check-input\"\n      [formControl]=\"mySelectionsFilter\"\n      (change)=\"onFilter(config)\"\n      name=\"config-overview-my-selection-filter\"\n      [attr.aria-label]=\"\n        'configurator.a11y.filterOverviewByMySelections' | cxTranslate\n      \"\n    />\n    <label\n      class=\"form-check-label\"\n      for=\"cx-configurator-overview-filter-option-mySelections\"\n    >\n      {{ 'configurator.overviewFilter.mySelections' | cxTranslate }}</label\n    >\n  </div>\n</div>\n<ng-container *ngIf=\"config.overview.possibleGroups\">\n  <div class=\"cx-overview-filter-header\">\n    {{ 'configurator.overviewFilter.byGroup' | cxTranslate }}\n  </div>\n  <ng-container\n    *ngFor=\"let group of config.overview.possibleGroups; let i = index\"\n  >\n    <div class=\"cx-overview-filter-option\">\n      <div class=\"form-check\">\n        <input\n          id=\"{{ 'cx-configurator-overview-filter-option-group-' + group.id }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [formControl]=\"groupFilters[i]\"\n          (change)=\"onFilter(config)\"\n          name=\"{{ 'config-overview-group-filter-' + group.id }}\"\n          [attr.aria-label]=\"\n            'configurator.a11y.filterOverviewByGroup'\n              | cxTranslate: { groupName: group.groupDescription }\n          \"\n        />\n        <label\n          class=\"form-check-label\"\n          for=\"{{ 'cx-configurator-overview-filter-option-group-' + group.id }}\"\n          >{{ group.groupDescription }}</label\n        >\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }]; }, propDecorators: { showFilterBar: [{
                type: Input
            }], config: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,