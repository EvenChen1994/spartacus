/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';
import { distinctUntilKeyChanged, filter, switchMap, tap, } from 'rxjs/operators';
import { Configurator } from '../../core/model/configurator.model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/facade/configurator-commons.service";
import * as i2 from "@spartacus/product-configurator/common";
import * as i3 from "../service/configurator-storefront-utils.service";
import * as i4 from "@angular/common";
import * as i5 from "../overview-attribute/configurator-overview-attribute.component";
import * as i6 from "../overview-bundle-attribute/configurator-overview-bundle-attribute.component";
import * as i7 from "@spartacus/core";
export class ConfiguratorOverviewFormComponent {
    constructor(configuratorCommonsService, configRouterExtractorService, configuratorStorefrontUtilsService) {
        this.configuratorCommonsService = configuratorCommonsService;
        this.configRouterExtractorService = configRouterExtractorService;
        this.configuratorStorefrontUtilsService = configuratorStorefrontUtilsService;
        this.ghostStyle = true;
        this.attributeOverviewType = Configurator.AttributeOverviewType;
        this.configuration$ = this.configRouterExtractorService.extractRouterData().pipe(switchMap((routerData) => this.configuratorCommonsService.getOrCreateConfiguration(routerData.owner)), distinctUntilKeyChanged('configId'), switchMap((configuration) => this.configuratorCommonsService.getConfigurationWithOverview(configuration)), filter((configuration) => configuration.overview != null), tap(() => {
            this.ghostStyle = false;
        }));
    }
    /**
     * Does the configuration contain any selected attribute values?
     * @param {Configurator.Configuration} configuration - Current configuration
     * @returns {boolean} - Any attributes available
     */
    hasAttributes(configuration) {
        return this.hasGroupWithAttributes(configuration.overview?.groups);
    }
    hasGroupWithAttributes(groups) {
        if (groups) {
            let hasAttributes = groups.find((group) => (group.attributes ? group.attributes.length : 0) > 0) !== undefined;
            if (!hasAttributes) {
                hasAttributes =
                    groups.find((group) => this.hasGroupWithAttributes(group.subGroups)) !== undefined;
            }
            return hasAttributes;
        }
        else {
            return false;
        }
    }
    /**
     * Verifies whether the next or the previous attributes are same.
     *
     * @param {Configurator.AttributeOverview[]} attributes - Attribute array
     * @param {number} index - Index of the attribute in the array
     * @return {boolean} - 'True' if it is the same attribute, otherwise 'false'
     */
    isSameAttribute(attributes, index) {
        if (attributes.length > 1) {
            if (index === 0) {
                return (attributes[index]?.attribute === attributes[index + 1]?.attribute);
            }
            else {
                return (attributes[index]?.attribute === attributes[index - 1]?.attribute);
            }
        }
        return false;
    }
    /**
     * Retrieves the styling for the corresponding element.
     *
     * @param {Configurator.AttributeOverview[]} attributes - Attribute array
     * @param {number} index - Index of the attribute in the array
     * @return {string} - corresponding style class
     */
    getStyleClasses(attributes, index) {
        let styleClass = '';
        switch (attributes[index]?.type) {
            case this.attributeOverviewType.BUNDLE:
                styleClass += 'bundle';
                break;
            case this.attributeOverviewType.GENERAL:
                styleClass += 'general';
                break;
        }
        if (index === 0 || !this.isSameAttribute(attributes, index)) {
            styleClass += ' margin';
        }
        if (!this.isSameAttribute(attributes, index + 1) &&
            !styleClass.includes('bundle')) {
            styleClass += ' last-value-pair';
        }
        return styleClass;
    }
    /**
     * Retrieves the styling for the group levels.
     *
     * @param {number} level - Group level. 1 is top level.
     * @param {Configurator.GroupOverview[]} subGroups - subgroups array
     * @return {string} - corresponding style classes
     */
    getGroupLevelStyleClasses(level, subGroups) {
        let styleClass = 'cx-group';
        if (level === 1) {
            styleClass += ' topLevel';
            if (subGroups && subGroups.length > 0) {
                styleClass += ' subgroupTopLevel';
            }
        }
        else {
            styleClass += ' subgroup';
            styleClass += ' subgroupLevel' + level;
        }
        return styleClass;
    }
    /**
     * Retrieves a unique prefix ID.
     *
     * @param {string | undefined} prefix - prefix that we need to make the ID unique
     * @param {string} groupId - group ID
     * @returns {string} - prefix ID
     */
    getPrefixId(idPrefix, groupId) {
        return this.configuratorStorefrontUtilsService.getPrefixId(idPrefix, groupId);
    }
    /**
     * Retrieves the ids for the overview group headers
     *
     * @param {string} idPrefix - Prefix (reflects the parent groups in the hierarchy)
     * @param {string} groupId - local group id
     * @return {string} - unique group id
     */
    getGroupId(idPrefix, groupId) {
        return this.configuratorStorefrontUtilsService.createOvGroupId(idPrefix, groupId);
    }
}
ConfiguratorOverviewFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFormComponent, deps: [{ token: i1.ConfiguratorCommonsService }, { token: i2.ConfiguratorRouterExtractorService }, { token: i3.ConfiguratorStorefrontUtilsService }], target: i0.ɵɵFactoryTarget.Component });
ConfiguratorOverviewFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ConfiguratorOverviewFormComponent, selector: "cx-configurator-overview-form", host: { properties: { "class.ghost": "this.ghostStyle" } }, ngImport: i0, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"hasAttributes(configuration); else noAttributes\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        groups;\n        context: {\n          overviewGroups: configuration.overview?.groups,\n          level: 1,\n          idPrefix: ''\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #noAttributes>\n  <div class=\"cx-no-attribute-value-pairs\">\n    <h2>{{ 'configurator.overviewForm.noAttributeHeader' | cxTranslate }}</h2>\n    <p>{{ 'configurator.overviewForm.noAttributeText' | cxTranslate }}</p>\n  </div>\n</ng-template>\n\n<ng-template\n  #groups\n  let-overviewGroups=\"overviewGroups\"\n  let-level=\"level\"\n  let-idPrefix=\"idPrefix\"\n>\n  <span class=\"cx-visually-hidden\">\n    {{ 'configurator.a11y.listOfAttributesAndValues' | cxTranslate }}\n  </span>\n\n  <ng-container *ngFor=\"let group of overviewGroups\">\n    <div\n      id=\"{{ getGroupId(idPrefix, group.id) }}\"\n      [ngClass]=\"getGroupLevelStyleClasses(level, group.subGroups)\"\n    >\n      <span class=\"cx-visually-hidden\">\n        {{\n          'configurator.a11y.group'\n            | cxTranslate\n              : {\n                  group: group.groupDescription\n                }\n        }}\n      </span>\n      <h2 aria-hidden=\"true\">\n        <span>{{ group.groupDescription }}</span>\n      </h2>\n\n      <div\n        *ngFor=\"let attributeOverview of group.attributes; let i = index\"\n        class=\"cx-attribute-value-pair\"\n        [ngClass]=\"getStyleClasses(group.attributes, i)\"\n      >\n        <ng-container [ngSwitch]=\"attributeOverview?.type\">\n          <ng-container *ngSwitchCase=\"attributeOverviewType.GENERAL\">\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"attributeOverviewType.BUNDLE\">\n            <cx-configurator-cpq-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-cpq-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchDefault>\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n        </ng-container>\n      </div>\n      <ng-container *ngIf=\"group.subGroups?.length > 0\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            groups;\n            context: {\n              overviewGroups: group.subGroups,\n              level: level + 1,\n              idPrefix: getPrefixId(idPrefix, group.id)\n            }\n          \"\n        ></ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-group\">\n      <div class=\"cx-ghost-header ghost\"></div>\n      <div class=\"cx-ghost-body\">\n        <ng-container *ngFor=\"let number of [0, 1, 2, 3, 4, 5]\">\n          <div class=\"cx-ghost-attribute-value\">\n            <div class=\"cx-ghost-value ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-label\">\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-price ghost\"></div>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i4.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i5.ConfiguratorOverviewAttributeComponent, selector: "cx-configurator-overview-attribute", inputs: ["attributeOverview"] }, { kind: "component", type: i6.ConfiguratorOverviewBundleAttributeComponent, selector: "cx-configurator-cpq-overview-attribute", inputs: ["attributeOverview"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i7.TranslatePipe, name: "cxTranslate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorOverviewFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-configurator-overview-form', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"configuration$ | async as configuration; else ghostForm\">\n  <ng-container *ngIf=\"hasAttributes(configuration); else noAttributes\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        groups;\n        context: {\n          overviewGroups: configuration.overview?.groups,\n          level: 1,\n          idPrefix: ''\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #noAttributes>\n  <div class=\"cx-no-attribute-value-pairs\">\n    <h2>{{ 'configurator.overviewForm.noAttributeHeader' | cxTranslate }}</h2>\n    <p>{{ 'configurator.overviewForm.noAttributeText' | cxTranslate }}</p>\n  </div>\n</ng-template>\n\n<ng-template\n  #groups\n  let-overviewGroups=\"overviewGroups\"\n  let-level=\"level\"\n  let-idPrefix=\"idPrefix\"\n>\n  <span class=\"cx-visually-hidden\">\n    {{ 'configurator.a11y.listOfAttributesAndValues' | cxTranslate }}\n  </span>\n\n  <ng-container *ngFor=\"let group of overviewGroups\">\n    <div\n      id=\"{{ getGroupId(idPrefix, group.id) }}\"\n      [ngClass]=\"getGroupLevelStyleClasses(level, group.subGroups)\"\n    >\n      <span class=\"cx-visually-hidden\">\n        {{\n          'configurator.a11y.group'\n            | cxTranslate\n              : {\n                  group: group.groupDescription\n                }\n        }}\n      </span>\n      <h2 aria-hidden=\"true\">\n        <span>{{ group.groupDescription }}</span>\n      </h2>\n\n      <div\n        *ngFor=\"let attributeOverview of group.attributes; let i = index\"\n        class=\"cx-attribute-value-pair\"\n        [ngClass]=\"getStyleClasses(group.attributes, i)\"\n      >\n        <ng-container [ngSwitch]=\"attributeOverview?.type\">\n          <ng-container *ngSwitchCase=\"attributeOverviewType.GENERAL\">\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"attributeOverviewType.BUNDLE\">\n            <cx-configurator-cpq-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-cpq-overview-attribute>\n          </ng-container>\n\n          <ng-container *ngSwitchDefault>\n            <cx-configurator-overview-attribute\n              [attributeOverview]=\"attributeOverview\"\n            >\n            </cx-configurator-overview-attribute>\n          </ng-container>\n        </ng-container>\n      </div>\n      <ng-container *ngIf=\"group.subGroups?.length > 0\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            groups;\n            context: {\n              overviewGroups: group.subGroups,\n              level: level + 1,\n              idPrefix: getPrefixId(idPrefix, group.id)\n            }\n          \"\n        ></ng-container>\n      </ng-container>\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-template #ghostForm>\n  <ng-container *ngFor=\"let number of [0, 1, 2]\">\n    <div class=\"cx-ghost-group\">\n      <div class=\"cx-ghost-header ghost\"></div>\n      <div class=\"cx-ghost-body\">\n        <ng-container *ngFor=\"let number of [0, 1, 2, 3, 4, 5]\">\n          <div class=\"cx-ghost-attribute-value\">\n            <div class=\"cx-ghost-value ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-label\">\n            <div class=\"cx-ghost-label ghost\"></div>\n          </div>\n          <div class=\"cx-ghost-attribute-price ghost\"></div>\n        </ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ConfiguratorCommonsService }, { type: i2.ConfiguratorRouterExtractorService }, { type: i3.ConfiguratorStorefrontUtilsService }]; }, propDecorators: { ghostStyle: [{
                type: HostBinding,
                args: ['class.ghost']
            }] } });
//# sourceMappingURL=data:application/json;base64,