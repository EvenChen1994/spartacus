/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpErrorResponse } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { select } from '@ngrx/store';
import { CartActions } from '@spartacus/cart/base/core';
import { LoggerService, normalizeHttpError } from '@spartacus/core';
import { CommonConfigurator, ConfiguratorModelUtils, } from '@spartacus/product-configurator/common';
import { of } from 'rxjs';
import { catchError, map, switchMap, take } from 'rxjs/operators';
import { ConfiguratorActions } from '../actions/index';
import { ConfiguratorSelectors } from '../selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/rulebased-configurator.connector";
import * as i3 from "@spartacus/product-configurator/common";
import * as i4 from "../../facade/utils/configurator-utils.service";
import * as i5 from "@ngrx/store";
import * as i6 from "./configurator-basic-effect.service";
export const ERROR_MESSAGE_NO_ENTRY_NUMBER_FOUND = 'Entry number is required in addToCart response';
/**
 * Common configurator effects related to cart handling
 */
export class ConfiguratorCartEffects {
    constructor(actions$, configuratorCommonsConnector, commonConfigUtilsService, configuratorGroupUtilsService, store, configuratorBasicEffectService) {
        this.actions$ = actions$;
        this.configuratorCommonsConnector = configuratorCommonsConnector;
        this.commonConfigUtilsService = commonConfigUtilsService;
        this.configuratorGroupUtilsService = configuratorGroupUtilsService;
        this.store = store;
        this.configuratorBasicEffectService = configuratorBasicEffectService;
        this.logger = inject(LoggerService);
        this.addToCart$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.ADD_TO_CART), map((action) => action.payload), switchMap((payload) => {
            return this.configuratorCommonsConnector.addToCart(payload).pipe(switchMap((entry) => {
                const entryNumber = entry.entry?.entryNumber;
                if (entryNumber === undefined) {
                    throw Error(ERROR_MESSAGE_NO_ENTRY_NUMBER_FOUND);
                }
                else {
                    return [
                        new ConfiguratorActions.AddNextOwner({
                            ownerKey: payload.owner.key,
                            cartEntryNo: entryNumber.toString(),
                        }),
                        new CartActions.CartAddEntrySuccess({
                            ...entry,
                            userId: payload.userId,
                            cartId: payload.cartId,
                            productCode: payload.productCode,
                            quantity: payload.quantity,
                            deliveryModeChanged: entry.deliveryModeChanged,
                            entry: entry.entry,
                            quantityAdded: entry.quantityAdded,
                            statusCode: entry.statusCode,
                            statusMessage: entry.statusMessage,
                        }),
                    ];
                }
            }), catchError((error) => of(new CartActions.CartAddEntryFail({
                userId: payload.userId,
                cartId: payload.cartId,
                productCode: payload.productCode,
                quantity: payload.quantity,
                error: error instanceof HttpErrorResponse
                    ? normalizeHttpError(error, this.logger)
                    : error,
            }))));
        })));
        this.updateCartEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.UPDATE_CART_ENTRY), map((action) => action.payload), switchMap((payload) => {
            return this.configuratorCommonsConnector
                .updateConfigurationForCartEntry(payload)
                .pipe(switchMap((cartModification) => {
                return [
                    new CartActions.CartUpdateEntrySuccess({
                        userId: payload.userId,
                        cartId: payload.cartId,
                        entryNumber: payload.cartEntryNumber,
                        quantity: cartModification.quantity,
                    }),
                ];
            }), catchError((error) => of(new CartActions.CartUpdateEntryFail({
                userId: payload.userId,
                cartId: payload.cartId,
                entryNumber: payload.cartEntryNumber,
                error: normalizeHttpError(error, this.logger),
            }))));
        })));
        this.readConfigurationForCartEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.READ_CART_ENTRY_CONFIGURATION), switchMap((action) => {
            const parameters = action.payload;
            return this.configuratorCommonsConnector
                .readConfigurationForCartEntry(parameters)
                .pipe(switchMap((result) => {
                const updatePriceSummaryAction = new ConfiguratorActions.UpdatePriceSummary({
                    ...result,
                    interactionState: {
                        currentGroup: this.configuratorBasicEffectService.getFirstGroupWithAttributes(result, !result.immediateConflictResolution),
                    },
                });
                return [
                    new ConfiguratorActions.ReadCartEntryConfigurationSuccess(result),
                    updatePriceSummaryAction,
                    new ConfiguratorActions.SearchVariants(result),
                ];
            }), catchError((error) => [
                new ConfiguratorActions.ReadCartEntryConfigurationFail({
                    ownerKey: action.payload.owner.key,
                    error: normalizeHttpError(error, this.logger),
                }),
            ]));
        })));
        this.readConfigurationForOrderEntry$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.READ_ORDER_ENTRY_CONFIGURATION), switchMap((action) => {
            const parameters = action.payload;
            return this.configuratorCommonsConnector
                .readConfigurationForOrderEntry(parameters)
                .pipe(switchMap((result) => [
                new ConfiguratorActions.ReadOrderEntryConfigurationSuccess(result),
            ]), catchError((error) => [
                new ConfiguratorActions.ReadOrderEntryConfigurationFail({
                    ownerKey: action.payload.owner.key,
                    error: normalizeHttpError(error, this.logger),
                }),
            ]));
        })));
        this.removeCartBoundConfigurations$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.REMOVE_CART_BOUND_CONFIGURATIONS), switchMap(() => {
            return this.store.pipe(select(ConfiguratorSelectors.getConfigurationsState), take(1), map((configuratorState) => {
                const entities = configuratorState.configurations.entities;
                const ownerKeysToRemove = [];
                const ownerKeysProductBound = [];
                for (const ownerKey in entities) {
                    if (ownerKey.includes(CommonConfigurator.OwnerType.CART_ENTRY)) {
                        ownerKeysToRemove.push(ownerKey);
                    }
                    else if (ownerKey.includes(CommonConfigurator.OwnerType.PRODUCT)) {
                        ownerKeysProductBound.push(ownerKey);
                    }
                }
                ownerKeysProductBound.forEach((ownerKey) => {
                    const configuration = entities[ownerKey];
                    if (configuration.value?.nextOwner !== undefined) {
                        ownerKeysToRemove.push(ownerKey);
                    }
                });
                return new ConfiguratorActions.RemoveConfiguration({
                    ownerKey: ownerKeysToRemove,
                });
            }));
        })));
        this.addOwner$ = createEffect(() => this.actions$.pipe(ofType(ConfiguratorActions.ADD_NEXT_OWNER), switchMap((action) => {
            return this.store.pipe(select(ConfiguratorSelectors.getConfigurationFactory(action.payload.ownerKey)), take(1), switchMap((configuration) => {
                const newOwner = ConfiguratorModelUtils.createOwner(CommonConfigurator.OwnerType.CART_ENTRY, action.payload.cartEntryNo);
                this.commonConfigUtilsService.setOwnerKey(newOwner);
                return [
                    new ConfiguratorActions.SetNextOwnerCartEntry({
                        configuration: configuration,
                        cartEntryNo: action.payload.cartEntryNo,
                    }),
                    new ConfiguratorActions.SetInteractionState({
                        entityKey: newOwner.key,
                        interactionState: configuration.interactionState,
                    }),
                ];
            }));
        })));
    }
}
ConfiguratorCartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorCartEffects, deps: [{ token: i1.Actions }, { token: i2.RulebasedConfiguratorConnector }, { token: i3.CommonConfiguratorUtilsService }, { token: i4.ConfiguratorUtilsService }, { token: i5.Store }, { token: i6.ConfiguratorBasicEffectService }], target: i0.ɵɵFactoryTarget.Injectable });
ConfiguratorCartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorCartEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConfiguratorCartEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.RulebasedConfiguratorConnector }, { type: i3.CommonConfiguratorUtilsService }, { type: i4.ConfiguratorUtilsService }, { type: i5.Store }, { type: i6.ConfiguratorBasicEffectService }]; } });
//# sourceMappingURL=data:application/json;base64,