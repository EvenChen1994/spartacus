/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { CommonConfigurator, ConfiguratorModelUtils, } from '@spartacus/product-configurator/common';
import { Configurator } from '../../model/configurator.model';
import { ConfiguratorActions } from '../actions/index';
import { ConfiguratorStateUtils } from '../configurator-state-utils';
export const initialState = {
    configId: '',
    productCode: '',
    groups: [],
    flatGroups: [],
    interactionState: {
        currentGroup: undefined,
        groupsVisited: {},
        menuParentGroup: undefined,
    },
    owner: ConfiguratorModelUtils.createInitialOwner(),
};
export const initialStatePendingChanges = 0;
let reducerMap;
export function configuratorReducer(state = initialState, action) {
    ensureReducerMapCreated();
    if (reducerMap.has(action.type)) {
        return reducerMap.get(action.type)(state, action);
    }
    else {
        return state;
    }
}
function ensureReducerMapCreated() {
    if (reducerMap === undefined) {
        reducerMap = new Map();
        reducerMap.set(ConfiguratorActions.UPDATE_CONFIGURATION_FINALIZE_SUCCESS, handleActionUpdateConfigurationFinalizeSuccess);
        reducerMap.set(ConfiguratorActions.UPDATE_CART_ENTRY, handleActionUpdateCartEntry);
        reducerMap.set(ConfiguratorActions.CREATE_CONFIGURATION_SUCCESS, handleCreateSuccess);
        reducerMap.set(ConfiguratorActions.READ_CONFIGURATION_SUCCESS, handleReadSucess);
        reducerMap.set(ConfiguratorActions.READ_CART_ENTRY_CONFIGURATION_SUCCESS, handleCartEntryReadSucess);
        reducerMap.set(ConfiguratorActions.UPDATE_PRICE_SUMMARY_SUCCESS, handleUpdatePriceSummarySuccess);
        reducerMap.set(ConfiguratorActions.GET_CONFIGURATION_OVERVIEW_SUCCESS, handleGetConfigurationOverviewSuccess);
        reducerMap.set(ConfiguratorActions.UPDATE_CONFIGURATION_OVERVIEW_SUCCESS, handleUpdateConfigurationOverviewSuccess);
        reducerMap.set(ConfiguratorActions.SEARCH_VARIANTS_SUCCESS, handleSearchVariantsSuccess);
        reducerMap.set(ConfiguratorActions.READ_ORDER_ENTRY_CONFIGURATION_SUCCESS, handleReadOrderEntryConfigurationSuccess);
        reducerMap.set(ConfiguratorActions.SET_NEXT_OWNER_CART_ENTRY, handleSetNextOwnerCartEntry);
        reducerMap.set(ConfiguratorActions.SET_INTERACTION_STATE, handleSetInteractionState);
        reducerMap.set(ConfiguratorActions.SET_CURRENT_GROUP, handleSetCurrentGroup);
        reducerMap.set(ConfiguratorActions.SET_MENU_PARENT_GROUP, handleSetMenuParentGroup);
        reducerMap.set(ConfiguratorActions.SET_GROUPS_VISITED, handleSetGroupsVisited);
        reducerMap.set(ConfiguratorActions.DISMISS_CONFLICT_DIALOG, handleActionDismissConflictSolverDialog);
        reducerMap.set(ConfiguratorActions.CHECK_CONFLICT_DIALOG, handleActionCheckConflictSolverDialog);
        reducerMap.set(ConfiguratorActions.CHANGE_GROUP, handleChangeGroup);
    }
}
function handleActionUpdateConfigurationFinalizeSuccess(state, action) {
    const result = takeOverChanges(action, state);
    checkConflictSolverDialog(result);
    result.isCartEntryUpdateRequired = true;
    result.overview = undefined;
    if (state.interactionState.newConfiguration !== undefined) {
        result.interactionState.newConfiguration = false;
    }
    return result;
}
function checkConflictSolverDialog(configuration) {
    configuration.interactionState.showConflictSolverDialog =
        configuration.immediateConflictResolution && !configuration.consistent;
    if (configuration.interactionState.showConflictSolverDialog) {
        configuration.interactionState.issueNavigationDone = true;
    }
}
function handleActionDismissConflictSolverDialog(state, action) {
    if (action.type === ConfiguratorActions.DISMISS_CONFLICT_DIALOG) {
        const result = {
            ...state,
            interactionState: {
                ...state.interactionState,
                showConflictSolverDialog: false,
            },
        };
        return result;
    }
}
function handleActionCheckConflictSolverDialog(state) {
    const result = {
        ...state,
        interactionState: {
            ...state.interactionState,
        },
    };
    checkConflictSolverDialog(result);
    return result;
}
function handleActionUpdateCartEntry(state) {
    const result = { ...state };
    result.isCartEntryUpdateRequired = false;
    return result;
}
function handleCreateSuccess(state, action) {
    const result = setInitialCurrentGroup(takeOverChanges(action, state));
    checkConflictSolverDialog(result);
    result.interactionState.newConfiguration = result.newConfiguration;
    return result;
}
function handleReadSucess(state, action) {
    const result = setInitialCurrentGroup(takeOverChanges(action, state));
    checkConflictSolverDialog(result);
    return result;
}
function handleCartEntryReadSucess(state, action) {
    return setInitialCurrentGroup(takeOverChanges(action, state));
}
function handleUpdatePriceSummarySuccess(state, action) {
    return setInitialCurrentGroup(takeOverPricingChanges(action, state));
}
function handleGetConfigurationOverviewSuccess(state, action) {
    const content = {
        ...action.payload.overview,
        possibleGroups: action.payload.overview.groups,
    };
    return {
        ...state,
        overview: content,
        priceSummary: content.priceSummary,
        interactionState: {
            ...state.interactionState,
            issueNavigationDone: false,
        },
    };
}
function handleUpdateConfigurationOverviewSuccess(state, action) {
    const content = {
        ...action.payload.overview,
    };
    return {
        ...state,
        overview: content,
        priceSummary: content.priceSummary,
        interactionState: {
            ...state.interactionState,
            issueNavigationDone: false,
        },
    };
}
function handleSearchVariantsSuccess(state, action) {
    return {
        ...state,
        variants: action.payload.variants,
    };
}
function handleReadOrderEntryConfigurationSuccess(state, action) {
    const configuration = { ...action.payload };
    const result = {
        ...state,
        ...configuration,
        priceSummary: configuration.overview?.priceSummary,
    };
    return result;
}
function handleSetNextOwnerCartEntry(state, action) {
    const content = { ...action.payload.configuration };
    content.nextOwner = ConfiguratorModelUtils.createOwner(CommonConfigurator.OwnerType.CART_ENTRY, action.payload.cartEntryNo);
    const result = {
        ...state,
        ...content,
    };
    return result;
}
function handleSetInteractionState(state, action) {
    const newInteractionState = action.payload.interactionState;
    return {
        ...state,
        interactionState: newInteractionState,
    };
}
function handleSetCurrentGroup(state, action) {
    const newCurrentGroup = action.payload.currentGroup;
    const result = {
        ...state,
        interactionState: {
            ...state.interactionState,
            currentGroup: newCurrentGroup,
        },
    };
    checkConflictSolverDialog(result);
    return result;
}
function handleSetMenuParentGroup(state, action) {
    const newMenuParentGroup = action.payload.menuParentGroup;
    return {
        ...state,
        interactionState: {
            ...state.interactionState,
            menuParentGroup: newMenuParentGroup,
        },
    };
}
function handleSetGroupsVisited(state, action) {
    const groupIds = action.payload.visitedGroups;
    const changedInteractionState = {
        groupsVisited: {},
    };
    //Set Current state items
    if (state.interactionState.groupsVisited) {
        Object.keys(state.interactionState.groupsVisited).forEach((groupId) => setGroupsVisited(changedInteractionState, groupId));
    }
    //Add new Groups
    groupIds.forEach((groupId) => setGroupsVisited(changedInteractionState, groupId));
    return {
        ...state,
        interactionState: {
            ...state.interactionState,
            groupsVisited: changedInteractionState.groupsVisited,
        },
    };
}
function handleChangeGroup(state, action) {
    const isConflictResolutionMode = action.payload.conflictResolutionMode;
    return {
        ...state,
        interactionState: {
            ...state.interactionState,
            isConflictResolutionMode: isConflictResolutionMode,
        },
    };
}
function setGroupsVisited(changedInteractionState, groupId) {
    const groupsVisited = changedInteractionState.groupsVisited;
    if (groupsVisited) {
        groupsVisited[groupId] = true;
    }
}
function setInitialCurrentGroup(state) {
    if (state.interactionState.currentGroup) {
        return state;
    }
    let initialCurrentGroup;
    const flatGroups = state.flatGroups;
    if (flatGroups && flatGroups.length > 0) {
        initialCurrentGroup = state.immediateConflictResolution
            ? flatGroups.find((group) => !group.id.startsWith(Configurator.ConflictIdPrefix))?.id
            : flatGroups[0].id;
    }
    const menuParentGroup = initialCurrentGroup?.startsWith(Configurator.ConflictIdPrefix)
        ? Configurator.ConflictHeaderId
        : undefined;
    return {
        ...state,
        interactionState: {
            ...state.interactionState,
            currentGroup: initialCurrentGroup,
            menuParentGroup: menuParentGroup,
        },
    };
}
function takeOverChanges(action, state) {
    const content = { ...action.payload };
    const groups = content.groups.length > 0 ? content.groups : state.groups;
    const result = {
        ...state,
        ...content,
        groups: groups,
        interactionState: {
            ...state.interactionState,
            ...content.interactionState,
            showConflictSolverDialog: state.interactionState.showConflictSolverDialog,
            issueNavigationDone: true,
        },
    };
    return result;
}
function takeOverPricingChanges(action, state) {
    const content = { ...action.payload };
    const priceSupplements = content.priceSupplements;
    const groups = priceSupplements && priceSupplements.length > 0
        ? ConfiguratorStateUtils.mergeGroupsWithSupplements(state.groups, priceSupplements)
        : state.groups;
    const result = {
        ...state,
        ...content,
        groups: groups,
        interactionState: {
            ...state.interactionState,
            ...content.interactionState,
            issueNavigationDone: true,
        },
    };
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdG9yLnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvcHJvZHVjdC1jb25maWd1cmF0b3IvcnVsZWJhc2VkL2NvcmUvc3RhdGUvcmVkdWNlcnMvY29uZmlndXJhdG9yLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsc0JBQXNCLEdBQ3ZCLE1BQU0sd0NBQXdDLENBQUM7QUFFaEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBK0I7SUFDdEQsUUFBUSxFQUFFLEVBQUU7SUFDWixXQUFXLEVBQUUsRUFBRTtJQUNmLE1BQU0sRUFBRSxFQUFFO0lBQ1YsVUFBVSxFQUFFLEVBQUU7SUFDZCxnQkFBZ0IsRUFBRTtRQUNoQixZQUFZLEVBQUUsU0FBUztRQUN2QixhQUFhLEVBQUUsRUFBRTtRQUNqQixlQUFlLEVBQUUsU0FBUztLQUMzQjtJQUNELEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxrQkFBa0IsRUFBRTtDQUNuRCxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDO0FBRTVDLElBQUksVUFBNEIsQ0FBQztBQUVqQyxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BR2lEO0lBRWpELHVCQUF1QixFQUFFLENBQUM7SUFDMUIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvQixPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFD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O1lBQzNCLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyx3QkFBd0I7WUFDekUsbUJBQW1CLEVBQUUsSUFBSTtTQUMxQjtLQUNGLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FDN0IsTUFBcUQsRUFDckQsS0FBaUM7SUFFakMsTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN0QyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUNsRCxNQUFNLE1BQU0sR0FDVixnQkFBZ0IsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQztRQUM3QyxDQUFDLENBQUMsc0JBQXNCLENBQUMsMEJBQTBCLENBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQ1osZ0JBQWdCLENBQ2pCO1FBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFFbkIsTUFBTSxNQUFNLEdBQUc7UUFDYixHQUFHLEtBQUs7UUFDUixHQUFHLE9BQU87UUFDVixNQUFNLEVBQUUsTUFBTTtRQUNkLGdCQUFnQixFQUFFO1lBQ2hCLEdBQUcsS0FBSyxDQUFDLGdCQUFnQjtZQUN6QixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0I7WUFDM0IsbUJBQW1CLEVBQUUsSUFBSTtTQUMxQjtLQUNGLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29tbW9uQ29uZmlndXJhdG9yLFxuICBDb25maWd1cmF0b3JNb2RlbFV0aWxzLFxufSBmcm9tICdAc3BhcnRhY3VzL3Byb2R1Y3QtY29uZmlndXJhdG9yL2NvbW1vbic7XG5cbmltcG9ydCB7IENvbmZpZ3VyYXRvciB9IGZyb20gJy4uLy4uL21vZGVsL2NvbmZpZ3VyYXRvci5tb2RlbCc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3JBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5pbXBvcnQgeyBDb25maWd1cmF0b3JTdGF0ZVV0aWxzIH0gZnJvbSAnLi4vY29uZmlndXJhdG9yLXN0YXRlLXV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxTdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gPSB7XG4gIGNvbmZpZ0lkOiAnJyxcbiAgcHJvZHVjdENvZGU6ICcnLFxuICBncm91cHM6IFtdLFxuICBmbGF0R3JvdXBzOiBbXSxcbiAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgIGN1cnJlbnRHcm91cDogdW5kZWZpbmVkLFxuICAgIGdyb3Vwc1Zpc2l0ZWQ6IHt9LFxuICAgIG1lbnVQYXJlbnRHcm91cDogdW5kZWZpbmVkLFxuICB9LFxuICBvd25lcjogQ29uZmlndXJhdG9yTW9kZWxVdGlscy5jcmVhdGVJbml0aWFsT3duZXIoKSxcbn07XG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlUGVuZGluZ0NoYW5nZXMgPSAwO1xuXG5sZXQgcmVkdWNlck1hcDogTWFwPHN0cmluZywgYW55PjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyYXRvclJlZHVjZXIoXG4gIHN0YXRlID0gaW5pdGlhbFN0YXRlLFxuICBhY3Rpb246XG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLkNvbmZpZ3VyYXRvckFjdGlvblxuICAgIHwgQ29uZmlndXJhdG9yQWN0aW9ucy5Db25maWd1cmF0b3JDYXJ0QWN0aW9uXG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLkNvbmZpZ3VyYXRvclZhcmlhbnRBY3Rpb25cbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHtcbiAgZW5zdXJlUmVkdWNlck1hcENyZWF0ZWQoKTtcbiAgaWYgKHJlZHVjZXJNYXAuaGFzKGFjdGlvbi50eXBlKSkge1xuICAgIHJldHVybiByZWR1Y2VyTWFwLmdldChhY3Rpb24udHlwZSkoc3RhdGUsIGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVJlZHVjZXJNYXBDcmVhdGVkKCkge1xuICBpZiAocmVkdWNlck1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVkdWNlck1hcCA9IG5ldyBNYXAoKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuVVBEQVRFX0NPTkZJR1VSQVRJT05fRklOQUxJWkVfU1VDQ0VTUyxcbiAgICAgIGhhbmRsZUFjdGlvblVwZGF0ZUNvbmZpZ3VyYXRpb25GaW5hbGl6ZVN1Y2Nlc3NcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5VUERBVEVfQ0FSVF9FTlRSWSxcbiAgICAgIGhhbmRsZUFjdGlvblVwZGF0ZUNhcnRFbnRyeVxuICAgICk7XG4gICAgcmVkdWNlck1hcC5zZXQoXG4gICAgICBDb25maWd1cmF0b3JBY3Rpb25zLkNSRUFURV9DT05GSUdVUkFUSU9OX1NVQ0NFU1MsXG4gICAgICBoYW5kbGVDcmVhdGVTdWNjZXNzXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuUkVBRF9DT05GSUdVUkFUSU9OX1NVQ0NFU1MsXG4gICAgICBoYW5kbGVSZWFkU3VjZXNzXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuUkVBRF9DQVJUX0VOVFJZX0NPTkZJR1VSQVRJT05fU1VDQ0VTUyxcbiAgICAgIGhhbmRsZUNhcnRFbnRyeVJlYWRTdWNlc3NcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5VUERBVEVfUFJJQ0VfU1VNTUFSWV9TVUNDRVNTLFxuICAgICAgaGFuZGxlVXBkYXRlUHJpY2VTdW1tYXJ5U3VjY2Vzc1xuICAgICk7XG4gICAgcmVkdWNlck1hcC5zZXQoXG4gICAgICBDb25maWd1cmF0b3JBY3Rpb25zLkdFVF9DT05GSUdVUkFUSU9OX09WRVJWSUVXX1NVQ0NFU1MsXG4gICAgICBoYW5kbGVHZXRDb25maWd1cmF0aW9uT3ZlcnZpZXdTdWNjZXNzXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuVVBEQVRFX0NPTkZJR1VSQVRJT05fT1ZFUlZJRVdfU1VDQ0VTUyxcbiAgICAgIGhhbmRsZVVwZGF0ZUNvbmZpZ3VyYXRpb25PdmVydmlld1N1Y2Nlc3NcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5TRUFSQ0hfVkFSSUFOVFNfU1VDQ0VTUyxcbiAgICAgIGhhbmRsZVNlYXJjaFZhcmlhbnRzU3VjY2Vzc1xuICAgICk7XG4gICAgcmVkdWNlck1hcC5zZXQoXG4gICAgICBDb25maWd1cmF0b3JBY3Rpb25zLlJFQURfT1JERVJfRU5UUllfQ09ORklHVVJBVElPTl9TVUNDRVNTLFxuICAgICAgaGFuZGxlUmVhZE9yZGVyRW50cnlDb25maWd1cmF0aW9uU3VjY2Vzc1xuICAgICk7XG4gICAgcmVkdWNlck1hcC5zZXQoXG4gICAgICBDb25maWd1cmF0b3JBY3Rpb25zLlNFVF9ORVhUX09XTkVSX0NBUlRfRU5UUlksXG4gICAgICBoYW5kbGVTZXROZXh0T3duZXJDYXJ0RW50cnlcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5TRVRfSU5URVJBQ1RJT05fU1RBVEUsXG4gICAgICBoYW5kbGVTZXRJbnRlcmFjdGlvblN0YXRlXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuU0VUX0NVUlJFTlRfR1JPVVAsXG4gICAgICBoYW5kbGVTZXRDdXJyZW50R3JvdXBcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5TRVRfTUVOVV9QQVJFTlRfR1JPVVAsXG4gICAgICBoYW5kbGVTZXRNZW51UGFyZW50R3JvdXBcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5TRVRfR1JPVVBTX1ZJU0lURUQsXG4gICAgICBoYW5kbGVTZXRHcm91cHNWaXNpdGVkXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChcbiAgICAgIENvbmZpZ3VyYXRvckFjdGlvbnMuRElTTUlTU19DT05GTElDVF9ESUFMT0csXG4gICAgICBoYW5kbGVBY3Rpb25EaXNtaXNzQ29uZmxpY3RTb2x2ZXJEaWFsb2dcbiAgICApO1xuICAgIHJlZHVjZXJNYXAuc2V0KFxuICAgICAgQ29uZmlndXJhdG9yQWN0aW9ucy5DSEVDS19DT05GTElDVF9ESUFMT0csXG4gICAgICBoYW5kbGVBY3Rpb25DaGVja0NvbmZsaWN0U29sdmVyRGlhbG9nXG4gICAgKTtcbiAgICByZWR1Y2VyTWFwLnNldChDb25maWd1cmF0b3JBY3Rpb25zLkNIQU5HRV9HUk9VUCwgaGFuZGxlQ2hhbmdlR3JvdXApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUFjdGlvblVwZGF0ZUNvbmZpZ3VyYXRpb25GaW5hbGl6ZVN1Y2Nlc3MoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlVwZGF0ZUNvbmZpZ3VyYXRpb25GaW5hbGl6ZVN1Y2Nlc3Ncbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgcmVzdWx0OiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbiA9IHRha2VPdmVyQ2hhbmdlcyhhY3Rpb24sIHN0YXRlKTtcbiAgY2hlY2tDb25mbGljdFNvbHZlckRpYWxvZyhyZXN1bHQpO1xuICByZXN1bHQuaXNDYXJ0RW50cnlVcGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gIHJlc3VsdC5vdmVydmlldyA9IHVuZGVmaW5lZDtcbiAgaWYgKHN0YXRlLmludGVyYWN0aW9uU3RhdGUubmV3Q29uZmlndXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmVzdWx0LmludGVyYWN0aW9uU3RhdGUubmV3Q29uZmlndXJhdGlvbiA9IGZhbHNlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQ29uZmxpY3RTb2x2ZXJEaWFsb2coXG4gIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uXG4pOiB2b2lkIHtcbiAgY29uZmlndXJhdGlvbi5pbnRlcmFjdGlvblN0YXRlLnNob3dDb25mbGljdFNvbHZlckRpYWxvZyA9XG4gICAgY29uZmlndXJhdGlvbi5pbW1lZGlhdGVDb25mbGljdFJlc29sdXRpb24gJiYgIWNvbmZpZ3VyYXRpb24uY29uc2lzdGVudDtcbiAgaWYgKGNvbmZpZ3VyYXRpb24uaW50ZXJhY3Rpb25TdGF0ZS5zaG93Q29uZmxpY3RTb2x2ZXJEaWFsb2cpIHtcbiAgICBjb25maWd1cmF0aW9uLmludGVyYWN0aW9uU3RhdGUuaXNzdWVOYXZpZ2F0aW9uRG9uZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uRGlzbWlzc0NvbmZsaWN0U29sdmVyRGlhbG9nKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjogQ29uZmlndXJhdG9yQWN0aW9ucy5EaXNzbWlzc0NvbmZsaWN0RGlhbG9nZVxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBpZiAoYWN0aW9uLnR5cGUgPT09IENvbmZpZ3VyYXRvckFjdGlvbnMuRElTTUlTU19DT05GTElDVF9ESUFMT0cpIHtcbiAgICBjb25zdCByZXN1bHQ6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBpbnRlcmFjdGlvblN0YXRlOiB7XG4gICAgICAgIC4uLnN0YXRlLmludGVyYWN0aW9uU3RhdGUsXG4gICAgICAgIHNob3dDb25mbGljdFNvbHZlckRpYWxvZzogZmFsc2UsXG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVBY3Rpb25DaGVja0NvbmZsaWN0U29sdmVyRGlhbG9nKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgcmVzdWx0OiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbiA9IHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpbnRlcmFjdGlvblN0YXRlOiB7XG4gICAgICAuLi5zdGF0ZS5pbnRlcmFjdGlvblN0YXRlLFxuICAgIH0sXG4gIH07XG4gIGNoZWNrQ29uZmxpY3RTb2x2ZXJEaWFsb2cocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uVXBkYXRlQ2FydEVudHJ5KFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgcmVzdWx0ID0geyAuLi5zdGF0ZSB9O1xuICByZXN1bHQuaXNDYXJ0RW50cnlVcGRhdGVSZXF1aXJlZCA9IGZhbHNlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDcmVhdGVTdWNjZXNzKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjogQ29uZmlndXJhdG9yQWN0aW9ucy5DcmVhdGVDb25maWd1cmF0aW9uU3VjY2Vzc1xuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCByZXN1bHQgPSBzZXRJbml0aWFsQ3VycmVudEdyb3VwKHRha2VPdmVyQ2hhbmdlcyhhY3Rpb24sIHN0YXRlKSk7XG4gIGNoZWNrQ29uZmxpY3RTb2x2ZXJEaWFsb2cocmVzdWx0KTtcbiAgcmVzdWx0LmludGVyYWN0aW9uU3RhdGUubmV3Q29uZmlndXJhdGlvbiA9IHJlc3VsdC5uZXdDb25maWd1cmF0aW9uO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVSZWFkU3VjZXNzKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjpcbiAgICB8IENvbmZpZ3VyYXRvckFjdGlvbnMuQ3JlYXRlQ29uZmlndXJhdGlvblN1Y2Nlc3NcbiAgICB8IENvbmZpZ3VyYXRvckFjdGlvbnMuUmVhZENvbmZpZ3VyYXRpb25TdWNjZXNzXG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLlJlYWRDYXJ0RW50cnlDb25maWd1cmF0aW9uU3VjY2Vzc1xuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCByZXN1bHQgPSBzZXRJbml0aWFsQ3VycmVudEdyb3VwKHRha2VPdmVyQ2hhbmdlcyhhY3Rpb24sIHN0YXRlKSk7XG4gIGNoZWNrQ29uZmxpY3RTb2x2ZXJEaWFsb2cocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2FydEVudHJ5UmVhZFN1Y2VzcyhcbiAgc3RhdGU6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uLFxuICBhY3Rpb246IENvbmZpZ3VyYXRvckFjdGlvbnMuUmVhZENhcnRFbnRyeUNvbmZpZ3VyYXRpb25TdWNjZXNzXG4pOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbiB8IHVuZGVmaW5lZCB7XG4gIHJldHVybiBzZXRJbml0aWFsQ3VycmVudEdyb3VwKHRha2VPdmVyQ2hhbmdlcyhhY3Rpb24sIHN0YXRlKSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVVwZGF0ZVByaWNlU3VtbWFyeVN1Y2Nlc3MoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlVwZGF0ZVByaWNlU3VtbWFyeVN1Y2Nlc3Ncbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHNldEluaXRpYWxDdXJyZW50R3JvdXAodGFrZU92ZXJQcmljaW5nQ2hhbmdlcyhhY3Rpb24sIHN0YXRlKSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUdldENvbmZpZ3VyYXRpb25PdmVydmlld1N1Y2Nlc3MoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLkdldENvbmZpZ3VyYXRpb25PdmVydmlld1N1Y2Nlc3Ncbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgY29udGVudCA9IHtcbiAgICAuLi5hY3Rpb24ucGF5bG9hZC5vdmVydmlldyxcbiAgICBwb3NzaWJsZUdyb3VwczogYWN0aW9uLnBheWxvYWQub3ZlcnZpZXcuZ3JvdXBzLFxuICB9O1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIG92ZXJ2aWV3OiBjb250ZW50LFxuICAgIHByaWNlU3VtbWFyeTogY29udGVudC5wcmljZVN1bW1hcnksXG4gICAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgICAgLi4uc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIGlzc3VlTmF2aWdhdGlvbkRvbmU6IGZhbHNlLFxuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUNvbmZpZ3VyYXRpb25PdmVydmlld1N1Y2Nlc3MoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlVwZGF0ZUNvbmZpZ3VyYXRpb25PdmVydmlld1N1Y2Nlc3Ncbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgY29udGVudCA9IHtcbiAgICAuLi5hY3Rpb24ucGF5bG9hZC5vdmVydmlldyxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBvdmVydmlldzogY29udGVudCxcbiAgICBwcmljZVN1bW1hcnk6IGNvbnRlbnQucHJpY2VTdW1tYXJ5LFxuICAgIGludGVyYWN0aW9uU3RhdGU6IHtcbiAgICAgIC4uLnN0YXRlLmludGVyYWN0aW9uU3RhdGUsXG4gICAgICBpc3N1ZU5hdmlnYXRpb25Eb25lOiBmYWxzZSxcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTZWFyY2hWYXJpYW50c1N1Y2Nlc3MoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlNlYXJjaFZhcmlhbnRzU3VjY2Vzc1xuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIHZhcmlhbnRzOiBhY3Rpb24ucGF5bG9hZC52YXJpYW50cyxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUmVhZE9yZGVyRW50cnlDb25maWd1cmF0aW9uU3VjY2VzcyhcbiAgc3RhdGU6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uLFxuICBhY3Rpb246IENvbmZpZ3VyYXRvckFjdGlvbnMuUmVhZE9yZGVyRW50cnlDb25maWd1cmF0aW9uU3VjY2Vzc1xuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCBjb25maWd1cmF0aW9uID0geyAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuXG4gIGNvbnN0IHJlc3VsdDogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgLi4uY29uZmlndXJhdGlvbixcbiAgICBwcmljZVN1bW1hcnk6IGNvbmZpZ3VyYXRpb24ub3ZlcnZpZXc/LnByaWNlU3VtbWFyeSxcbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTZXROZXh0T3duZXJDYXJ0RW50cnkoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbixcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlNldE5leHRPd25lckNhcnRFbnRyeVxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCBjb250ZW50ID0geyAuLi5hY3Rpb24ucGF5bG9hZC5jb25maWd1cmF0aW9uIH07XG4gIGNvbnRlbnQubmV4dE93bmVyID0gQ29uZmlndXJhdG9yTW9kZWxVdGlscy5jcmVhdGVPd25lcihcbiAgICBDb21tb25Db25maWd1cmF0b3IuT3duZXJUeXBlLkNBUlRfRU5UUlksXG4gICAgYWN0aW9uLnBheWxvYWQuY2FydEVudHJ5Tm9cbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIC4uLnN0YXRlLFxuICAgIC4uLmNvbnRlbnQsXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU2V0SW50ZXJhY3Rpb25TdGF0ZShcbiAgc3RhdGU6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uLFxuICBhY3Rpb246IENvbmZpZ3VyYXRvckFjdGlvbnMuU2V0SW50ZXJhY3Rpb25TdGF0ZVxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCBuZXdJbnRlcmFjdGlvblN0YXRlOiBDb25maWd1cmF0b3IuSW50ZXJhY3Rpb25TdGF0ZSA9XG4gICAgYWN0aW9uLnBheWxvYWQuaW50ZXJhY3Rpb25TdGF0ZTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIGludGVyYWN0aW9uU3RhdGU6IG5ld0ludGVyYWN0aW9uU3RhdGUsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNldEN1cnJlbnRHcm91cChcbiAgc3RhdGU6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uLFxuICBhY3Rpb246IENvbmZpZ3VyYXRvckFjdGlvbnMuU2V0Q3VycmVudEdyb3VwXG4pOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbiB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IG5ld0N1cnJlbnRHcm91cDogc3RyaW5nID0gYWN0aW9uLnBheWxvYWQuY3VycmVudEdyb3VwO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgICAgLi4uc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIGN1cnJlbnRHcm91cDogbmV3Q3VycmVudEdyb3VwLFxuICAgIH0sXG4gIH07XG4gIGNoZWNrQ29uZmxpY3RTb2x2ZXJEaWFsb2cocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlU2V0TWVudVBhcmVudEdyb3VwKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjogQ29uZmlndXJhdG9yQWN0aW9ucy5TZXRNZW51UGFyZW50R3JvdXBcbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgbmV3TWVudVBhcmVudEdyb3VwID0gYWN0aW9uLnBheWxvYWQubWVudVBhcmVudEdyb3VwO1xuXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgICAgLi4uc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIG1lbnVQYXJlbnRHcm91cDogbmV3TWVudVBhcmVudEdyb3VwLFxuICAgIH0sXG4gIH07XG59XG5mdW5jdGlvbiBoYW5kbGVTZXRHcm91cHNWaXNpdGVkKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjogQ29uZmlndXJhdG9yQWN0aW9ucy5TZXRHcm91cHNWaXNpdGVkXG4pOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbiB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IGdyb3VwSWRzOiBzdHJpbmdbXSA9IGFjdGlvbi5wYXlsb2FkLnZpc2l0ZWRHcm91cHM7XG5cbiAgY29uc3QgY2hhbmdlZEludGVyYWN0aW9uU3RhdGU6IENvbmZpZ3VyYXRvci5JbnRlcmFjdGlvblN0YXRlID0ge1xuICAgIGdyb3Vwc1Zpc2l0ZWQ6IHt9LFxuICB9O1xuXG4gIC8vU2V0IEN1cnJlbnQgc3RhdGUgaXRlbXNcbiAgaWYgKHN0YXRlLmludGVyYWN0aW9uU3RhdGUuZ3JvdXBzVmlzaXRlZCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmludGVyYWN0aW9uU3RhdGUuZ3JvdXBzVmlzaXRlZCkuZm9yRWFjaCgoZ3JvdXBJZCkgPT5cbiAgICAgIHNldEdyb3Vwc1Zpc2l0ZWQoY2hhbmdlZEludGVyYWN0aW9uU3RhdGUsIGdyb3VwSWQpXG4gICAgKTtcbiAgfVxuXG4gIC8vQWRkIG5ldyBHcm91cHNcbiAgZ3JvdXBJZHMuZm9yRWFjaCgoZ3JvdXBJZCkgPT5cbiAgICBzZXRHcm91cHNWaXNpdGVkKGNoYW5nZWRJbnRlcmFjdGlvblN0YXRlLCBncm91cElkKVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgICAgLi4uc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIGdyb3Vwc1Zpc2l0ZWQ6IGNoYW5nZWRJbnRlcmFjdGlvblN0YXRlLmdyb3Vwc1Zpc2l0ZWQsXG4gICAgfSxcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUNoYW5nZUdyb3VwKFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24sXG4gIGFjdGlvbjogQ29uZmlndXJhdG9yQWN0aW9ucy5DaGFuZ2VHcm91cFxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gfCB1bmRlZmluZWQge1xuICBjb25zdCBpc0NvbmZsaWN0UmVzb2x1dGlvbk1vZGUgPSBhY3Rpb24ucGF5bG9hZC5jb25mbGljdFJlc29sdXRpb25Nb2RlO1xuICByZXR1cm4ge1xuICAgIC4uLnN0YXRlLFxuICAgIGludGVyYWN0aW9uU3RhdGU6IHtcbiAgICAgIC4uLnN0YXRlLmludGVyYWN0aW9uU3RhdGUsXG4gICAgICBpc0NvbmZsaWN0UmVzb2x1dGlvbk1vZGU6IGlzQ29uZmxpY3RSZXNvbHV0aW9uTW9kZSxcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRHcm91cHNWaXNpdGVkKFxuICBjaGFuZ2VkSW50ZXJhY3Rpb25TdGF0ZTogQ29uZmlndXJhdG9yLkludGVyYWN0aW9uU3RhdGUsXG4gIGdyb3VwSWQ6IHN0cmluZ1xuKSB7XG4gIGNvbnN0IGdyb3Vwc1Zpc2l0ZWQgPSBjaGFuZ2VkSW50ZXJhY3Rpb25TdGF0ZS5ncm91cHNWaXNpdGVkO1xuICBpZiAoZ3JvdXBzVmlzaXRlZCkge1xuICAgIGdyb3Vwc1Zpc2l0ZWRbZ3JvdXBJZF0gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEluaXRpYWxDdXJyZW50R3JvdXAoXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvblxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24ge1xuICBpZiAoc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZS5jdXJyZW50R3JvdXApIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbiAgbGV0IGluaXRpYWxDdXJyZW50R3JvdXA7XG4gIGNvbnN0IGZsYXRHcm91cHMgPSBzdGF0ZS5mbGF0R3JvdXBzO1xuICBpZiAoZmxhdEdyb3VwcyAmJiBmbGF0R3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICBpbml0aWFsQ3VycmVudEdyb3VwID0gc3RhdGUuaW1tZWRpYXRlQ29uZmxpY3RSZXNvbHV0aW9uXG4gICAgICA/IGZsYXRHcm91cHMuZmluZChcbiAgICAgICAgICAoZ3JvdXApID0+ICFncm91cC5pZC5zdGFydHNXaXRoKENvbmZpZ3VyYXRvci5Db25mbGljdElkUHJlZml4KVxuICAgICAgICApPy5pZFxuICAgICAgOiBmbGF0R3JvdXBzWzBdLmlkO1xuICB9XG4gIGNvbnN0IG1lbnVQYXJlbnRHcm91cCA9IGluaXRpYWxDdXJyZW50R3JvdXA/LnN0YXJ0c1dpdGgoXG4gICAgQ29uZmlndXJhdG9yLkNvbmZsaWN0SWRQcmVmaXhcbiAgKVxuICAgID8gQ29uZmlndXJhdG9yLkNvbmZsaWN0SGVhZGVySWRcbiAgICA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpbnRlcmFjdGlvblN0YXRlOiB7XG4gICAgICAuLi5zdGF0ZS5pbnRlcmFjdGlvblN0YXRlLFxuICAgICAgY3VycmVudEdyb3VwOiBpbml0aWFsQ3VycmVudEdyb3VwLFxuICAgICAgbWVudVBhcmVudEdyb3VwOiBtZW51UGFyZW50R3JvdXAsXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZU92ZXJDaGFuZ2VzKFxuICBhY3Rpb246XG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLkNyZWF0ZUNvbmZpZ3VyYXRpb25TdWNjZXNzXG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLlJlYWRDb25maWd1cmF0aW9uU3VjY2Vzc1xuICAgIHwgQ29uZmlndXJhdG9yQWN0aW9ucy5VcGRhdGVDb25maWd1cmF0aW9uRmluYWxpemVTdWNjZXNzXG4gICAgfCBDb25maWd1cmF0b3JBY3Rpb25zLlJlYWRDYXJ0RW50cnlDb25maWd1cmF0aW9uU3VjY2Vzc1xuICAgIHwgQ29uZmlndXJhdG9yQWN0aW9ucy5SZWFkT3JkZXJFbnRyeUNvbmZpZ3VyYXRpb25TdWNjZXNzLFxuICBzdGF0ZTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbik6IENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uIHtcbiAgY29uc3QgY29udGVudCA9IHsgLi4uYWN0aW9uLnBheWxvYWQgfTtcbiAgY29uc3QgZ3JvdXBzID0gY29udGVudC5ncm91cHMubGVuZ3RoID4gMCA/IGNvbnRlbnQuZ3JvdXBzIDogc3RhdGUuZ3JvdXBzO1xuXG4gIGNvbnN0IHJlc3VsdDogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24gPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgLi4uY29udGVudCxcbiAgICBncm91cHM6IGdyb3VwcyxcbiAgICBpbnRlcmFjdGlvblN0YXRlOiB7XG4gICAgICAuLi5zdGF0ZS5pbnRlcmFjdGlvblN0YXRlLFxuICAgICAgLi4uY29udGVudC5pbnRlcmFjdGlvblN0YXRlLFxuICAgICAgc2hvd0NvbmZsaWN0U29sdmVyRGlhbG9nOiBzdGF0ZS5pbnRlcmFjdGlvblN0YXRlLnNob3dDb25mbGljdFNvbHZlckRpYWxvZyxcbiAgICAgIGlzc3VlTmF2aWdhdGlvbkRvbmU6IHRydWUsXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gdGFrZU92ZXJQcmljaW5nQ2hhbmdlcyhcbiAgYWN0aW9uOiBDb25maWd1cmF0b3JBY3Rpb25zLlVwZGF0ZVByaWNlU3VtbWFyeVN1Y2Nlc3MsXG4gIHN0YXRlOiBDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvblxuKTogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24ge1xuICBjb25zdCBjb250ZW50ID0geyAuLi5hY3Rpb24ucGF5bG9hZCB9O1xuICBjb25zdCBwcmljZVN1cHBsZW1lbnRzID0gY29udGVudC5wcmljZVN1cHBsZW1lbnRzO1xuICBjb25zdCBncm91cHMgPVxuICAgIHByaWNlU3VwcGxlbWVudHMgJiYgcHJpY2VTdXBwbGVtZW50cy5sZW5ndGggPiAwXG4gICAgICA/IENvbmZpZ3VyYXRvclN0YXRlVXRpbHMubWVyZ2VHcm91cHNXaXRoU3VwcGxlbWVudHMoXG4gICAgICAgICAgc3RhdGUuZ3JvdXBzLFxuICAgICAgICAgIHByaWNlU3VwcGxlbWVudHNcbiAgICAgICAgKVxuICAgICAgOiBzdGF0ZS5ncm91cHM7XG5cbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIC4uLnN0YXRlLFxuICAgIC4uLmNvbnRlbnQsXG4gICAgZ3JvdXBzOiBncm91cHMsXG4gICAgaW50ZXJhY3Rpb25TdGF0ZToge1xuICAgICAgLi4uc3RhdGUuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIC4uLmNvbnRlbnQuaW50ZXJhY3Rpb25TdGF0ZSxcbiAgICAgIGlzc3VlTmF2aWdhdGlvbkRvbmU6IHRydWUsXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==