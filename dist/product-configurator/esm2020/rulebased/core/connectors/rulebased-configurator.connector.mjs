/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/product-configurator/common";
import * as i2 from "../config/configurator-core.config";
//Not provided in root, as this would break lazy loading
export class RulebasedConfiguratorConnector {
    constructor(adapters, configUtilsService, config) {
        this.adapters = adapters;
        this.configUtilsService = configUtilsService;
        this.config = config;
    }
    createConfiguration(owner, configIdTemplate, forceReset = false) {
        return this.getAdapter(owner.configuratorType).createConfiguration(owner, configIdTemplate, forceReset);
    }
    readConfiguration(configId, groupId, configurationOwner) {
        return this.getAdapter(configurationOwner.configuratorType).readConfiguration(configId, groupId, configurationOwner);
    }
    updateConfiguration(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).updateConfiguration(configuration);
    }
    addToCart(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).addToCart(parameters);
    }
    readConfigurationForCartEntry(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).readConfigurationForCartEntry(parameters);
    }
    updateConfigurationForCartEntry(parameters) {
        return this.getAdapter(parameters.configuration.owner.configuratorType).updateConfigurationForCartEntry(parameters);
    }
    readConfigurationForOrderEntry(parameters) {
        return this.getAdapter(parameters.owner.configuratorType).readConfigurationForOrderEntry(parameters);
    }
    readPriceSummary(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).readPriceSummary(configuration);
    }
    getConfigurationOverview(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).getConfigurationOverview(configuration.configId);
    }
    updateConfigurationOverview(configuration) {
        const overview = configuration.overview;
        return overview
            ? this.getAdapter(configuration.owner.configuratorType).updateConfigurationOverview(overview)
            : this.getAdapter(configuration.owner.configuratorType).getConfigurationOverview(configuration.configId);
    }
    searchVariants(configuration) {
        return this.getAdapter(configuration.owner.configuratorType).searchVariants(configuration.configId);
    }
    getAdapter(configuratorType) {
        const adapterResult = this.adapters.find((adapter) => this.isAdapterMatching(adapter, configuratorType));
        if (adapterResult) {
            return adapterResult;
        }
        else {
            throw new Error('No adapter found for configurator type: ' + configuratorType);
        }
    }
    isAdapterMatching(adapter, configuratorType) {
        let matching = adapter.getConfiguratorType() === configuratorType;
        if (matching && "CLOUDCPQCONFIGURATOR" /* ConfiguratorType.CPQ */ === configuratorType) {
            const isCpqOverOccRequested = this.config?.productConfigurator?.cpqOverOcc ?? false;
            const isCpqOverOccSupported = !!adapter.supportsCpqOverOcc && adapter.supportsCpqOverOcc();
            matching = isCpqOverOccRequested === isCpqOverOccSupported;
        }
        return matching;
    }
}
RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST = new InjectionToken('ConfiguratorAdapterList');
RulebasedConfiguratorConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: RulebasedConfiguratorConnector, deps: [{ token: RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST }, { token: i1.CommonConfiguratorUtilsService }, { token: i2.ConfiguratorCoreConfig, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
RulebasedConfiguratorConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: RulebasedConfiguratorConnector });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: RulebasedConfiguratorConnector, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [RulebasedConfiguratorConnector.CONFIGURATOR_ADAPTER_LIST]
                }] }, { type: i1.CommonConfiguratorUtilsService }, { type: i2.ConfiguratorCoreConfig, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,