/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpHeaders, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { CART_MODIFICATION_NORMALIZER, } from '@spartacus/cart/base/root';
import { OCC_HTTP_TOKEN, } from '@spartacus/core';
import { ConfiguratorModelUtils, } from '@spartacus/product-configurator/common';
import { map, take, tap } from 'rxjs/operators';
import { VARIANT_CONFIGURATOR_ADD_TO_CART_SERIALIZER, VARIANT_CONFIGURATOR_NORMALIZER, VARIANT_CONFIGURATOR_OVERVIEW_NORMALIZER, VARIANT_CONFIGURATOR_OVERVIEW_SERIALIZER, VARIANT_CONFIGURATOR_PRICE_NORMALIZER, VARIANT_CONFIGURATOR_SERIALIZER, VARIANT_CONFIGURATOR_UPDATE_CART_ENTRY_SERIALIZER, } from './variant-configurator-occ.converters';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
import * as i3 from "../../core/services/configurator-expert-mode.service";
export class VariantConfiguratorOccAdapter {
    constructor(http, occEndpointsService, converterService, configExpertModeService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
        this.configExpertModeService = configExpertModeService;
    }
    getConfiguratorType() {
        return "CPQCONFIGURATOR" /* ConfiguratorType.VARIANT */;
    }
    getExpModeRequested() {
        let expMode = false;
        this.configExpertModeService
            .getExpModeRequested()
            .pipe(take(1))
            .subscribe((mode) => (expMode = mode));
        return expMode;
    }
    setExpModeActive(expMode) {
        this.configExpertModeService.setExpModeActive(expMode);
    }
    createConfiguration(owner, configIdTemplate, forceReset = false) {
        const productCode = owner.id;
        const expMode = this.getExpModeRequested();
        return this.http
            .get(this.occEndpointsService.buildUrl('createVariantConfiguration', {
            urlParams: { productCode },
            queryParams: configIdTemplate
                ? { configIdTemplate, expMode, forceReset }
                : { expMode, forceReset },
        }), { context: this.indicateSendUserForAsm() })
            .pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_NORMALIZER), tap((resultConfiguration) => {
            this.setExpModeActive(resultConfiguration.kbKey !== undefined);
        }), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: owner,
            };
        }));
    }
    readConfiguration(configId, groupId, configurationOwner) {
        const expMode = this.getExpModeRequested();
        return this.http
            .get(this.occEndpointsService.buildUrl('readVariantConfiguration', {
            urlParams: { configId },
            queryParams: { groupId, expMode },
        }), { context: this.indicateSendUserForAsm() })
            .pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_NORMALIZER), tap((resultConfiguration) => {
            this.setExpModeActive(resultConfiguration.kbKey !== undefined);
        }), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: configurationOwner,
                newConfiguration: false,
            };
        }));
    }
    updateConfiguration(configuration) {
        const configId = configuration.configId;
        const expMode = this.getExpModeRequested();
        const url = this.occEndpointsService.buildUrl('updateVariantConfiguration', {
            urlParams: { configId },
            queryParams: { expMode },
        });
        const occConfiguration = this.converterService.convert(configuration, VARIANT_CONFIGURATOR_SERIALIZER);
        return this.http
            .patch(url, occConfiguration, {
            context: this.indicateSendUserForAsm(),
        })
            .pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_NORMALIZER), tap((resultConfiguration) => {
            this.setExpModeActive(resultConfiguration.kbKey !== undefined);
        }), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: configuration.owner,
            };
        }));
    }
    addToCart(parameters) {
        const url = this.occEndpointsService.buildUrl('addVariantConfigurationToCart', { urlParams: { userId: parameters.userId, cartId: parameters.cartId } });
        const occAddToCartParameters = this.converterService.convert(parameters, VARIANT_CONFIGURATOR_ADD_TO_CART_SERIALIZER);
        const headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        return this.http
            .post(url, occAddToCartParameters, { headers })
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
    readConfigurationForCartEntry(parameters) {
        const expMode = this.getExpModeRequested();
        const url = this.occEndpointsService.buildUrl('readVariantConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
            queryParams: { expMode },
        });
        return this.http.get(url).pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_NORMALIZER), tap((resultConfiguration) => {
            this.setExpModeActive(resultConfiguration.kbKey !== undefined);
        }), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: parameters.owner,
            };
        }));
    }
    updateConfigurationForCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('updateVariantConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        const headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        const occUpdateCartEntryParameters = this.converterService.convert(parameters, VARIANT_CONFIGURATOR_UPDATE_CART_ENTRY_SERIALIZER);
        return this.http
            .put(url, occUpdateCartEntryParameters, { headers })
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
    readConfigurationForOrderEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readVariantConfigurationOverviewForOrderEntry', {
            urlParams: {
                userId: parameters.userId,
                orderId: parameters.orderId,
                orderEntryNumber: parameters.orderEntryNumber,
            },
        });
        return this.http.get(url).pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_OVERVIEW_NORMALIZER), map((overview) => {
            const configuration = {
                configId: overview.configId,
                productCode: overview.productCode,
                groups: [],
                flatGroups: [],
                interactionState: {},
                overview: overview,
                owner: ConfiguratorModelUtils.createInitialOwner(),
            };
            return configuration;
        }), map((resultConfiguration) => {
            return {
                ...resultConfiguration,
                owner: parameters.owner,
            };
        }));
    }
    readPriceSummary(configuration) {
        const url = this.occEndpointsService.buildUrl('readVariantConfigurationPriceSummary', {
            urlParams: {
                configId: configuration.configId,
            },
            queryParams: { groupId: configuration.interactionState.currentGroup },
        });
        return this.http.get(url, { context: this.indicateSendUserForAsm() }).pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_PRICE_NORMALIZER), map((configResult) => {
            const result = {
                ...configuration,
                priceSummary: configResult.priceSummary,
                priceSupplements: configResult.priceSupplements,
            };
            return result;
        }));
    }
    getConfigurationOverview(configId) {
        const url = this.occEndpointsService.buildUrl('getVariantConfigurationOverview', { urlParams: { configId } });
        return this.http
            .get(url, {
            context: this.indicateSendUserForAsm(),
        })
            .pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_OVERVIEW_NORMALIZER));
    }
    updateConfigurationOverview(ovInput) {
        const url = this.occEndpointsService.buildUrl('getVariantConfigurationOverview', { urlParams: { configId: ovInput.configId } });
        const occOverview = this.converterService.convert(ovInput, VARIANT_CONFIGURATOR_OVERVIEW_SERIALIZER);
        return this.http
            .patch(url, occOverview, {
            context: this.indicateSendUserForAsm(),
        })
            .pipe(this.converterService.pipeable(VARIANT_CONFIGURATOR_OVERVIEW_NORMALIZER), map((overview) => ({
            ...overview,
            attributeFilters: ovInput.attributeFilters,
            groupFilters: ovInput.groupFilters,
            possibleGroups: ovInput.possibleGroups,
        })));
    }
    searchVariants(configId) {
        const url = this.occEndpointsService.buildUrl('searchConfiguratorVariants', { urlParams: { configId } });
        //no need to work with a converter here, as Configurator.Variant is a projection of the OCC
        //variant representation
        return this.http.get(url, {
            context: this.indicateSendUserForAsm(),
        });
    }
    /**
     * Prepares http context indicating that emulated user has to be added to the request in ASM mode
     *
     * The actual calls to the commerce backend will only be changed if the ASM setting
     * userIdHttpHeader:{
     *  enable:true
     * },
     * is active
     * @returns http context indicating that emulated user has to be added to the request in ASM mode
     */
    indicateSendUserForAsm() {
        return new HttpContext().set(OCC_HTTP_TOKEN, {
            sendUserIdAsHeader: true,
        });
    }
}
VariantConfiguratorOccAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VariantConfiguratorOccAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }, { token: i3.ConfiguratorExpertModeService }], target: i0.ɵɵFactoryTarget.Injectable });
VariantConfiguratorOccAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VariantConfiguratorOccAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VariantConfiguratorOccAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }, { type: i3.ConfiguratorExpertModeService }]; } });
//# sourceMappingURL=data:application/json;base64,