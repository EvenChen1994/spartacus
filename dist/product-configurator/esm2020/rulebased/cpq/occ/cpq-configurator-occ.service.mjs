import { Injectable } from '@angular/core';
import { CART_MODIFICATION_NORMALIZER, } from '@spartacus/cart/base/root';
import { map } from 'rxjs/operators';
import { CPQ_CONFIGURATOR_ADD_TO_CART_SERIALIZER, CPQ_CONFIGURATOR_UPDATE_CART_ENTRY_SERIALIZER, } from './converters/cpq-configurator-occ.converters';
import { CPQ_CONFIGURATOR_NORMALIZER, CPQ_CONFIGURATOR_OVERVIEW_NORMALIZER, CPQ_CONFIGURATOR_QUANTITY_SERIALIZER, CPQ_CONFIGURATOR_SERIALIZER, } from '../common/converters/cpq-configurator.converters';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class CpqConfiguratorOccService {
    constructor(http, occEndpointsService, converterService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
    }
    addToCart(parameters) {
        const url = this.occEndpointsService.buildUrl('addCpqConfigurationToCart', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
            },
        });
        const occAddToCartParameters = this.converterService.convert(parameters, CPQ_CONFIGURATOR_ADD_TO_CART_SERIALIZER);
        return this.http
            .post(url, occAddToCartParameters)
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
    updateCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('updateCpqConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        const occUpdateCartEntryParameters = this.converterService.convert(parameters, CPQ_CONFIGURATOR_UPDATE_CART_ENTRY_SERIALIZER);
        return this.http
            .put(url, occUpdateCartEntryParameters)
            .pipe(this.converterService.pipeable(CART_MODIFICATION_NORMALIZER));
    }
    getConfigIdForCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readCpqConfigurationForCartEntry', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        return this.http.get(url).pipe(map((response) => {
            return response.configId;
        }));
    }
    getConfigIdForOrderEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readCpqConfigurationForOrderEntry', {
            urlParams: {
                userId: parameters.userId,
                orderId: parameters.orderId,
                orderEntryNumber: parameters.orderEntryNumber,
            },
        });
        return this.http.get(url).pipe(map((response) => {
            return response.configId;
        }));
    }
    /**
     * Creates a new default runtime configuration for the given product id
     * and read it from the CPQ system over OCC.
     *
     * @param {string} productSystemId - Product system ID
     * @returns {Observable<Configurator.Configuration>} - Created configuration
     */
    createConfiguration(productSystemId) {
        return this.callCreateConfiguration(productSystemId).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    /**
     * Retrieves a configuration from the CPQ system over OCC by its configuration ID and for a certain tab.
     *
     * @param {string} configId - Configuration ID
     * @param {string} tabId - Tab ID
     * @returns {Observable<Configurator.Configuration>} - Retrieved configuration
     */
    readConfiguration(configId, tabId) {
        return this.callReadConfiguration(configId, tabId).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    /**
     * Retrieves a configuration overview from the CPQ system over OCC by its configuration ID.
     *
     * @param {string} configId - Configuration ID
     * @returns {Observable<Configurator.Overview>} - Retrieved overview
     */
    readConfigurationOverview(configId) {
        return this.callReadConfigurationOverview(configId).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_OVERVIEW_NORMALIZER));
    }
    /**
     * Updates an attribute of the runtime configuration for the given configuration id and attribute code
     * and read the desired configuration tab from the CPQ system over OCC.
     *
     * @param {Configurator.Configuration} configuration - Configuration
     * @returns {Observable<Configurator.Configuration>} - Updated configuration
     */
    updateAttribute(configuration) {
        const updateAttribute = this.converterService.convert(configuration, CPQ_CONFIGURATOR_SERIALIZER);
        return this.callUpdateAttribute(updateAttribute).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    /**
     * Updates a quantity for an attribute of the runtime configuration for the given configuration id and attribute code
     * and read the desired configuration tab from the CPQ system over OCC.
     *
     * @param {Configurator.Configuration} configuration - Configuration
     * @returns {Observable<Configurator.Configuration>} - Updated configuration
     */
    updateValueQuantity(configuration) {
        const updateValue = this.converterService.convert(configuration, CPQ_CONFIGURATOR_QUANTITY_SERIALIZER);
        return this.callUpdateValue(updateValue).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    /**
     * Retrieves a configuration assigned to a cart entry.
     *
     * @param {CommonConfigurator.ReadConfigurationFromCartEntryParameters} parameters - Cart entry parameters
     * @returns {Observable<Configurator.Configuration>} - Retrieved configuration
     */
    readConfigurationForCartEntry(parameters) {
        return this.callReadConfigurationForCartEntry(parameters).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    /**
     * Retrieves a configuration assigned to an order entry.
     *
     * @param {CommonConfigurator.ReadConfigurationFromOrderEntryParameters} parameters - Order entry parameters
     * @returns {Observable<Configurator.Configuration>} - Retrieved configuration
     */
    readConfigurationForOrderEntry(parameters) {
        return this.callReadConfigurationForOrderEntry(parameters).pipe(this.converterService.pipeable(CPQ_CONFIGURATOR_NORMALIZER));
    }
    callCreateConfiguration(productSystemId) {
        const url = this.occEndpointsService.buildUrl('createCpqConfiguration', {
            urlParams: {
                productCode: productSystemId,
            },
        });
        return this.http.get(url);
    }
    callReadConfiguration(configId, tabId) {
        const url = this.occEndpointsService.buildUrl('readCpqConfiguration', {
            urlParams: {
                configurationId: configId,
            },
            queryParams: tabId ? { tabId: tabId } : undefined,
        });
        return this.http.get(url);
    }
    callReadConfigurationOverview(configId) {
        const url = this.occEndpointsService.buildUrl('readCpqConfigurationOverview', {
            urlParams: {
                configurationId: configId,
            },
        });
        return this.http.get(url);
    }
    callUpdateAttribute(updateAttribute) {
        const url = this.occEndpointsService.buildUrl('updateCpqAttribute', {
            urlParams: {
                configurationId: updateAttribute.configurationId,
                attributeCode: updateAttribute.standardAttributeCode,
            },
            queryParams: { tabId: updateAttribute.tabId },
        });
        return this.http.patch(url, updateAttribute.changeAttributeValue);
    }
    callUpdateValue(updateValue) {
        const url = this.occEndpointsService.buildUrl('updateCpqAttributeValueQuantity', {
            urlParams: {
                configurationId: updateValue.configurationId,
                attributeCode: updateValue.standardAttributeCode,
                attributeValueId: updateValue.attributeValueId,
            },
            queryParams: { tabId: updateValue.tabId },
        });
        return this.http.patch(url, {
            quantity: updateValue.quantity,
        });
    }
    callReadConfigurationForCartEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readCpqConfigurationForCartEntryFull', {
            urlParams: {
                userId: parameters.userId,
                cartId: parameters.cartId,
                cartEntryNumber: parameters.cartEntryNumber,
            },
        });
        return this.http.get(url);
    }
    callReadConfigurationForOrderEntry(parameters) {
        const url = this.occEndpointsService.buildUrl('readCpqConfigurationForOrderEntryFull', {
            urlParams: {
                userId: parameters.userId,
                orderId: parameters.orderId,
                orderEntryNumber: parameters.orderEntryNumber,
            },
        });
        return this.http.get(url);
    }
}
CpqConfiguratorOccService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorOccService, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
CpqConfiguratorOccService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorOccService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorOccService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BxLWNvbmZpZ3VyYXRvci1vY2Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9wcm9kdWN0LWNvbmZpZ3VyYXRvci9ydWxlYmFzZWQvY3BxL29jYy9jcHEtY29uZmlndXJhdG9yLW9jYy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUVMLDRCQUE0QixHQUM3QixNQUFNLDJCQUEyQixDQUFDO0FBS25DLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQ0wsdUNBQXVDLEVBQ3ZDLDZDQUE2QyxHQUM5QyxNQUFNLDhDQUE4QyxDQUFDO0FBQ3RELE9BQU8sRUFDTCwyQkFBMkIsRUFDM0Isb0NBQW9DLEVBQ3BDLG9DQUFvQyxFQUNwQywyQkFBMkIsR0FDNUIsTUFBTSxrREFBa0QsQ0FBQzs7OztBQUkxRCxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLFlBQ1ksSUFBZ0IsRUFDaEIsbUJBQXdDLEVBQ3hDLGdCQUFrQztRQUZsQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtJQUMzQyxDQUFDO0lBRUosU0FBUyxDQUNQLFVBQTRDO1FBRTVDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLEVBQUU7WUFDekUsU0FBUyxFQUFFO2dCQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtnQkFDekIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO2FBQzFCO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUMxRCxVQUFVLEVBQ1YsdUNBQXVDLENBQ3hDLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsSUFBSSxDQUFtQixHQUFHLEVBQUUsc0JBQXNCLENBQUM7YUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxlQUFlLENBQ2IsVUFBa0U7UUFFbEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FDM0Msb0NBQW9DLEVBQ3BDO1lBQ0UsU0FBUyxFQUFFO2dCQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtnQkFDekIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO2dCQUN6QixlQUFlLEVBQUUsVUFBVSxDQUFDLGVBQWU7YUFDNUM7U0FDRixDQUNGLENBQUM7UUFFRixNQUFNLDRCQUE0QixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQ2hFLFVBQVUsRUFDViw2Q0FBNkMsQ0FDOUMsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQW1CLEdBQUcsRUFBRSw0QkFBNEIsQ0FBQzthQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELHVCQUF1QixDQUNyQixVQUF1RTtRQUV2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUMzQyxrQ0FBa0MsRUFDbEM7WUFDRSxTQUFTLEVBQUU7Z0JBQ1QsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO2dCQUN6QixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07Z0JBQ3pCLGVBQWUsRUFBRSxVQUFVLENBQUMsZUFBZTthQUM1QztTQUNGLENBQ0YsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXVCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDbEQsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDZixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCx3QkFBd0IsQ0FDdEIsVUFBd0U7UUFFeEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FDM0MsbUNBQW1DLEVBQ25DO1lBQ0UsU0FBUyxFQUFFO2dCQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtnQkFDekIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixnQkFBZ0IsRUFBRSxVQUFVLENBQUMsZ0JBQWdCO2FBQzlDO1NBQ0YsQ0FDRixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBdUIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUNsRCxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNmLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILG1CQUFtQixDQUNqQixlQUF1QjtRQUV2QixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQ3ZELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUMsQ0FDNUQsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxpQkFBaUIsQ0FDZixRQUFnQixFQUNoQixLQUFjO1FBRWQsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDckQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUM1RCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gseUJBQXlCLENBQ3ZCLFFBQWdCO1FBRWhCLE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDdEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUNyRSxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILGVBQWUsQ0FDYixhQUF5QztRQUV6QyxNQUFNLGVBQWUsR0FBd0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FDeEUsYUFBYSxFQUNiLDJCQUEyQixDQUM1QixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUNuRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQzVELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsbUJBQW1CLENBQ2pCLGFBQXlDO1FBRXpDLE1BQU0sV0FBVyxHQUFvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUNoRSxhQUFhLEVBQ2Isb0NBQW9DLENBQ3JDLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUMzQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQzVELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCw2QkFBNkIsQ0FDM0IsVUFBdUU7UUFFdkUsT0FBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUM1RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQzVELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCw4QkFBOEIsQ0FDNUIsVUFBd0U7UUFFeEUsT0FBTyxJQUFJLENBQUMsa0NBQWtDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUM3RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDLENBQzVELENBQUM7SUFDSixDQUFDO0lBRVMsdUJBQXVCLENBQy9CLGVBQXVCO1FBRXZCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLEVBQUU7WUFDdEUsU0FBUyxFQUFFO2dCQUNULFdBQVcsRUFBRSxlQUFlO2FBQzdCO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBb0IsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVTLHFCQUFxQixDQUM3QixRQUFnQixFQUNoQixLQUFjO1FBRWQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRTtZQUNwRSxTQUFTLEVBQUU7Z0JBQ1QsZUFBZSxFQUFFLFFBQVE7YUFDMUI7WUFDRCxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUNsRCxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFvQixHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRVMsNkJBQTZCLENBQ3JDLFFBQWdCO1FBRWhCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQzNDLDhCQUE4QixFQUM5QjtZQUNFLFNBQVMsRUFBRTtnQkFDVCxlQUFlLEVBQUUsUUFBUTthQUMxQjtTQUNGLENBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW9CLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFUyxtQkFBbUIsQ0FDM0IsZUFBb0M7UUFFcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRTtZQUNsRSxTQUFTLEVBQUU7Z0JBQ1QsZUFBZSxFQUFFLGVBQWUsQ0FBQyxlQUFlO2dCQUNoRCxhQUFhLEVBQUUsZUFBZSxDQUFDLHFCQUFxQjthQUNyRDtZQUNELFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsS0FBSyxFQUFFO1NBQzlDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQ3BCLEdBQUcsRUFDSCxlQUFlLENBQUMsb0JBQW9CLENBQ3JDLENBQUM7SUFDSixDQUFDO0lBRVMsZUFBZSxDQUN2QixXQUE0QjtRQUU1QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUMzQyxpQ0FBaUMsRUFDakM7WUFDRSxTQUFTLEVBQUU7Z0JBQ1QsZUFBZSxFQUFFLFdBQVcsQ0FBQyxlQUFlO2dCQUM1QyxhQUFhLEVBQUUsV0FBVyxDQUFDLHFCQUFxQjtnQkFDaEQsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLGdCQUFnQjthQUMvQztZQUNELFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSyxFQUFFO1NBQzFDLENBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQW9CLEdBQUcsRUFBRTtZQUM3QyxRQUFRLEVBQUUsV0FBVyxDQUFDLFFBQVE7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVTLGlDQUFpQyxDQUN6QyxVQUF1RTtRQUV2RSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUMzQyxzQ0FBc0MsRUFDdEM7WUFDRSxTQUFTLEVBQUU7Z0JBQ1QsTUFBTSxFQUFFLFVBQVUsQ0FBQyxNQUFNO2dCQUN6QixNQUFNLEVBQUUsVUFBVSxDQUFDLE1BQU07Z0JBQ3pCLGVBQWUsRUFBRSxVQUFVLENBQUMsZUFBZTthQUM1QztTQUNGLENBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQW9CLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFUyxrQ0FBa0MsQ0FDMUMsVUFBd0U7UUFFeEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FDM0MsdUNBQXVDLEVBQ3ZDO1lBQ0UsU0FBUyxFQUFFO2dCQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtnQkFDekIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPO2dCQUMzQixnQkFBZ0IsRUFBRSxVQUFVLENBQUMsZ0JBQWdCO2FBQzlDO1NBQ0YsQ0FDRixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBb0IsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQzs7c0hBblRVLHlCQUF5QjswSEFBekIseUJBQXlCLGNBRFosTUFBTTsyRkFDbkIseUJBQXlCO2tCQURyQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDYXJ0TW9kaWZpY2F0aW9uLFxuICBDQVJUX01PRElGSUNBVElPTl9OT1JNQUxJWkVSLFxufSBmcm9tICdAc3BhcnRhY3VzL2NhcnQvYmFzZS9yb290JztcbmltcG9ydCB7IENvbnZlcnRlclNlcnZpY2UsIE9jY0VuZHBvaW50c1NlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uQ29uZmlndXJhdG9yIH0gZnJvbSAnQHNwYXJ0YWN1cy9wcm9kdWN0LWNvbmZpZ3VyYXRvci9jb21tb24nO1xuaW1wb3J0IHsgQ29uZmlndXJhdG9yIH0gZnJvbSAnQHNwYXJ0YWN1cy9wcm9kdWN0LWNvbmZpZ3VyYXRvci9ydWxlYmFzZWQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtcbiAgQ1BRX0NPTkZJR1VSQVRPUl9BRERfVE9fQ0FSVF9TRVJJQUxJWkVSLFxuICBDUFFfQ09ORklHVVJBVE9SX1VQREFURV9DQVJUX0VOVFJZX1NFUklBTElaRVIsXG59IGZyb20gJy4vY29udmVydGVycy9jcHEtY29uZmlndXJhdG9yLW9jYy5jb252ZXJ0ZXJzJztcbmltcG9ydCB7XG4gIENQUV9DT05GSUdVUkFUT1JfTk9STUFMSVpFUixcbiAgQ1BRX0NPTkZJR1VSQVRPUl9PVkVSVklFV19OT1JNQUxJWkVSLFxuICBDUFFfQ09ORklHVVJBVE9SX1FVQU5USVRZX1NFUklBTElaRVIsXG4gIENQUV9DT05GSUdVUkFUT1JfU0VSSUFMSVpFUixcbn0gZnJvbSAnLi4vY29tbW9uL2NvbnZlcnRlcnMvY3BxLWNvbmZpZ3VyYXRvci5jb252ZXJ0ZXJzJztcbmltcG9ydCB7IENwcSB9IGZyb20gJy4uL2NvbW1vbi9jcHEubW9kZWxzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBDcHFDb25maWd1cmF0b3JPY2NTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJvdGVjdGVkIG9jY0VuZHBvaW50c1NlcnZpY2U6IE9jY0VuZHBvaW50c1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbnZlcnRlclNlcnZpY2U6IENvbnZlcnRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIGFkZFRvQ2FydChcbiAgICBwYXJhbWV0ZXJzOiBDb25maWd1cmF0b3IuQWRkVG9DYXJ0UGFyYW1ldGVyc1xuICApOiBPYnNlcnZhYmxlPENhcnRNb2RpZmljYXRpb24+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLm9jY0VuZHBvaW50c1NlcnZpY2UuYnVpbGRVcmwoJ2FkZENwcUNvbmZpZ3VyYXRpb25Ub0NhcnQnLCB7XG4gICAgICB1cmxQYXJhbXM6IHtcbiAgICAgICAgdXNlcklkOiBwYXJhbWV0ZXJzLnVzZXJJZCxcbiAgICAgICAgY2FydElkOiBwYXJhbWV0ZXJzLmNhcnRJZCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCBvY2NBZGRUb0NhcnRQYXJhbWV0ZXJzID0gdGhpcy5jb252ZXJ0ZXJTZXJ2aWNlLmNvbnZlcnQoXG4gICAgICBwYXJhbWV0ZXJzLFxuICAgICAgQ1BRX0NPTkZJR1VSQVRPUl9BRERfVE9fQ0FSVF9TRVJJQUxJWkVSXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5wb3N0PENhcnRNb2RpZmljYXRpb24+KHVybCwgb2NjQWRkVG9DYXJ0UGFyYW1ldGVycylcbiAgICAgIC5waXBlKHRoaXMuY29udmVydGVyU2VydmljZS5waXBlYWJsZShDQVJUX01PRElGSUNBVElPTl9OT1JNQUxJWkVSKSk7XG4gIH1cblxuICB1cGRhdGVDYXJ0RW50cnkoXG4gICAgcGFyYW1ldGVyczogQ29uZmlndXJhdG9yLlVwZGF0ZUNvbmZpZ3VyYXRpb25Gb3JDYXJ0RW50cnlQYXJhbWV0ZXJzXG4gICk6IE9ic2VydmFibGU8Q2FydE1vZGlmaWNhdGlvbj4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMub2NjRW5kcG9pbnRzU2VydmljZS5idWlsZFVybChcbiAgICAgICd1cGRhdGVDcHFDb25maWd1cmF0aW9uRm9yQ2FydEVudHJ5JyxcbiAgICAgIHtcbiAgICAgICAgdXJsUGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiBwYXJhbWV0ZXJzLnVzZXJJZCxcbiAgICAgICAgICBjYXJ0SWQ6IHBhcmFtZXRlcnMuY2FydElkLFxuICAgICAgICAgIGNhcnRFbnRyeU51bWJlcjogcGFyYW1ldGVycy5jYXJ0RW50cnlOdW1iZXIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbnN0IG9jY1VwZGF0ZUNhcnRFbnRyeVBhcmFtZXRlcnMgPSB0aGlzLmNvbnZlcnRlclNlcnZpY2UuY29udmVydChcbiAgICAgIHBhcmFtZXRlcnMsXG4gICAgICBDUFFfQ09ORklHVVJBVE9SX1VQREFURV9DQVJUX0VOVFJZX1NFUklBTElaRVJcbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dDxDYXJ0TW9kaWZpY2F0aW9uPih1cmwsIG9jY1VwZGF0ZUNhcnRFbnRyeVBhcmFtZXRlcnMpXG4gICAgICAucGlwZSh0aGlzLmNvbnZlcnRlclNlcnZpY2UucGlwZWFibGUoQ0FSVF9NT0RJRklDQVRJT05fTk9STUFMSVpFUikpO1xuICB9XG5cbiAgZ2V0Q29uZmlnSWRGb3JDYXJ0RW50cnkoXG4gICAgcGFyYW1ldGVyczogQ29tbW9uQ29uZmlndXJhdG9yLlJlYWRDb25maWd1cmF0aW9uRnJvbUNhcnRFbnRyeVBhcmFtZXRlcnNcbiAgKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLm9jY0VuZHBvaW50c1NlcnZpY2UuYnVpbGRVcmwoXG4gICAgICAncmVhZENwcUNvbmZpZ3VyYXRpb25Gb3JDYXJ0RW50cnknLFxuICAgICAge1xuICAgICAgICB1cmxQYXJhbXM6IHtcbiAgICAgICAgICB1c2VySWQ6IHBhcmFtZXRlcnMudXNlcklkLFxuICAgICAgICAgIGNhcnRJZDogcGFyYW1ldGVycy5jYXJ0SWQsXG4gICAgICAgICAgY2FydEVudHJ5TnVtYmVyOiBwYXJhbWV0ZXJzLmNhcnRFbnRyeU51bWJlcixcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8eyBjb25maWdJZDogc3RyaW5nIH0+KHVybCkucGlwZShcbiAgICAgIG1hcCgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmNvbmZpZ0lkO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZ2V0Q29uZmlnSWRGb3JPcmRlckVudHJ5KFxuICAgIHBhcmFtZXRlcnM6IENvbW1vbkNvbmZpZ3VyYXRvci5SZWFkQ29uZmlndXJhdGlvbkZyb21PcmRlckVudHJ5UGFyYW1ldGVyc1xuICApOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMub2NjRW5kcG9pbnRzU2VydmljZS5idWlsZFVybChcbiAgICAgICdyZWFkQ3BxQ29uZmlndXJhdGlvbkZvck9yZGVyRW50cnknLFxuICAgICAge1xuICAgICAgICB1cmxQYXJhbXM6IHtcbiAgICAgICAgICB1c2VySWQ6IHBhcmFtZXRlcnMudXNlcklkLFxuICAgICAgICAgIG9yZGVySWQ6IHBhcmFtZXRlcnMub3JkZXJJZCxcbiAgICAgICAgICBvcmRlckVudHJ5TnVtYmVyOiBwYXJhbWV0ZXJzLm9yZGVyRW50cnlOdW1iZXIsXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PHsgY29uZmlnSWQ6IHN0cmluZyB9Pih1cmwpLnBpcGUoXG4gICAgICBtYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5jb25maWdJZDtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGRlZmF1bHQgcnVudGltZSBjb25maWd1cmF0aW9uIGZvciB0aGUgZ2l2ZW4gcHJvZHVjdCBpZFxuICAgKiBhbmQgcmVhZCBpdCBmcm9tIHRoZSBDUFEgc3lzdGVtIG92ZXIgT0NDLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdFN5c3RlbUlkIC0gUHJvZHVjdCBzeXN0ZW0gSURcbiAgICogQHJldHVybnMge09ic2VydmFibGU8Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24+fSAtIENyZWF0ZWQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY3JlYXRlQ29uZmlndXJhdGlvbihcbiAgICBwcm9kdWN0U3lzdGVtSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbENyZWF0ZUNvbmZpZ3VyYXRpb24ocHJvZHVjdFN5c3RlbUlkKS5waXBlKFxuICAgICAgdGhpcy5jb252ZXJ0ZXJTZXJ2aWNlLnBpcGVhYmxlKENQUV9DT05GSUdVUkFUT1JfTk9STUFMSVpFUilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgQ1BRIHN5c3RlbSBvdmVyIE9DQyBieSBpdHMgY29uZmlndXJhdGlvbiBJRCBhbmQgZm9yIGEgY2VydGFpbiB0YWIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWdJZCAtIENvbmZpZ3VyYXRpb24gSURcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhYklkIC0gVGFiIElEXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPn0gLSBSZXRyaWV2ZWQgY29uZmlndXJhdGlvblxuICAgKi9cbiAgcmVhZENvbmZpZ3VyYXRpb24oXG4gICAgY29uZmlnSWQ6IHN0cmluZyxcbiAgICB0YWJJZD86IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFJlYWRDb25maWd1cmF0aW9uKGNvbmZpZ0lkLCB0YWJJZCkucGlwZShcbiAgICAgIHRoaXMuY29udmVydGVyU2VydmljZS5waXBlYWJsZShDUFFfQ09ORklHVVJBVE9SX05PUk1BTElaRVIpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBjb25maWd1cmF0aW9uIG92ZXJ2aWV3IGZyb20gdGhlIENQUSBzeXN0ZW0gb3ZlciBPQ0MgYnkgaXRzIGNvbmZpZ3VyYXRpb24gSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWdJZCAtIENvbmZpZ3VyYXRpb24gSURcbiAgICogQHJldHVybnMge09ic2VydmFibGU8Q29uZmlndXJhdG9yLk92ZXJ2aWV3Pn0gLSBSZXRyaWV2ZWQgb3ZlcnZpZXdcbiAgICovXG4gIHJlYWRDb25maWd1cmF0aW9uT3ZlcnZpZXcoXG4gICAgY29uZmlnSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5PdmVydmlldz4ge1xuICAgIHJldHVybiB0aGlzLmNhbGxSZWFkQ29uZmlndXJhdGlvbk92ZXJ2aWV3KGNvbmZpZ0lkKS5waXBlKFxuICAgICAgdGhpcy5jb252ZXJ0ZXJTZXJ2aWNlLnBpcGVhYmxlKENQUV9DT05GSUdVUkFUT1JfT1ZFUlZJRVdfTk9STUFMSVpFUilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYW4gYXR0cmlidXRlIG9mIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBnaXZlbiBjb25maWd1cmF0aW9uIGlkIGFuZCBhdHRyaWJ1dGUgY29kZVxuICAgKiBhbmQgcmVhZCB0aGUgZGVzaXJlZCBjb25maWd1cmF0aW9uIHRhYiBmcm9tIHRoZSBDUFEgc3lzdGVtIG92ZXIgT0NDLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9ufSBjb25maWd1cmF0aW9uIC0gQ29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj59IC0gVXBkYXRlZCBjb25maWd1cmF0aW9uXG4gICAqL1xuICB1cGRhdGVBdHRyaWJ1dGUoXG4gICAgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbiAgKTogT2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IHVwZGF0ZUF0dHJpYnV0ZTogQ3BxLlVwZGF0ZUF0dHJpYnV0ZSA9IHRoaXMuY29udmVydGVyU2VydmljZS5jb252ZXJ0KFxuICAgICAgY29uZmlndXJhdGlvbixcbiAgICAgIENQUV9DT05GSUdVUkFUT1JfU0VSSUFMSVpFUlxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFVwZGF0ZUF0dHJpYnV0ZSh1cGRhdGVBdHRyaWJ1dGUpLnBpcGUoXG4gICAgICB0aGlzLmNvbnZlcnRlclNlcnZpY2UucGlwZWFibGUoQ1BRX0NPTkZJR1VSQVRPUl9OT1JNQUxJWkVSKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBhIHF1YW50aXR5IGZvciBhbiBhdHRyaWJ1dGUgb2YgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbiBmb3IgdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24gaWQgYW5kIGF0dHJpYnV0ZSBjb2RlXG4gICAqIGFuZCByZWFkIHRoZSBkZXNpcmVkIGNvbmZpZ3VyYXRpb24gdGFiIGZyb20gdGhlIENQUSBzeXN0ZW0gb3ZlciBPQ0MuXG4gICAqXG4gICAqIEBwYXJhbSB7Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb259IGNvbmZpZ3VyYXRpb24gLSBDb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPENvbmZpZ3VyYXRvci5Db25maWd1cmF0aW9uPn0gLSBVcGRhdGVkIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHVwZGF0ZVZhbHVlUXVhbnRpdHkoXG4gICAgY29uZmlndXJhdGlvbjogQ29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb25cbiAgKTogT2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IHVwZGF0ZVZhbHVlOiBDcHEuVXBkYXRlVmFsdWUgPSB0aGlzLmNvbnZlcnRlclNlcnZpY2UuY29udmVydChcbiAgICAgIGNvbmZpZ3VyYXRpb24sXG4gICAgICBDUFFfQ09ORklHVVJBVE9SX1FVQU5USVRZX1NFUklBTElaRVJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmNhbGxVcGRhdGVWYWx1ZSh1cGRhdGVWYWx1ZSkucGlwZShcbiAgICAgIHRoaXMuY29udmVydGVyU2VydmljZS5waXBlYWJsZShDUFFfQ09ORklHVVJBVE9SX05PUk1BTElaRVIpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBjb25maWd1cmF0aW9uIGFzc2lnbmVkIHRvIGEgY2FydCBlbnRyeS5cbiAgICpcbiAgICogQHBhcmFtIHtDb21tb25Db25maWd1cmF0b3IuUmVhZENvbmZpZ3VyYXRpb25Gcm9tQ2FydEVudHJ5UGFyYW1ldGVyc30gcGFyYW1ldGVycyAtIENhcnQgZW50cnkgcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxDb25maWd1cmF0b3IuQ29uZmlndXJhdGlvbj59IC0gUmV0cmlldmVkIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHJlYWRDb25maWd1cmF0aW9uRm9yQ2FydEVudHJ5KFxuICAgIHBhcmFtZXRlcnM6IENvbW1vbkNvbmZpZ3VyYXRvci5SZWFkQ29uZmlndXJhdGlvbkZyb21DYXJ0RW50cnlQYXJhbWV0ZXJzXG4gICk6IE9ic2VydmFibGU8Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24+IHtcbiAgICByZXR1cm4gdGhpcy5jYWxsUmVhZENvbmZpZ3VyYXRpb25Gb3JDYXJ0RW50cnkocGFyYW1ldGVycykucGlwZShcbiAgICAgIHRoaXMuY29udmVydGVyU2VydmljZS5waXBlYWJsZShDUFFfQ09ORklHVVJBVE9SX05PUk1BTElaRVIpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBjb25maWd1cmF0aW9uIGFzc2lnbmVkIHRvIGFuIG9yZGVyIGVudHJ5LlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbW1vbkNvbmZpZ3VyYXRvci5SZWFkQ29uZmlndXJhdGlvbkZyb21PcmRlckVudHJ5UGFyYW1ldGVyc30gcGFyYW1ldGVycyAtIE9yZGVyIGVudHJ5IHBhcmFtZXRlcnNcbiAgICogQHJldHVybnMge09ic2VydmFibGU8Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24+fSAtIFJldHJpZXZlZCBjb25maWd1cmF0aW9uXG4gICAqL1xuICByZWFkQ29uZmlndXJhdGlvbkZvck9yZGVyRW50cnkoXG4gICAgcGFyYW1ldGVyczogQ29tbW9uQ29uZmlndXJhdG9yLlJlYWRDb25maWd1cmF0aW9uRnJvbU9yZGVyRW50cnlQYXJhbWV0ZXJzXG4gICk6IE9ic2VydmFibGU8Q29uZmlndXJhdG9yLkNvbmZpZ3VyYXRpb24+IHtcbiAgICByZXR1cm4gdGhpcy5jYWxsUmVhZENvbmZpZ3VyYXRpb25Gb3JPcmRlckVudHJ5KHBhcmFtZXRlcnMpLnBpcGUoXG4gICAgICB0aGlzLmNvbnZlcnRlclNlcnZpY2UucGlwZWFibGUoQ1BRX0NPTkZJR1VSQVRPUl9OT1JNQUxJWkVSKVxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2FsbENyZWF0ZUNvbmZpZ3VyYXRpb24oXG4gICAgcHJvZHVjdFN5c3RlbUlkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxDcHEuQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMub2NjRW5kcG9pbnRzU2VydmljZS5idWlsZFVybCgnY3JlYXRlQ3BxQ29uZmlndXJhdGlvbicsIHtcbiAgICAgIHVybFBhcmFtczoge1xuICAgICAgICBwcm9kdWN0Q29kZTogcHJvZHVjdFN5c3RlbUlkLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxDcHEuQ29uZmlndXJhdGlvbj4odXJsKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjYWxsUmVhZENvbmZpZ3VyYXRpb24oXG4gICAgY29uZmlnSWQ6IHN0cmluZyxcbiAgICB0YWJJZD86IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENwcS5Db25maWd1cmF0aW9uPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5vY2NFbmRwb2ludHNTZXJ2aWNlLmJ1aWxkVXJsKCdyZWFkQ3BxQ29uZmlndXJhdGlvbicsIHtcbiAgICAgIHVybFBhcmFtczoge1xuICAgICAgICBjb25maWd1cmF0aW9uSWQ6IGNvbmZpZ0lkLFxuICAgICAgfSxcbiAgICAgIHF1ZXJ5UGFyYW1zOiB0YWJJZCA/IHsgdGFiSWQ6IHRhYklkIH0gOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q3BxLkNvbmZpZ3VyYXRpb24+KHVybCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2FsbFJlYWRDb25maWd1cmF0aW9uT3ZlcnZpZXcoXG4gICAgY29uZmlnSWQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPENwcS5Db25maWd1cmF0aW9uPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5vY2NFbmRwb2ludHNTZXJ2aWNlLmJ1aWxkVXJsKFxuICAgICAgJ3JlYWRDcHFDb25maWd1cmF0aW9uT3ZlcnZpZXcnLFxuICAgICAge1xuICAgICAgICB1cmxQYXJhbXM6IHtcbiAgICAgICAgICBjb25maWd1cmF0aW9uSWQ6IGNvbmZpZ0lkLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q3BxLkNvbmZpZ3VyYXRpb24+KHVybCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2FsbFVwZGF0ZUF0dHJpYnV0ZShcbiAgICB1cGRhdGVBdHRyaWJ1dGU6IENwcS5VcGRhdGVBdHRyaWJ1dGVcbiAgKTogT2JzZXJ2YWJsZTxDcHEuQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMub2NjRW5kcG9pbnRzU2VydmljZS5idWlsZFVybCgndXBkYXRlQ3BxQXR0cmlidXRlJywge1xuICAgICAgdXJsUGFyYW1zOiB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb25JZDogdXBkYXRlQXR0cmlidXRlLmNvbmZpZ3VyYXRpb25JZCxcbiAgICAgICAgYXR0cmlidXRlQ29kZTogdXBkYXRlQXR0cmlidXRlLnN0YW5kYXJkQXR0cmlidXRlQ29kZSxcbiAgICAgIH0sXG4gICAgICBxdWVyeVBhcmFtczogeyB0YWJJZDogdXBkYXRlQXR0cmlidXRlLnRhYklkIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaDxDcHEuQ29uZmlndXJhdGlvbj4oXG4gICAgICB1cmwsXG4gICAgICB1cGRhdGVBdHRyaWJ1dGUuY2hhbmdlQXR0cmlidXRlVmFsdWVcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGxVcGRhdGVWYWx1ZShcbiAgICB1cGRhdGVWYWx1ZTogQ3BxLlVwZGF0ZVZhbHVlXG4gICk6IE9ic2VydmFibGU8Q3BxLkNvbmZpZ3VyYXRpb24+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLm9jY0VuZHBvaW50c1NlcnZpY2UuYnVpbGRVcmwoXG4gICAgICAndXBkYXRlQ3BxQXR0cmlidXRlVmFsdWVRdWFudGl0eScsXG4gICAgICB7XG4gICAgICAgIHVybFBhcmFtczoge1xuICAgICAgICAgIGNvbmZpZ3VyYXRpb25JZDogdXBkYXRlVmFsdWUuY29uZmlndXJhdGlvbklkLFxuICAgICAgICAgIGF0dHJpYnV0ZUNvZGU6IHVwZGF0ZVZhbHVlLnN0YW5kYXJkQXR0cmlidXRlQ29kZSxcbiAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZUlkOiB1cGRhdGVWYWx1ZS5hdHRyaWJ1dGVWYWx1ZUlkLFxuICAgICAgICB9LFxuICAgICAgICBxdWVyeVBhcmFtczogeyB0YWJJZDogdXBkYXRlVmFsdWUudGFiSWQgfSxcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiB0aGlzLmh0dHAucGF0Y2g8Q3BxLkNvbmZpZ3VyYXRpb24+KHVybCwge1xuICAgICAgcXVhbnRpdHk6IHVwZGF0ZVZhbHVlLnF1YW50aXR5LFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGxSZWFkQ29uZmlndXJhdGlvbkZvckNhcnRFbnRyeShcbiAgICBwYXJhbWV0ZXJzOiBDb21tb25Db25maWd1cmF0b3IuUmVhZENvbmZpZ3VyYXRpb25Gcm9tQ2FydEVudHJ5UGFyYW1ldGVyc1xuICApOiBPYnNlcnZhYmxlPENwcS5Db25maWd1cmF0aW9uPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5vY2NFbmRwb2ludHNTZXJ2aWNlLmJ1aWxkVXJsKFxuICAgICAgJ3JlYWRDcHFDb25maWd1cmF0aW9uRm9yQ2FydEVudHJ5RnVsbCcsXG4gICAgICB7XG4gICAgICAgIHVybFBhcmFtczoge1xuICAgICAgICAgIHVzZXJJZDogcGFyYW1ldGVycy51c2VySWQsXG4gICAgICAgICAgY2FydElkOiBwYXJhbWV0ZXJzLmNhcnRJZCxcbiAgICAgICAgICBjYXJ0RW50cnlOdW1iZXI6IHBhcmFtZXRlcnMuY2FydEVudHJ5TnVtYmVyLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q3BxLkNvbmZpZ3VyYXRpb24+KHVybCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgY2FsbFJlYWRDb25maWd1cmF0aW9uRm9yT3JkZXJFbnRyeShcbiAgICBwYXJhbWV0ZXJzOiBDb21tb25Db25maWd1cmF0b3IuUmVhZENvbmZpZ3VyYXRpb25Gcm9tT3JkZXJFbnRyeVBhcmFtZXRlcnNcbiAgKTogT2JzZXJ2YWJsZTxDcHEuQ29uZmlndXJhdGlvbj4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMub2NjRW5kcG9pbnRzU2VydmljZS5idWlsZFVybChcbiAgICAgICdyZWFkQ3BxQ29uZmlndXJhdGlvbkZvck9yZGVyRW50cnlGdWxsJyxcbiAgICAgIHtcbiAgICAgICAgdXJsUGFyYW1zOiB7XG4gICAgICAgICAgdXNlcklkOiBwYXJhbWV0ZXJzLnVzZXJJZCxcbiAgICAgICAgICBvcmRlcklkOiBwYXJhbWV0ZXJzLm9yZGVySWQsXG4gICAgICAgICAgb3JkZXJFbnRyeU51bWJlcjogcGFyYW1ldGVycy5vcmRlckVudHJ5TnVtYmVyLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8Q3BxLkNvbmZpZ3VyYXRpb24+KHVybCk7XG4gIH1cbn1cbiJdfQ==