/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { Configurator, } from '@spartacus/product-configurator/rulebased';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./cpq-configurator-rest.service";
import * as i2 from "./../occ/cpq-configurator-occ.service";
export class CpqConfiguratorRestAdapter {
    constructor(cpqRestService, cpqOccService) {
        this.cpqRestService = cpqRestService;
        this.cpqOccService = cpqOccService;
    }
    getConfiguratorType() {
        return "CLOUDCPQCONFIGURATOR" /* ConfiguratorType.CPQ */;
    }
    supportsCpqOverOcc() {
        return false;
    }
    createConfiguration(owner) {
        // no error handling for missing owner id needed, as it's a
        // mandatory attribute in owner
        return this.cpqRestService.createConfiguration(owner.id).pipe(map((configResponse) => {
            configResponse.owner = owner;
            return configResponse;
        }));
    }
    readConfiguration(configId, groupId, owner) {
        return this.cpqRestService.readConfiguration(configId, groupId).pipe(map((configResponse) => {
            configResponse.owner = owner;
            return configResponse;
        }));
    }
    updateConfiguration(configuration) {
        const updateMethod = configuration.updateType === Configurator.UpdateType.VALUE_QUANTITY
            ? this.cpqRestService.updateValueQuantity
            : this.cpqRestService.updateAttribute;
        return updateMethod.call(this.cpqRestService, configuration).pipe(map((configResponse) => {
            configResponse.owner = configuration.owner;
            return configResponse;
        }));
    }
    updateConfigurationOverview() {
        throw new Error('Update the configuration overview is not supported for the CPQ configurator');
    }
    addToCart(parameters) {
        return this.cpqOccService.addToCart(parameters);
    }
    readConfigurationForCartEntry(parameters) {
        return this.cpqOccService.getConfigIdForCartEntry(parameters).pipe(switchMap((configId) => {
            return this.cpqRestService.readConfiguration(configId).pipe(map((configResponse) => {
                configResponse.owner = parameters.owner;
                return configResponse;
            }));
        }));
    }
    updateConfigurationForCartEntry(parameters) {
        return this.cpqOccService.updateCartEntry(parameters);
    }
    readConfigurationForOrderEntry(parameters) {
        return this.cpqOccService.getConfigIdForOrderEntry(parameters).pipe(switchMap((configId) => {
            return this.cpqRestService.readConfiguration(configId).pipe(map((configResponse) => {
                configResponse.owner = parameters.owner;
                return configResponse;
            }));
        }));
    }
    readPriceSummary(configuration) {
        return of(configuration); // so that UI does not run into exception
    }
    getConfigurationOverview(configId) {
        return this.cpqRestService.readConfigurationOverview(configId);
    }
    searchVariants() {
        throw new Error('searchVariants is not supported for the CPQ configurator');
    }
}
CpqConfiguratorRestAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorRestAdapter, deps: [{ token: i1.CpqConfiguratorRestService }, { token: i2.CpqConfiguratorOccService }], target: i0.ɵɵFactoryTarget.Injectable });
CpqConfiguratorRestAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorRestAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CpqConfiguratorRestAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CpqConfiguratorRestService }, { type: i2.CpqConfiguratorOccService }]; } });
//# sourceMappingURL=data:application/json;base64,