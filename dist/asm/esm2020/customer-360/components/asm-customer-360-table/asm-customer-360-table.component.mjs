/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { byBoolean, byComparison, byNullish, byString, isBoolean, isNumber, isString, itemsWith, property, SortOrder, whenType, } from '@spartacus/asm/core';
import { DirectionMode } from '@spartacus/storefront';
import { BehaviorSubject } from 'rxjs';
import { CustomerTableTextAlign, } from './asm-customer-360-table.model';
import { KeyBoardEventCode } from '@spartacus/asm/customer-360/root';
import * as i0 from "@angular/core";
import * as i1 from "../config/asm-customer-360-config";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
import * as i5 from "@spartacus/asm/core";
export class AsmCustomer360TableComponent {
    constructor(asmCustomer360Config, directionService) {
        this.asmCustomer360Config = asmCustomer360Config;
        this.directionService = directionService;
        this.selectItem = new EventEmitter();
        this.SortOrder = SortOrder;
        this.CustomerTableTextAlign = CustomerTableTextAlign;
        this.currentPageNumber = 0;
        this.currentPage$ = new BehaviorSubject(undefined);
        this.listSortOrder = SortOrder.DESC;
        this.focusedTableColumnIndex = 0;
        this.focusedTableRowIndex = 0;
        this.setFocusOnStartTableItem = false;
    }
    ngOnChanges(changes) {
        if (changes?.entries) {
            const entries = this.sortEntries(this.entries, this.sortProperty, this.listSortOrder);
            this.entryPages = this.updateEntryPages(entries);
            this.setPageNumber(this.currentPageNumber);
        }
    }
    ngAfterViewChecked() {
        if (this.setFocusOnStartTableItem) {
            this.setSelectedTabIndex(0, 1);
            this.setFocusOnStartTableItem = false;
        }
    }
    sortEntriesAndUpdatePages(sortProperty) {
        const currentProperty = this.sortProperty;
        let newSortOrder;
        if (sortProperty !== currentProperty) {
            newSortOrder = SortOrder.ASC;
        }
        else {
            newSortOrder =
                this.listSortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;
        }
        this.sortProperty = sortProperty;
        this.listSortOrder = newSortOrder;
        this.entries = this.sortEntries(this.entries, this.sortProperty, this.listSortOrder);
        this.entryPages = this.updateEntryPages(this.entries);
        this.setPageNumber(this.currentPageNumber);
    }
    setPageNumber(pageNumber, selectFirstRecord = false) {
        this.currentPageNumber = pageNumber;
        this.currentPage$.next(this.entryPages[this.currentPageNumber]);
        if (selectFirstRecord) {
            this.setFocusOnStartTableItem = true;
        }
    }
    /**
     * returns sort direction
     * @param columnProperty column property
     * @param sortProperty current sort property
     * @param listSortOrder current sort order
     */
    sortDirection(columnProperty, sortProperty, listSortOrder) {
        if (columnProperty === sortProperty) {
            return listSortOrder === SortOrder.ASC ? 'ascending' : 'descending';
        }
        else {
            return 'none';
        }
    }
    /**
     * returns tabIndex value
     * @param focusedTableColumnIndex saved column index
     * @param focusedTableRowIndex saved row index
     * @param columnIndex selected column index
     */
    tabIndexValue(focusedTableColumnIndex, focusedTableRowIndex, columnIndex) {
        return focusedTableColumnIndex === columnIndex && focusedTableRowIndex === 0
            ? 0
            : -1;
    }
    /**
     * Update cell's focus When keyboard key is pressed:
     * handles arrowUp, arrowDown, arrowRight, arrowLeft, Home, End, Home+Ctrl, End+Ctrl
     * PageDown, PageUp
     * @param event KeyboardEvent
     * @param columnIndex selected column index of table
     * @param rowIndex selected row index of table
     */
    onKeyDownCell(event, columnIndex, rowIndex) {
        let knownKeyPressed = true;
        switch (event.code) {
            case KeyBoardEventCode.ARROW_LEFT:
            case KeyBoardEventCode.ARROW_RIGHT:
                this.moveFocusLeftRight(event, columnIndex, rowIndex);
                break;
            case KeyBoardEventCode.ARROW_DOWN:
                this.moveFocusDown(columnIndex, rowIndex);
                break;
            case KeyBoardEventCode.ARROW_UP:
                this.moveFocusUp(columnIndex, rowIndex);
                break;
            case KeyBoardEventCode.HOME:
                this.moveFocusHome(event, rowIndex);
                break;
            case KeyBoardEventCode.END:
                this.moveFocusEnd(event, rowIndex);
                break;
            case KeyBoardEventCode.PAGE_DOWN:
                this.handlePageDown();
                break;
            case KeyBoardEventCode.PAGE_UP:
                this.handlePageUp();
                break;
            default:
                knownKeyPressed = false;
        }
        if (knownKeyPressed) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    /**
     * Update selected cell's tabIndex (change tabIndex to 0).
     * if cell contains link(button) then update link
     * @param columnIndex selected column index of table
     * @param rowIndex selected row index of table
     */
    setSelectedTabIndex(columnIndex, rowIndex) {
        const maxColumn = this.columns.length - 1;
        const maxRow = this.table.nativeElement.rows.length - 1;
        if (columnIndex > maxColumn || rowIndex > maxRow) {
            return;
        }
        this.removeCellTabIndex(this.focusedTableColumnIndex, this.focusedTableRowIndex);
        this.focusedTableColumnIndex = columnIndex;
        this.focusedTableRowIndex = rowIndex;
        const tableCell = this.table.nativeElement.rows[rowIndex].cells[columnIndex];
        const childElement = tableCell.firstChild;
        const elementToFocus = childElement.tagName === 'BUTTON' ? childElement : tableCell;
        elementToFocus.tabIndex = 0;
        elementToFocus.focus();
    }
    handlePageUp() {
        if (this.entryPages.length > 1 && this.currentPageNumber > 0) {
            const pageNumber = Math.max(0, this.currentPageNumber - 1);
            this.setPageNumber(pageNumber, true);
        }
    }
    handlePageDown() {
        const maxPage = this.entryPages.length - 1;
        if (this.entryPages.length > 1 && this.currentPageNumber < maxPage) {
            const pageNumber = Math.min(maxPage, this.currentPageNumber + 1);
            this.setPageNumber(pageNumber, true);
        }
    }
    moveFocusEnd(event, rowIndex) {
        const maxRow = this.table.nativeElement.rows.length - 1;
        rowIndex = event.ctrlKey ? maxRow : rowIndex;
        this.setSelectedTabIndex(this.columns.length - 1, rowIndex);
    }
    moveFocusHome(event, rowIndex) {
        rowIndex = event.ctrlKey ? 0 : rowIndex;
        this.setSelectedTabIndex(0, rowIndex);
    }
    moveFocusUp(columnIndex, rowIndex) {
        rowIndex = Math.max(0, rowIndex - 1);
        this.setSelectedTabIndex(columnIndex, rowIndex);
    }
    moveFocusDown(columnIndex, rowIndex) {
        const maxRow = this.table.nativeElement.rows.length - 1;
        rowIndex = Math.min(maxRow, rowIndex + 1);
        this.setSelectedTabIndex(columnIndex, rowIndex);
    }
    moveFocusLeftRight(event, columnIndex, rowIndex) {
        const maxColumn = this.columns.length - 1;
        if (this.isBackNavigation(event)) {
            columnIndex = Math.max(0, columnIndex - 1);
        }
        else {
            columnIndex = Math.min(maxColumn, columnIndex + 1);
        }
        this.setSelectedTabIndex(columnIndex, rowIndex);
    }
    /**
     * Removes tabindex and CSS focus class from a cell in the table.
     * @param columnIndex The index of the column containing the cell.
     * @param rowIndex The index of the row containing the cell.
     */
    removeCellTabIndex(columnIndex, rowIndex) {
        const tableCell = this.table.nativeElement.rows?.[rowIndex]?.cells?.[columnIndex];
        const childElement = tableCell?.firstChild;
        if (childElement) {
            if (childElement.tagName === 'BUTTON') {
                childElement.tabIndex = -1;
            }
            else {
                if (tableCell) {
                    tableCell.tabIndex = -1;
                }
            }
        }
    }
    /**
     * Verifies whether the user navigates from a subgroup back to the main group menu.
     * @param {KeyboardEvent} event - Keyboard event
     * @returns {boolean} -'true' if the user navigates back into the main group menu, otherwise 'false'.
     * @protected
     */
    isBackNavigation(event) {
        return ((event.code === KeyBoardEventCode.ARROW_LEFT && this.isLTRDirection()) ||
            (event.code === KeyBoardEventCode.ARROW_RIGHT && this.isRTLDirection()));
    }
    isLTRDirection() {
        return this.directionService.getDirection() === DirectionMode.LTR;
    }
    isRTLDirection() {
        return this.directionService.getDirection() === DirectionMode.RTL;
    }
    updateEntryPages(entries) {
        const newEntryPages = [];
        for (let i = 0; i < entries.length; i += this.pageSize) {
            newEntryPages.push(entries.slice(i, i + this.pageSize));
        }
        return newEntryPages;
    }
    sortEntries(entries, sortByProperty, sortOrder) {
        if (entries?.length) {
            return entries.sort(itemsWith(property(sortByProperty, itemsWith(byNullish(SortOrder.DESC), whenType(isString, byString(sortOrder)), whenType(isNumber, byComparison(sortOrder)), whenType(isBoolean, byBoolean(sortOrder))))));
        }
        else {
            return [];
        }
    }
}
AsmCustomer360TableComponent.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AsmCustomer360TableComponent, deps: [{ token: i1.AsmCustomer360Config }, { token: i2.DirectionService }], target: i0.ÉµÉµFactoryTarget.Component });
AsmCustomer360TableComponent.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: AsmCustomer360TableComponent, selector: "cx-asm-customer-360-table", inputs: { columns: "columns", emptyStateText: "emptyStateText", entries: "entries", headerText: "headerText", pageSize: "pageSize", sortProperty: "sortProperty" }, outputs: { selectItem: "selectItem" }, viewQueries: [{ propertyName: "table", first: true, predicate: ["table"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"cx-asm-customer-360-table-heading\" *ngIf=\"headerText\">\n  <h4 class=\"cx-asm-customer-360-table-heading-text\">\n    {{ headerText }}\n  </h4>\n  <div\n    [attr.aria-label]=\"'asmCustomer360.pagination' | cxTranslate\"\n    class=\"cx-asm-customer-360-table-heading-pages\"\n    *ngIf=\"entryPages\"\n  >\n    <ng-container *ngFor=\"let page of entryPages; let pageNumber = index\">\n      <button\n        *ngIf=\"entryPages.length > 1\"\n        (click)=\"setPageNumber(pageNumber, true)\"\n        class=\"cx-asm-customer-360-table-heading-page link\"\n        [class.active]=\"currentPageNumber === pageNumber\"\n        [attr.aria-current]=\"currentPageNumber === pageNumber ? 'page' : null\"\n        [disabled]=\"currentPageNumber === pageNumber\"\n        [attr.aria-label]=\"\n          'asmCustomer360.page' | cxTranslate: { number: pageNumber + 1 }\n        \"\n      >\n        {{ pageNumber + 1 }}\n      </button>\n    </ng-container>\n  </div>\n</div>\n<hr class=\"cx-asm-customer-360-table-separator\" aria-hidden=\"true\" />\n<ng-container *ngIf=\"entryPages?.length && columns?.length\">\n  <table\n    #table\n    class=\"cx-asm-customer-360-table\"\n    role=\"grid\"\n    [attr.aria-rowcount]=\"entries.length\"\n    [attr.aria-colcount]=\"columns.length\"\n    [attr.data-per-page]=\"pageSize\"\n  >\n    <caption class=\"cx-visually-hidden\">\n      {{\n        headerText\n      }}\n    </caption>\n    <thead>\n      <tr class=\"cx-asm-customer-360-table-row-header\" role=\"row\">\n        <th\n          class=\"cx-asm-customer-360-table-header\"\n          role=\"columnheader\"\n          *ngFor=\"let column of columns; let columnIndex = index\"\n          [class.active]=\"sortProperty === column.property\"\n          [class.asc]=\"listSortOrder === SortOrder.ASC\"\n          [class.desc]=\"listSortOrder !== SortOrder.ASC\"\n          [attr.aria-sort]=\"\n            sortDirection | cxArgs: column.property:sortProperty:listSortOrder\n          \"\n          [ngClass]=\"{\n            'text-start':\n              column.headerTextAlign === CustomerTableTextAlign.START,\n            'text-center':\n              column.headerTextAlign === CustomerTableTextAlign.CENTER,\n            'text-end': column.headerTextAlign === CustomerTableTextAlign.END\n          }\"\n          (click)=\"setSelectedTabIndex(columnIndex, 0)\"\n        >\n          <button\n            [tabindex]=\"\n              tabIndexValue\n                | cxArgs\n                  : focusedTableColumnIndex\n                  : focusedTableRowIndex\n                  : columnIndex\n            \"\n            class=\"link\"\n            (click)=\"sortEntriesAndUpdatePages(column.property)\"\n            (keydown)=\"onKeyDownCell($event, columnIndex, 0)\"\n          >\n            <span *ngIf=\"column?.i18nTextKey\">{{\n              column.i18nTextKey | cxTranslate\n            }}</span>\n            <span *ngIf=\"!column?.i18nTextKey\">{{ column.text }}</span>\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        class=\"cx-asm-customer-360-table-row\"\n        role=\"row\"\n        *ngFor=\"let entry of currentPage$ | async; let rowIndex = index\"\n      >\n        <td\n          role=\"cell\"\n          tabindex=\"-1\"\n          *ngFor=\"let column of columns; let columnIndex = index\"\n          (keydown)=\"onKeyDownCell($event, columnIndex, rowIndex + 1)\"\n          (click)=\"setSelectedTabIndex(columnIndex, rowIndex + 1)\"\n          [ngClass]=\"{\n            'text-start': column.textAlign === CustomerTableTextAlign.START,\n            'text-center': column.textAlign === CustomerTableTextAlign.CENTER,\n            'text-end': column.textAlign === CustomerTableTextAlign.END\n          }\"\n        >\n          <ng-container\n            *ngIf=\"column.navigatable; then linkTemplate; else starRating\"\n          ></ng-container>\n\n          <ng-template #linkTemplate>\n            <button\n              tabindex=\"-1\"\n              [attr.aria-label]=\"entry[column.property]\"\n              (click)=\"selectItem.emit(entry)\"\n              class=\"cx-asm-customer-360-table-link link\"\n              [title]=\"\n                entry[column.property] ||\n                ('asmCustomer360.emptyCellValue' | cxTranslate)\n              \"\n            >\n              {{\n                entry[column.property] ||\n                  ('asmCustomer360.emptyCellValue' | cxTranslate)\n              }}\n            </button>\n          </ng-template>\n\n          <ng-template #starRating>\n            <cx-star-rating\n              tabindex=\"-1\"\n              *ngIf=\"column.renderAsStarRating; else dateCell\"\n              [rating]=\"entry[column.property]\"\n            ></cx-star-rating>\n          </ng-template>\n\n          <ng-template #dateCell>\n            <ng-container\n              *ngIf=\"column?.isDate && entry[column.property]; else tableCell\"\n              ><span>{{\n                entry[column.property]\n                  | cxDate: asmCustomer360Config?.asmCustomer360?.dateTimeFormat\n              }}</span></ng-container\n            >\n          </ng-template>\n\n          <ng-template #tableCell>\n            <ng-container\n              ><span\n                [title]=\"\n                  entry[column.property] ||\n                  ('asmCustomer360.emptyCellValue' | cxTranslate)\n                \"\n                >{{\n                  entry[column.property] ||\n                    ('asmCustomer360.emptyCellValue' | cxTranslate)\n                }}</span\n              ></ng-container\n            >\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-container>\n<div class=\"cx-asm-customer-360-table-empty\" *ngIf=\"!entryPages?.length\">\n  {{ emptyStateText }}\n</div>\n", dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.StarRatingComponent, selector: "cx-star-rating", inputs: ["disabled", "rating"], outputs: ["change"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }, { kind: "pipe", type: i4.CxDatePipe, name: "cxDate" }, { kind: "pipe", type: i5.ArgsPipe, name: "cxArgs" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AsmCustomer360TableComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'cx-asm-customer-360-table', template: "<div class=\"cx-asm-customer-360-table-heading\" *ngIf=\"headerText\">\n  <h4 class=\"cx-asm-customer-360-table-heading-text\">\n    {{ headerText }}\n  </h4>\n  <div\n    [attr.aria-label]=\"'asmCustomer360.pagination' | cxTranslate\"\n    class=\"cx-asm-customer-360-table-heading-pages\"\n    *ngIf=\"entryPages\"\n  >\n    <ng-container *ngFor=\"let page of entryPages; let pageNumber = index\">\n      <button\n        *ngIf=\"entryPages.length > 1\"\n        (click)=\"setPageNumber(pageNumber, true)\"\n        class=\"cx-asm-customer-360-table-heading-page link\"\n        [class.active]=\"currentPageNumber === pageNumber\"\n        [attr.aria-current]=\"currentPageNumber === pageNumber ? 'page' : null\"\n        [disabled]=\"currentPageNumber === pageNumber\"\n        [attr.aria-label]=\"\n          'asmCustomer360.page' | cxTranslate: { number: pageNumber + 1 }\n        \"\n      >\n        {{ pageNumber + 1 }}\n      </button>\n    </ng-container>\n  </div>\n</div>\n<hr class=\"cx-asm-customer-360-table-separator\" aria-hidden=\"true\" />\n<ng-container *ngIf=\"entryPages?.length && columns?.length\">\n  <table\n    #table\n    class=\"cx-asm-customer-360-table\"\n    role=\"grid\"\n    [attr.aria-rowcount]=\"entries.length\"\n    [attr.aria-colcount]=\"columns.length\"\n    [attr.data-per-page]=\"pageSize\"\n  >\n    <caption class=\"cx-visually-hidden\">\n      {{\n        headerText\n      }}\n    </caption>\n    <thead>\n      <tr class=\"cx-asm-customer-360-table-row-header\" role=\"row\">\n        <th\n          class=\"cx-asm-customer-360-table-header\"\n          role=\"columnheader\"\n          *ngFor=\"let column of columns; let columnIndex = index\"\n          [class.active]=\"sortProperty === column.property\"\n          [class.asc]=\"listSortOrder === SortOrder.ASC\"\n          [class.desc]=\"listSortOrder !== SortOrder.ASC\"\n          [attr.aria-sort]=\"\n            sortDirection | cxArgs: column.property:sortProperty:listSortOrder\n          \"\n          [ngClass]=\"{\n            'text-start':\n              column.headerTextAlign === CustomerTableTextAlign.START,\n            'text-center':\n              column.headerTextAlign === CustomerTableTextAlign.CENTER,\n            'text-end': column.headerTextAlign === CustomerTableTextAlign.END\n          }\"\n          (click)=\"setSelectedTabIndex(columnIndex, 0)\"\n        >\n          <button\n            [tabindex]=\"\n              tabIndexValue\n                | cxArgs\n                  : focusedTableColumnIndex\n                  : focusedTableRowIndex\n                  : columnIndex\n            \"\n            class=\"link\"\n            (click)=\"sortEntriesAndUpdatePages(column.property)\"\n            (keydown)=\"onKeyDownCell($event, columnIndex, 0)\"\n          >\n            <span *ngIf=\"column?.i18nTextKey\">{{\n              column.i18nTextKey | cxTranslate\n            }}</span>\n            <span *ngIf=\"!column?.i18nTextKey\">{{ column.text }}</span>\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        class=\"cx-asm-customer-360-table-row\"\n        role=\"row\"\n        *ngFor=\"let entry of currentPage$ | async; let rowIndex = index\"\n      >\n        <td\n          role=\"cell\"\n          tabindex=\"-1\"\n          *ngFor=\"let column of columns; let columnIndex = index\"\n          (keydown)=\"onKeyDownCell($event, columnIndex, rowIndex + 1)\"\n          (click)=\"setSelectedTabIndex(columnIndex, rowIndex + 1)\"\n          [ngClass]=\"{\n            'text-start': column.textAlign === CustomerTableTextAlign.START,\n            'text-center': column.textAlign === CustomerTableTextAlign.CENTER,\n            'text-end': column.textAlign === CustomerTableTextAlign.END\n          }\"\n        >\n          <ng-container\n            *ngIf=\"column.navigatable; then linkTemplate; else starRating\"\n          ></ng-container>\n\n          <ng-template #linkTemplate>\n            <button\n              tabindex=\"-1\"\n              [attr.aria-label]=\"entry[column.property]\"\n              (click)=\"selectItem.emit(entry)\"\n              class=\"cx-asm-customer-360-table-link link\"\n              [title]=\"\n                entry[column.property] ||\n                ('asmCustomer360.emptyCellValue' | cxTranslate)\n              \"\n            >\n              {{\n                entry[column.property] ||\n                  ('asmCustomer360.emptyCellValue' | cxTranslate)\n              }}\n            </button>\n          </ng-template>\n\n          <ng-template #starRating>\n            <cx-star-rating\n              tabindex=\"-1\"\n              *ngIf=\"column.renderAsStarRating; else dateCell\"\n              [rating]=\"entry[column.property]\"\n            ></cx-star-rating>\n          </ng-template>\n\n          <ng-template #dateCell>\n            <ng-container\n              *ngIf=\"column?.isDate && entry[column.property]; else tableCell\"\n              ><span>{{\n                entry[column.property]\n                  | cxDate: asmCustomer360Config?.asmCustomer360?.dateTimeFormat\n              }}</span></ng-container\n            >\n          </ng-template>\n\n          <ng-template #tableCell>\n            <ng-container\n              ><span\n                [title]=\"\n                  entry[column.property] ||\n                  ('asmCustomer360.emptyCellValue' | cxTranslate)\n                \"\n                >{{\n                  entry[column.property] ||\n                    ('asmCustomer360.emptyCellValue' | cxTranslate)\n                }}</span\n              ></ng-container\n            >\n          </ng-template>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</ng-container>\n<div class=\"cx-asm-customer-360-table-empty\" *ngIf=\"!entryPages?.length\">\n  {{ emptyStateText }}\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.AsmCustomer360Config }, { type: i2.DirectionService }]; }, propDecorators: { table: [{
                type: ViewChild,
                args: ['table']
            }], columns: [{
                type: Input
            }], emptyStateText: [{
                type: Input
            }], entries: [{
                type: Input
            }], headerText: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], sortProperty: [{
                type: Input
            }], selectItem: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,