/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { GlobalMessageType, } from '@spartacus/core';
import { CustomFormValidators, ICON_TYPE, } from '@spartacus/storefront';
import { BehaviorSubject } from 'rxjs';
import { first } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/forms";
import * as i3 from "@spartacus/asm/root";
import * as i4 from "@spartacus/core";
import * as i5 from "@angular/common";
export class AsmCreateCustomerFormComponent {
    constructor(launchDialogService, fb, asmCreateCustomerFacade, translationService) {
        this.launchDialogService = launchDialogService;
        this.fb = fb;
        this.asmCreateCustomerFacade = asmCreateCustomerFacade;
        this.translationService = translationService;
        this.iconTypes = ICON_TYPE;
        this.isLoading$ = new BehaviorSubject(false);
        this.showDialogInfoAlert = true;
        this.globalMessageType = GlobalMessageType;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: true,
            focusOnEscape: true,
        };
        this.registerForm = this.fb.group({
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            email: ['', [Validators.required, CustomFormValidators.emailValidator]],
        });
    }
    submitForm() {
        if (this.registerForm.valid) {
            this.registerUser();
        }
        else {
            this.registerForm.markAllAsTouched();
        }
    }
    registerUser() {
        this.isLoading$.next(true);
        const { firstName, lastName, email } = this.registerForm.value;
        this.createdCustomer = {
            firstName: firstName ?? '',
            lastName: lastName ?? '',
            email: email ?? '',
        };
        const obs$ = this.asmCreateCustomerFacade.createCustomer(this.collectDataFromRegisterForm());
        obs$.subscribe({
            next: (result) => this.onRegisterUserSuccess(result),
            error: (error) => this.onRegisterUserFail(error),
        });
        obs$.subscribe({
            complete: () => this.isLoading$.next(false),
        });
    }
    collectDataFromRegisterForm() {
        return {
            firstName: this.createdCustomer.firstName,
            lastName: this.createdCustomer.lastName,
            emailAddress: this.createdCustomer.email,
        };
    }
    closeModal(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    closeDialogInfoAlert() {
        this.showDialogInfoAlert = false;
    }
    closeDialogBackendErroAlert(index) {
        this.showDialogBackendErrorAlerts[index] = false;
    }
    onRegisterUserSuccess(user) {
        this.launchDialogService.closeDialog(user);
    }
    onRegisterUserFail(error) {
        this.isLoading$.next(false);
        this.backendErrorMessages = [];
        this.showDialogBackendErrorAlerts = [];
        const unknownError = 'httpHandlers.unknownError';
        const errorDetails = error.details ?? [];
        if (errorDetails.length === 0) {
            this.addErrorMessage(unknownError);
        }
        errorDetails.forEach((errorDetail) => {
            switch (errorDetail.type || '') {
                case 'ValidationError':
                    this.addErrorMessage(`asm.createCustomerForm.validationErrors.${errorDetail.subject}`);
                    break;
                case 'AssistedServiceDuplicatedUidError':
                    this.addErrorMessage('asm.createCustomerForm.badRequestDuplicatedEmail', {
                        emailAddress: this.createdCustomer.email,
                    });
                    break;
                default:
                    this.addErrorMessage(unknownError);
            }
        });
    }
    addErrorMessage(key, options) {
        this.translationService
            .translate(key, options)
            .pipe(first())
            .subscribe((text) => {
            this.backendErrorMessages.push(text);
            this.showDialogBackendErrorAlerts.push(true);
        });
    }
}
AsmCreateCustomerFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AsmCreateCustomerFormComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.FormBuilder }, { token: i3.AsmCreateCustomerFacade }, { token: i4.TranslationService }], target: i0.ɵɵFactoryTarget.Component });
AsmCreateCustomerFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: AsmCreateCustomerFormComponent, selector: "cx-asm-create-customer-form", ngImport: i0, template: "<div\n  class=\"cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <ng-container>\n      <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\n        <!-- Modal Header -->\n        <div class=\"cx-dialog-header modal-header\">\n          <h2 class=\"title modal-title\">\n            {{ 'asm.createCustomerForm.title' | cxTranslate }}\n          </h2>\n        </div>\n        <!-- Modal Body -->\n        <div class=\"cx-dialog-body modal-body\">\n          <div class=\"message-container\">\n            <cx-message\n              *ngIf=\"showDialogInfoAlert\"\n              [text]=\"'asm.createCustomerForm.createAccountAlert' | cxTranslate\"\n              [type]=\"globalMessageType.MSG_TYPE_INFO\"\n              (closeMessage)=\"closeDialogInfoAlert()\"\n            >\n            </cx-message>\n            <ng-container\n              *ngFor=\"let errorMessage of backendErrorMessages; let i = index\"\n            >\n              <cx-message\n                *ngIf=\"showDialogBackendErrorAlerts[i]\"\n                [text]=\"errorMessage\"\n                [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n                (closeMessage)=\"closeDialogBackendErroAlert(i)\"\n              >\n              </cx-message>\n            </ng-container>\n          </div>\n\n          <div *ngIf=\"!(isLoading$ | async); else loading\">\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.firstName.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.firstName.placeholder' | cxTranslate\n                  }}\"\n                  formControlName=\"firstName\"\n                  name=\"text\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('firstName')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.lastName.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.lastName.placeholder' | cxTranslate\n                  }}\"\n                  name=\"text\"\n                  formControlName=\"lastName\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('lastName')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.emailAddress.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.emailAddress.placeholder'\n                      | cxTranslate\n                  }}\"\n                  name=\"email\"\n                  formControlName=\"email\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('email')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n        </div>\n        <!-- Modal Footer -->\n        <div class=\"modal-footer\">\n          <button\n            type=\"submit\"\n            class=\"\n              btn\n              cx-asm-create-customer-btn cx-asm-create-customer-btn-create\n            \"\n          >\n            {{ 'asm.createCustomerForm.createAccount' | cxTranslate }}\n          </button>\n          <button\n            type=\"button\"\n            class=\"\n              btn\n              cx-asm-create-customer-btn cx-asm-create-customer-btn-cancel\n            \"\n            (click)=\"closeModal('Cancel click')\"\n          >\n            {{ 'asm.createCustomerForm.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i1.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "component", type: i1.SpinnerComponent, selector: "cx-spinner" }, { kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "component", type: i1.MessageComponent, selector: "cx-message", inputs: ["text", "actionButtonText", "actionButtonMessage", "accordionText", "showBody", "isVisibleCloseButton", "type"], outputs: ["closeMessage", "buttonAction"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AsmCreateCustomerFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-asm-create-customer-form', template: "<div\n  class=\"cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <ng-container>\n      <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\n        <!-- Modal Header -->\n        <div class=\"cx-dialog-header modal-header\">\n          <h2 class=\"title modal-title\">\n            {{ 'asm.createCustomerForm.title' | cxTranslate }}\n          </h2>\n        </div>\n        <!-- Modal Body -->\n        <div class=\"cx-dialog-body modal-body\">\n          <div class=\"message-container\">\n            <cx-message\n              *ngIf=\"showDialogInfoAlert\"\n              [text]=\"'asm.createCustomerForm.createAccountAlert' | cxTranslate\"\n              [type]=\"globalMessageType.MSG_TYPE_INFO\"\n              (closeMessage)=\"closeDialogInfoAlert()\"\n            >\n            </cx-message>\n            <ng-container\n              *ngFor=\"let errorMessage of backendErrorMessages; let i = index\"\n            >\n              <cx-message\n                *ngIf=\"showDialogBackendErrorAlerts[i]\"\n                [text]=\"errorMessage\"\n                [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n                (closeMessage)=\"closeDialogBackendErroAlert(i)\"\n              >\n              </cx-message>\n            </ng-container>\n          </div>\n\n          <div *ngIf=\"!(isLoading$ | async); else loading\">\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.firstName.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.firstName.placeholder' | cxTranslate\n                  }}\"\n                  formControlName=\"firstName\"\n                  name=\"text\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('firstName')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.lastName.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.lastName.placeholder' | cxTranslate\n                  }}\"\n                  name=\"text\"\n                  formControlName=\"lastName\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('lastName')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n\n            <div class=\"form-group\">\n              <label>\n                <span class=\"label-content\">{{\n                  'asm.createCustomerForm.emailAddress.label' | cxTranslate\n                }}</span>\n                <input\n                  required=\"true\"\n                  class=\"form-control\"\n                  placeholder=\"{{\n                    'asm.createCustomerForm.emailAddress.placeholder'\n                      | cxTranslate\n                  }}\"\n                  name=\"email\"\n                  formControlName=\"email\"\n                />\n                <cx-form-errors\n                  [control]=\"registerForm.get('email')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n        </div>\n        <!-- Modal Footer -->\n        <div class=\"modal-footer\">\n          <button\n            type=\"submit\"\n            class=\"\n              btn\n              cx-asm-create-customer-btn cx-asm-create-customer-btn-create\n            \"\n          >\n            {{ 'asm.createCustomerForm.createAccount' | cxTranslate }}\n          </button>\n          <button\n            type=\"button\"\n            class=\"\n              btn\n              cx-asm-create-customer-btn cx-asm-create-customer-btn-cancel\n            \"\n            (click)=\"closeModal('Cancel click')\"\n          >\n            {{ 'asm.createCustomerForm.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </form>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.FormBuilder }, { type: i3.AsmCreateCustomerFacade }, { type: i4.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNtLWNyZWF0ZS1jdXN0b21lci1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9hc20vY29tcG9uZW50cy9hc20tY3JlYXRlLWN1c3RvbWVyLWZvcm0vYXNtLWNyZWF0ZS1jdXN0b21lci1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9hc20vY29tcG9uZW50cy9hc20tY3JlYXRlLWN1c3RvbWVyLWZvcm0vYXNtLWNyZWF0ZS1jdXN0b21lci1mb3JtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBZSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUt6RCxPQUFPLEVBQ0wsaUJBQWlCLEdBSWxCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUNMLG9CQUFvQixFQUVwQixTQUFTLEdBRVYsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7OztBQU92QyxNQUFNLE9BQU8sOEJBQThCO0lBNEJ6QyxZQUNZLG1CQUF3QyxFQUN4QyxFQUFlLEVBQ2YsdUJBQWdELEVBQ2hELGtCQUFzQztRQUh0Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZiw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUE3QmxELGNBQVMsR0FBRyxTQUFTLENBQUM7UUFFdEIsZUFBVSxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhDLHdCQUFt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LENBQUMsQ0FBQztJQUNQLENBQUM7OzJIQWxJVSw4QkFBOEI7K0dBQTlCLDhCQUE4QixtRUNoQzNDLHUrSUFrSUE7MkZEbEdhLDhCQUE4QjtrQkFKMUMsU0FBUzsrQkFDRSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgQXNtQ3JlYXRlQ3VzdG9tZXJGYWNhZGUsXG4gIEN1c3RvbWVyUmVnaXN0cmF0aW9uRm9ybSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9hc20vcm9vdCc7XG5pbXBvcnQge1xuICBHbG9iYWxNZXNzYWdlVHlwZSxcbiAgSHR0cEVycm9yTW9kZWwsXG4gIFRyYW5zbGF0aW9uU2VydmljZSxcbiAgVXNlcixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIEN1c3RvbUZvcm1WYWxpZGF0b3JzLFxuICBGb2N1c0NvbmZpZyxcbiAgSUNPTl9UWVBFLFxuICBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaXJzdCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENyZWF0ZWRDdXN0b21lciB9IGZyb20gJy4vYXNtLWNyZWF0ZS1jdXN0b21lci1mb3JtLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtYXNtLWNyZWF0ZS1jdXN0b21lci1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2FzbS1jcmVhdGUtY3VzdG9tZXItZm9ybS5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFzbUNyZWF0ZUN1c3RvbWVyRm9ybUNvbXBvbmVudCB7XG4gIGNyZWF0ZWRDdXN0b21lcjogQ3JlYXRlZEN1c3RvbWVyO1xuXG4gIGljb25UeXBlcyA9IElDT05fVFlQRTtcblxuICBpc0xvYWRpbmckID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgc2hvd0RpYWxvZ0luZm9BbGVydCA9IHRydWU7XG5cbiAgZ2xvYmFsTWVzc2FnZVR5cGUgPSBHbG9iYWxNZXNzYWdlVHlwZTtcblxuICBzaG93RGlhbG9nQmFja2VuZEVycm9yQWxlcnRzOiBib29sZWFuW107XG5cbiAgYmFja2VuZEVycm9yTWVzc2FnZXM6IHN0cmluZ1tdO1xuXG4gIGZvY3VzQ29uZmlnOiBGb2N1c0NvbmZpZyA9IHtcbiAgICB0cmFwOiB0cnVlLFxuICAgIGJsb2NrOiB0cnVlLFxuICAgIGF1dG9mb2N1czogdHJ1ZSxcbiAgICBmb2N1c09uRXNjYXBlOiB0cnVlLFxuICB9O1xuXG4gIHJlZ2lzdGVyRm9ybSA9IHRoaXMuZmIuZ3JvdXAoe1xuICAgIGZpcnN0TmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICBsYXN0TmFtZTogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICBlbWFpbDogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgQ3VzdG9tRm9ybVZhbGlkYXRvcnMuZW1haWxWYWxpZGF0b3JdXSxcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGxhdW5jaERpYWxvZ1NlcnZpY2U6IExhdW5jaERpYWxvZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGZiOiBGb3JtQnVpbGRlcixcbiAgICBwcm90ZWN0ZWQgYXNtQ3JlYXRlQ3VzdG9tZXJGYWNhZGU6IEFzbUNyZWF0ZUN1c3RvbWVyRmFjYWRlLFxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvblNlcnZpY2U6IFRyYW5zbGF0aW9uU2VydmljZVxuICApIHt9XG5cbiAgc3VibWl0Rm9ybSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZWdpc3RlckZvcm0udmFsaWQpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJVc2VyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJGb3JtLm1hcmtBbGxBc1RvdWNoZWQoKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3RlclVzZXIoKTogdm9pZCB7XG4gICAgdGhpcy5pc0xvYWRpbmckLm5leHQodHJ1ZSk7XG4gICAgY29uc3QgeyBmaXJzdE5hbWUsIGxhc3ROYW1lLCBlbWFpbCB9ID0gdGhpcy5yZWdpc3RlckZvcm0udmFsdWU7XG4gICAgdGhpcy5jcmVhdGVkQ3VzdG9tZXIgPSB7XG4gICAgICBmaXJzdE5hbWU6IGZpcnN0TmFtZSA/PyAnJyxcbiAgICAgIGxhc3ROYW1lOiBsYXN0TmFtZSA/PyAnJyxcbiAgICAgIGVtYWlsOiBlbWFpbCA/PyAnJyxcbiAgICB9O1xuXG4gICAgY29uc3Qgb2JzJCA9IHRoaXMuYXNtQ3JlYXRlQ3VzdG9tZXJGYWNhZGUuY3JlYXRlQ3VzdG9tZXIoXG4gICAgICB0aGlzLmNvbGxlY3REYXRhRnJvbVJlZ2lzdGVyRm9ybSgpXG4gICAgKTtcblxuICAgIG9icyQuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IChyZXN1bHQ6IFVzZXIpID0+IHRoaXMub25SZWdpc3RlclVzZXJTdWNjZXNzKHJlc3VsdCksXG4gICAgICBlcnJvcjogKGVycm9yOiBIdHRwRXJyb3JNb2RlbCkgPT4gdGhpcy5vblJlZ2lzdGVyVXNlckZhaWwoZXJyb3IpLFxuICAgIH0pO1xuXG4gICAgb2JzJC5zdWJzY3JpYmUoe1xuICAgICAgY29tcGxldGU6ICgpID0+IHRoaXMuaXNMb2FkaW5nJC5uZXh0KGZhbHNlKSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbGxlY3REYXRhRnJvbVJlZ2lzdGVyRm9ybSgpOiBDdXN0b21lclJlZ2lzdHJhdGlvbkZvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICBmaXJzdE5hbWU6IHRoaXMuY3JlYXRlZEN1c3RvbWVyLmZpcnN0TmFtZSxcbiAgICAgIGxhc3ROYW1lOiB0aGlzLmNyZWF0ZWRDdXN0b21lci5sYXN0TmFtZSxcbiAgICAgIGVtYWlsQWRkcmVzczogdGhpcy5jcmVhdGVkQ3VzdG9tZXIuZW1haWwsXG4gICAgfTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwocmVhc29uPzogdW5rbm93bik6IHZvaWQge1xuICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5jbG9zZURpYWxvZyhyZWFzb24pO1xuICB9XG5cbiAgY2xvc2VEaWFsb2dJbmZvQWxlcnQoKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGlhbG9nSW5mb0FsZXJ0ID0gZmFsc2U7XG4gIH1cblxuICBjbG9zZURpYWxvZ0JhY2tlbmRFcnJvQWxlcnQoaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2hvd0RpYWxvZ0JhY2tlbmRFcnJvckFsZXJ0c1tpbmRleF0gPSBmYWxzZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblJlZ2lzdGVyVXNlclN1Y2Nlc3ModXNlcjogVXNlcik6IHZvaWQge1xuICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5jbG9zZURpYWxvZyh1c2VyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvblJlZ2lzdGVyVXNlckZhaWwoZXJyb3I6IEh0dHBFcnJvck1vZGVsKTogdm9pZCB7XG4gICAgdGhpcy5pc0xvYWRpbmckLm5leHQoZmFsc2UpO1xuICAgIHRoaXMuYmFja2VuZEVycm9yTWVzc2FnZXMgPSBbXTtcbiAgICB0aGlzLnNob3dEaWFsb2dCYWNrZW5kRXJyb3JBbGVydHMgPSBbXTtcblxuICAgIGNvbnN0IHVua25vd25FcnJvciA9ICdodHRwSGFuZGxlcnMudW5rbm93bkVycm9yJztcbiAgICBjb25zdCBlcnJvckRldGFpbHMgPSBlcnJvci5kZXRhaWxzID8/IFtdO1xuXG4gICAgaWYgKGVycm9yRGV0YWlscy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuYWRkRXJyb3JNZXNzYWdlKHVua25vd25FcnJvcik7XG4gICAgfVxuICAgIGVycm9yRGV0YWlscy5mb3JFYWNoKChlcnJvckRldGFpbCkgPT4ge1xuICAgICAgc3dpdGNoIChlcnJvckRldGFpbC50eXBlIHx8ICcnKSB7XG4gICAgICAgIGNhc2UgJ1ZhbGlkYXRpb25FcnJvcic6XG4gICAgICAgICAgdGhpcy5hZGRFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICBgYXNtLmNyZWF0ZUN1c3RvbWVyRm9ybS52YWxpZGF0aW9uRXJyb3JzLiR7ZXJyb3JEZXRhaWwuc3ViamVjdH1gXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQXNzaXN0ZWRTZXJ2aWNlRHVwbGljYXRlZFVpZEVycm9yJzpcbiAgICAgICAgICB0aGlzLmFkZEVycm9yTWVzc2FnZShcbiAgICAgICAgICAgICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmJhZFJlcXVlc3REdXBsaWNhdGVkRW1haWwnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlbWFpbEFkZHJlc3M6IHRoaXMuY3JlYXRlZEN1c3RvbWVyLmVtYWlsLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5hZGRFcnJvck1lc3NhZ2UodW5rbm93bkVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRFcnJvck1lc3NhZ2Uoa2V5OiBzdHJpbmcsIG9wdGlvbnM/OiB1bmtub3duKTogdm9pZCB7XG4gICAgdGhpcy50cmFuc2xhdGlvblNlcnZpY2VcbiAgICAgIC50cmFuc2xhdGUoa2V5LCBvcHRpb25zKVxuICAgICAgLnBpcGUoZmlyc3QoKSlcbiAgICAgIC5zdWJzY3JpYmUoKHRleHQpID0+IHtcbiAgICAgICAgdGhpcy5iYWNrZW5kRXJyb3JNZXNzYWdlcy5wdXNoKHRleHQpO1xuICAgICAgICB0aGlzLnNob3dEaWFsb2dCYWNrZW5kRXJyb3JBbGVydHMucHVzaCh0cnVlKTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2XG4gIGNsYXNzPVwiY3gtbW9kYWwtY29udGFpbmVyIGN4LWFzbS1kaWFsb2dcIlxuICBbY3hGb2N1c109XCJmb2N1c0NvbmZpZ1wiXG4gIChlc2MpPVwiY2xvc2VNb2RhbCgnRXNjYXBlIGNsaWNrZWQnKVwiXG4+XG4gIDxkaXYgY2xhc3M9XCJjeC1tb2RhbC1jb250ZW50XCI+XG4gICAgPG5nLWNvbnRhaW5lcj5cbiAgICAgIDxmb3JtIChuZ1N1Ym1pdCk9XCJzdWJtaXRGb3JtKClcIiBbZm9ybUdyb3VwXT1cInJlZ2lzdGVyRm9ybVwiPlxuICAgICAgICA8IS0tIE1vZGFsIEhlYWRlciAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImN4LWRpYWxvZy1oZWFkZXIgbW9kYWwtaGVhZGVyXCI+XG4gICAgICAgICAgPGgyIGNsYXNzPVwidGl0bGUgbW9kYWwtdGl0bGVcIj5cbiAgICAgICAgICAgIHt7ICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLnRpdGxlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgICAgPC9oMj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwhLS0gTW9kYWwgQm9keSAtLT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImN4LWRpYWxvZy1ib2R5IG1vZGFsLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVzc2FnZS1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxjeC1tZXNzYWdlXG4gICAgICAgICAgICAgICpuZ0lmPVwic2hvd0RpYWxvZ0luZm9BbGVydFwiXG4gICAgICAgICAgICAgIFt0ZXh0XT1cIidhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmNyZWF0ZUFjY291bnRBbGVydCcgfCBjeFRyYW5zbGF0ZVwiXG4gICAgICAgICAgICAgIFt0eXBlXT1cImdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0lORk9cIlxuICAgICAgICAgICAgICAoY2xvc2VNZXNzYWdlKT1cImNsb3NlRGlhbG9nSW5mb0FsZXJ0KClcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9jeC1tZXNzYWdlPlxuICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgZXJyb3JNZXNzYWdlIG9mIGJhY2tlbmRFcnJvck1lc3NhZ2VzOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGN4LW1lc3NhZ2VcbiAgICAgICAgICAgICAgICAqbmdJZj1cInNob3dEaWFsb2dCYWNrZW5kRXJyb3JBbGVydHNbaV1cIlxuICAgICAgICAgICAgICAgIFt0ZXh0XT1cImVycm9yTWVzc2FnZVwiXG4gICAgICAgICAgICAgICAgW3R5cGVdPVwiZ2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfRVJST1JcIlxuICAgICAgICAgICAgICAgIChjbG9zZU1lc3NhZ2UpPVwiY2xvc2VEaWFsb2dCYWNrZW5kRXJyb0FsZXJ0KGkpXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8L2N4LW1lc3NhZ2U+XG4gICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgKm5nSWY9XCIhKGlzTG9hZGluZyQgfCBhc3luYyk7IGVsc2UgbG9hZGluZ1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudFwiPnt7XG4gICAgICAgICAgICAgICAgICAnYXNtLmNyZWF0ZUN1c3RvbWVyRm9ybS5maXJzdE5hbWUubGFiZWwnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7XG4gICAgICAgICAgICAgICAgICAgICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmZpcnN0TmFtZS5wbGFjZWhvbGRlcicgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgICAgfX1cIlxuICAgICAgICAgICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiZmlyc3ROYW1lXCJcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxjeC1mb3JtLWVycm9yc1xuICAgICAgICAgICAgICAgICAgW2NvbnRyb2xdPVwicmVnaXN0ZXJGb3JtLmdldCgnZmlyc3ROYW1lJylcIlxuICAgICAgICAgICAgICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnRcIj57e1xuICAgICAgICAgICAgICAgICAgJ2FzbS5jcmVhdGVDdXN0b21lckZvcm0ubGFzdE5hbWUubGFiZWwnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInt7XG4gICAgICAgICAgICAgICAgICAgICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmxhc3ROYW1lLnBsYWNlaG9sZGVyJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgICB9fVwiXG4gICAgICAgICAgICAgICAgICBuYW1lPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJsYXN0TmFtZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgICAgICAgICAgICAgIFtjb250cm9sXT1cInJlZ2lzdGVyRm9ybS5nZXQoJ2xhc3ROYW1lJylcIlxuICAgICAgICAgICAgICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnRcIj57e1xuICAgICAgICAgICAgICAgICAgJ2FzbS5jcmVhdGVDdXN0b21lckZvcm0uZW1haWxBZGRyZXNzLmxhYmVsJyB8IGN4VHJhbnNsYXRlXG4gICAgICAgICAgICAgICAgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICByZXF1aXJlZD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJ7e1xuICAgICAgICAgICAgICAgICAgICAnYXNtLmNyZWF0ZUN1c3RvbWVyRm9ybS5lbWFpbEFkZHJlc3MucGxhY2Vob2xkZXInXG4gICAgICAgICAgICAgICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgICAgICAgfX1cIlxuICAgICAgICAgICAgICAgICAgbmFtZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cImVtYWlsXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxjeC1mb3JtLWVycm9yc1xuICAgICAgICAgICAgICAgICAgW2NvbnRyb2xdPVwicmVnaXN0ZXJGb3JtLmdldCgnZW1haWwnKVwiXG4gICAgICAgICAgICAgICAgPjwvY3gtZm9ybS1lcnJvcnM+XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDwhLS0gTW9kYWwgRm9vdGVyIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICBjbGFzcz1cIlxuICAgICAgICAgICAgICBidG5cbiAgICAgICAgICAgICAgY3gtYXNtLWNyZWF0ZS1jdXN0b21lci1idG4gY3gtYXNtLWNyZWF0ZS1jdXN0b21lci1idG4tY3JlYXRlXG4gICAgICAgICAgICBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7ICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmNyZWF0ZUFjY291bnQnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGNsYXNzPVwiXG4gICAgICAgICAgICAgIGJ0blxuICAgICAgICAgICAgICBjeC1hc20tY3JlYXRlLWN1c3RvbWVyLWJ0biBjeC1hc20tY3JlYXRlLWN1c3RvbWVyLWJ0bi1jYW5jZWxcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAoY2xpY2spPVwiY2xvc2VNb2RhbCgnQ2FuY2VsIGNsaWNrJylcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7ICdhc20uY3JlYXRlQ3VzdG9tZXJGb3JtLmNhbmNlbCcgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZm9ybT5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG48L2Rpdj5cblxuPG5nLXRlbXBsYXRlICNsb2FkaW5nPlxuICA8ZGl2IGNsYXNzPVwiY3gtc3Bpbm5lclwiPjxjeC1zcGlubmVyPjwvY3gtc3Bpbm5lcj48L2Rpdj5cbjwvbmctdGVtcGxhdGU+XG4iXX0=