/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component, Optional, ViewChild, } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { CustomerListColumnActionType, } from '@spartacus/asm/root';
import { BREAKPOINT, ICON_TYPE, } from '@spartacus/storefront';
import { combineLatest, NEVER, Subscription } from 'rxjs';
import { distinctUntilChanged, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/asm/root";
import * as i3 from "@spartacus/core";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@ng-select/ng-select";
export class CustomerListComponent {
    constructor(launchDialogService, breakpointService, asmConfig, translation, asmCustomerListFacade, 
    // TODO:(CXSPA-3090) for next major release remove feature level
    featureConfig, occConfig) {
        this.launchDialogService = launchDialogService;
        this.breakpointService = breakpointService;
        this.asmConfig = asmConfig;
        this.translation = translation;
        this.asmCustomerListFacade = asmCustomerListFacade;
        this.featureConfig = featureConfig;
        this.occConfig = occConfig;
        this.DEFAULT_PAGE_SIZE = 5;
        this.focusConfig = {
            trap: true,
            block: true,
            autofocus: 'customer-list-selector',
            focusOnEscape: true,
        };
        this.iconTypes = ICON_TYPE;
        this.BREAKPOINT = BREAKPOINT;
        this.currentPage = 0;
        this.maxPage = 0;
        this.loaded = false;
        this.listsError = false;
        this.listsEmpty = false;
        this.enableAsmB2bCustomerList = false;
        this.customerListColumnActionType = CustomerListColumnActionType;
        this.searchBox = new UntypedFormControl();
        this.teardown = new Subscription();
        this.breakpoint$ = this.getBreakpoint();
    }
    ngOnInit() {
        this.pageSize =
            this.asmConfig.asm?.customerList?.pageSize ?? this.DEFAULT_PAGE_SIZE;
        this.customerListConfig = this.asmConfig?.asm?.customerList;
        this.customerListsPage$ =
            this.asmCustomerListFacade.getCustomerListsState().pipe(tap((state) => (this.listsError = !!state.error)), map((state) => {
                if (state?.data?.userGroups?.length === 0) {
                    this.listsEmpty = true;
                    return undefined;
                }
                else {
                    return state.data;
                }
            }), distinctUntilChanged(), tap((result) => {
                // set the first value of this.customerListsPage$ to be selected
                if (!this.selectedUserGroupId) {
                    this.selectedUserGroupId = result?.userGroups?.[0]?.uid;
                    this.sorts = null;
                    this.fetchCustomers();
                }
            })) ?? NEVER;
        this.customerSearchLoading$ = this.asmCustomerListFacade
            .getCustomerListCustomersSearchResultsLoading()
            .pipe(tap((loading) => (this.loaded = !loading)));
        this.teardown.add(this.customerSearchLoading$.subscribe());
        this.teardown.add(() => this.asmCustomerListFacade.customerListCustomersSearchReset());
        this.customerSearchError$ =
            this.asmCustomerListFacade.getCustomerListCustomersSearchResultsError();
        this.customerSearchPage$ = this.asmCustomerListFacade
            .getCustomerListCustomersSearchResults()
            .pipe(tap((result) => {
            if (result?.sorts) {
                this.sorts = result.sorts;
                this.sortCode = result.pagination?.sort;
            }
            if (result?.entries.length < this.pageSize) {
                this.maxPage = result.pagination?.currentPage ?? 0;
            }
            else {
                this.maxPage = this.currentPage + 1;
            }
        }));
    }
    ngOnDestroy() {
        this.teardown.unsubscribe();
    }
    changePage(page) {
        const options = {
            customerListId: this.selectedUserGroupId,
            pageSize: this.pageSize,
            currentPage: page,
            sort: this.sortCode,
        };
        if (this.searchBox?.value) {
            options.query = this.searchBox.value;
        }
        this.asmCustomerListFacade.customerListCustomersSearch(options);
    }
    fetchCustomers() {
        // TODO: (CXSPA-2722 for remove ) Remove FeatureConfigService for 7.0
        this.enableAsmB2bCustomerList =
            (this.featureConfig?.isLevel('6.1') ?? false) &&
                this.selectedUserGroupId === 'b2bCustomerList';
        if (this.selectedUserGroupId) {
            const options = {
                customerListId: this.selectedUserGroupId,
                pageSize: this.pageSize,
                currentPage: this.currentPage,
            };
            if (this.sortCode) {
                options.sort = this.sortCode;
            }
            if (this.searchBox?.value) {
                options.query = this.searchBox.value;
            }
            this.asmCustomerListFacade.customerListCustomersSearchReset();
            this.asmCustomerListFacade.customerListCustomersSearch(options);
        }
        this.updateCustomerListColumns();
    }
    updateCustomerListColumns() {
        const columns = this.customerListConfig?.columns || [];
        for (const column of columns) {
            if (column.headerLocalizationKey ===
                'asm.customerList.tableHeader.account' ||
                column.headerLocalizationKey === 'hideHeaders') {
                column.headerLocalizationKey = this.enableAsmB2bCustomerList
                    ? 'asm.customerList.tableHeader.account'
                    : 'hideHeaders';
            }
            if (column.headerLocalizationKey === 'asm.customerList.tableHeader.cart') {
                column.headerLocalizationKey = this.featureConfig?.isLevel('6.1')
                    ? column.headerLocalizationKey
                    : 'hideHeaders';
            }
        }
    }
    onChangeCustomerGroup() {
        this.currentPage = 0;
        this.sorts = null;
        this.sortCode = '';
        this.fetchCustomers();
    }
    getGroupName(customerListsPage, id) {
        return (customerListsPage?.userGroups?.find((userGroup) => userGroup.uid === id)
            ?.name ?? '');
    }
    getBadgeText(customerEntry) {
        return ((customerEntry.firstName?.charAt(0) ?? '') +
            (customerEntry.lastName?.charAt(0) ?? ''));
    }
    startColumnAction(customerEntry, action) {
        this.selectedCustomer = customerEntry;
        const closeValue = {
            actionType: action,
            selectedUser: customerEntry,
        };
        this.closeModal(closeValue);
    }
    onKey(event) {
        if (event.key === 'Enter') {
            this.searchCustomers();
        }
    }
    searchCustomers() {
        this.currentPage = 0;
        this.fetchCustomers();
    }
    isRequired(customerEntry, type) {
        if (type === CustomerListColumnActionType.ACTIVE_CART &&
            !customerEntry.lastCartId) {
            return true;
        }
        if (type === CustomerListColumnActionType.ORDER_HISTORY &&
            customerEntry.hasOrder !== true) {
            return true;
        }
        return false;
    }
    changeSortCode(sortCode) {
        this.sortCode = sortCode;
        this.fetchCustomers();
    }
    goToNextPage() {
        if (this.currentPage >= this.maxPage) {
            this.currentPage = this.maxPage;
        }
        else {
            if (this.loaded) {
                this.currentPage++;
                this.fetchCustomers();
            }
        }
    }
    goToPreviousPage() {
        if (this.currentPage <= 0) {
            this.currentPage = 0;
        }
        else {
            if (this.loaded) {
                this.currentPage--;
                this.fetchCustomers();
            }
        }
    }
    closeModal(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    getSortLabels() {
        return combineLatest([
            this.translation.translate('asm.customerList.tableSort.byName'),
            this.translation.translate('asm.customerList.tableSort.byNameAsc'),
            this.translation.translate('asm.customerList.tableSort.byNameDesc'),
            this.translation.translate('asm.customerList.tableSort.byDateAsc'),
            this.translation.translate('asm.customerList.tableSort.byDateDesc'),
            this.translation.translate('asm.customerList.tableSort.byOrderDateAsc'),
            this.translation.translate('asm.customerList.tableSort.byOrderDateDesc'),
            this.translation.translate('asm.customerList.tableSort.byUnit'),
            this.translation.translate('asm.customerList.tableSort.byUnitDesc'),
        ]).pipe(map(([textByName, textByNameAsc, textByNameDesc, textByDateAsc, textByDateDesc, textByOrderDateAsc, textByOrderDateDesc, textByUnit, textByUnitDesc,]) => {
            return {
                byName: textByName,
                byNameAsc: textByNameAsc,
                byNameDesc: textByNameDesc,
                byOrderDateAsc: textByOrderDateAsc,
                byOrderDateDesc: textByOrderDateDesc,
                byDateAsc: textByDateAsc,
                byDateDesc: textByDateDesc,
                byUnit: textByUnit,
                byUnitDesc: textByUnitDesc,
            };
        }));
    }
    createCustomer() {
        this.launchDialogService.closeDialog('Create customer click');
        this.launchDialogService?.openDialogAndSubscribe("ASM_CREATE_CUSTOMER_FORM" /* LAUNCH_CALLER.ASM_CREATE_CUSTOMER_FORM */, this.addNewCustomerLink);
    }
    getBreakpoint() {
        return this.breakpointService.breakpoint$.pipe(map((breakpoint) => {
            if (breakpoint === BREAKPOINT.lg || breakpoint === BREAKPOINT.xl) {
                breakpoint = BREAKPOINT.md;
            }
            return breakpoint;
        }));
    }
}
CustomerListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerListComponent, deps: [{ token: i1.LaunchDialogService }, { token: i1.BreakpointService }, { token: i2.AsmConfig }, { token: i3.TranslationService }, { token: i2.AsmCustomerListFacade }, { token: i3.FeatureConfigService, optional: true }, { token: i3.OccConfig, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CustomerListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: CustomerListComponent, selector: "cx-customer-list", viewQueries: [{ propertyName: "addNewCustomerLink", first: true, predicate: ["addNewCustomerLink"], descendants: true }], ngImport: i0, template: "<div\n  class=\"cx-asm-customer-list cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container>\n      <div class=\"cx-dialog-header modal-header\">\n        <h2 id=\"asm-customer-list-title\" class=\"title modal-title\">\n          {{ 'asm.customerList.title' | cxTranslate }}\n        </h2>\n        <div id=\"asm-customer-list-desc\" class=\"cx-visually-hidden\">\n          {{ 'asm.customerList.description' | cxTranslate }}\n        </div>\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'!6.1'\">\n          <ng-template *ngTemplateOutlet=\"closeButton\"></ng-template>\n        </ng-container>\n        <ng-container *cxFeatureLevel=\"'6.1'\">\n          <ng-template *ngTemplateOutlet=\"createCustomerButton\"></ng-template>\n        </ng-container>\n      </div>\n      <div\n        class=\"cx-dialog-sub-header modal-header\"\n        [class.tablet-mobile]=\"(breakpoint$ | async) !== BREAKPOINT.md\"\n        *ngIf=\"customerListsPage$ | async as customerListsPage\"\n      >\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'!6.1'\">\n          <ng-template\n            *ngTemplateOutlet=\"\n              groupSelector;\n              context: { customerListsPage: customerListsPage }\n            \"\n          ></ng-template>\n        </ng-container>\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'6.1'\">\n          <div\n            class=\"cx-header-select\"\n            [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n          >\n            <ng-template\n              *ngTemplateOutlet=\"\n                groupSelector;\n                context: { customerListsPage: customerListsPage }\n              \"\n            ></ng-template>\n            <ng-template\n              *ngTemplateOutlet=\"\n                total;\n                context: {\n                  customerSearchPage: customerSearchPage$ | async\n                }\n              \"\n            >\n            </ng-template>\n          </div>\n        </ng-container>\n\n        <div\n          class=\"cx-header-actions\"\n          [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n        >\n          <ng-template *ngTemplateOutlet=\"sort\"></ng-template>\n          <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n          <ng-container *cxFeatureLevel=\"'!6.1'\">\n            <ng-template *ngTemplateOutlet=\"pagination\"></ng-template>\n          </ng-container>\n          <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n          <ng-container *cxFeatureLevel=\"'6.1'\">\n            <ng-template *ngTemplateOutlet=\"search\"></ng-template>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item\">\n            <div *ngIf=\"listsEmpty\" class=\"cx-error-state\">\n              {{ 'asm.customerList.noLists' | cxTranslate }}\n            </div>\n            <div *ngIf=\"listsError\" class=\"cx-error-state\">\n              {{ 'asm.customerList.listsError' | cxTranslate }}\n            </div>\n            <div *ngIf=\"customerSearchError$ | async\" class=\"cx-error-state\">\n              {{ 'generalErrors.pageFailure' | cxTranslate }}\n            </div>\n            <cx-spinner *ngIf=\"customerSearchLoading$ | async\"></cx-spinner>\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <table\n                id=\"asm-cusomer-list-table\"\n                role=\"table\"\n                class=\"table\"\n                *ngIf=\"loaded\"\n              >\n                <caption class=\"cx-visually-hidden\">\n                  {{\n                    'asm.customerList.title' | cxTranslate\n                  }}\n                </caption>\n                <thead *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\">\n                  <tr role=\"row\">\n                    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                    <ng-container *cxFeatureLevel=\"'!6.1'\">\n                      <th\n                        role=\"columnheader\"\n                        class=\"cx-avatar-cell\"\n                        *ngIf=\"customerListConfig?.showAvatar\"\n                      >\n                        <span class=\"cx-visually-hidden\">\n                          {{\n                            'asm.customerList.tableHeader.customer'\n                              | cxTranslate\n                          }}\n                        </span>\n                      </th>\n                    </ng-container>\n                    <th\n                      role=\"columnheader\"\n                      *ngFor=\"let column of customerListConfig?.columns\"\n                    >\n                      <span\n                        *ngIf=\"\n                          column.headerLocalizationKey &&\n                          column.headerLocalizationKey !== 'hideHeaders'\n                        \"\n                      >\n                        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                        <ng-container *cxFeatureLevel=\"'!6.1'\">\n                          {{ column.headerLocalizationKey | cxTranslate }}\n                        </ng-container>\n                        <ng-container *cxFeatureLevel=\"'6.1'\">\n                          <!-- TODO:(CXSPA-3090) for next major release replace the translation lable -->\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey ===\n                              'asm.customerList.tableHeader.customer'\n                            \"\n                          >\n                            {{\n                              'asm.customerList.tableHeader.customerName'\n                                | cxTranslate\n                            }}\n                          </ng-container>\n                          <!-- TODO:(CXSPA-3090) for next major release replace the translation lable -->\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey ===\n                              'asm.customerList.tableHeader.email'\n                            \"\n                          >\n                            {{\n                              'asm.customerList.tableHeader.emailId'\n                                | cxTranslate\n                            }}\n                          </ng-container>\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey !==\n                                'asm.customerList.tableHeader.customer' &&\n                              column.headerLocalizationKey !==\n                                'asm.customerList.tableHeader.email'\n                            \"\n                          >\n                            {{ column.headerLocalizationKey | cxTranslate }}\n                          </ng-container>\n                        </ng-container>\n                      </span>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    role=\"row\"\n                    *ngFor=\"let customerEntry of customerSearchPage?.entries\"\n                  >\n                    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                    <ng-container *cxFeatureLevel=\"'!6.1'\">\n                      <td\n                        role=\"cell\"\n                        *ngIf=\"customerListConfig?.showAvatar\"\n                        class=\"cx-avatar-cell\"\n                      >\n                        <div class=\"cx-avatar\">\n                          {{ getBadgeText(customerEntry) }}\n                        </div>\n                      </td>\n                    </ng-container>\n                    <!-- multi columns if desktop -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\"\n                    >\n                      <td\n                        role=\"cell\"\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: false\n                            }\n                          \"\n                        ></ng-template>\n                      </td>\n                    </ng-container>\n                    <!-- two column if tablet -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.sm\"\n                    >\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let even = even\n                          \"\n                        >\n                          <ng-container *ngIf=\"even\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let odd = odd\n                          \"\n                        >\n                          <ng-container *ngIf=\"odd\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                    <!-- one column if mobile -->\n                    <td\n                      role=\"cell\"\n                      class=\"cx-multi-cell\"\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n                    >\n                      <ng-container\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: true\n                            }\n                          \"\n                        ></ng-template>\n                      </ng-container>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div\n                class=\"cx-empty-state\"\n                *ngIf=\"!customerSearchPage?.entries.length\"\n              >\n                {{ 'asm.customerList.noCustomers' | cxTranslate }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <!-- Modal Foot -->\n        <div\n          class=\"cx-dialog-sub-header modal-header cx-dialog-foot\"\n          [class.asm-mobile-pagination]=\"\n            (breakpoint$ | async) !== BREAKPOINT.md\n          \"\n          *ngIf=\"customerListsPage$ | async as customerListsPage\"\n        >\n          <div\n            class=\"cx-header-actions\"\n            [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n          >\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <cx-pagination\n                [pagination]=\"customerSearchPage.pagination\"\n                (viewPageEvent)=\"changePage($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n        </div>\n        <div class=\"cx-dialog-footer modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn cx-asm-customer-list-btn-cancel\"\n            (click)=\"closeModal('Cancel click')\"\n          >\n            {{ 'asm.createCustomerForm.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template\n  #cell\n  let-customerEntry=\"customerEntry\"\n  let-column=\"column\"\n  let-showHeader=\"showHeader\"\n>\n  <div\n    class=\"cx-cell-container\"\n    *ngIf=\"column.headerLocalizationKey !== 'hideHeaders'\"\n  >\n    <span class=\"cx-header-text\" *ngIf=\"showHeader\">\n      {{ column.headerLocalizationKey | cxTranslate }}\n    </span>\n\n    <ng-container *ngIf=\"!column.actionType\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </ng-container>\n\n    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n    <ng-container *cxFeatureLevel=\"'6.1'\">\n      <div\n        class=\"cx-avatar\"\n        *ngIf=\"\n          customerListConfig?.showAvatar &&\n          column?.actionType === customerListColumnActionType?.START_SESSION\n        \"\n      >\n        <img\n          *ngIf=\"customerEntry?.userAvatar?.url\"\n          [attr.src]=\"\n            occConfig?.backend?.occ?.baseUrl + customerEntry?.userAvatar?.url\n          \"\n          alt=\"{{ 'asm.mainLogoLabel' | cxTranslate }}\"\n        />\n        <div class=\"cx-avatar-text\" *ngIf=\"!customerEntry?.userAvatar?.url\">\n          {{ getBadgeText(customerEntry) }}\n        </div>\n      </div>\n    </ng-container>\n\n    <button\n      *ngIf=\"column.actionType\"\n      (click)=\"startColumnAction(customerEntry, column.actionType)\"\n      class=\"btn btn-link cx-action-link cx-btn-cell\"\n      [class]=\"column.actionType === 'ACTIVE_CART' ? 'cx-cart' : ''\"\n      [disabled]=\"isRequired(customerEntry, column.actionType)\"\n      [attr.title]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [attr.aria-label]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </button>\n  </div>\n</ng-template>\n<ng-template #cellContent let-customerEntry=\"customerEntry\" let-column=\"column\">\n  <div>\n    <span *ngIf=\"!column.icon\">{{\n      column.renderer?.(customerEntry) || ''\n    }}</span>\n    <cx-icon\n      *ngIf=\"column.icon\"\n      [attr.title]=\"\n        !column.actionType\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [class.cx-action-color]=\"\n        column.actionType && !isRequired(customerEntry, column.actionType)\n      \"\n      [type]=\"column.icon.symbol\"\n      [attr.aria-label]=\"\n        !column.actionType\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    ></cx-icon>\n  </div>\n</ng-template>\n\n<ng-template #search>\n  <div class=\"form-group search-wrapper\">\n    <input\n      [formControl]=\"searchBox\"\n      (keyup)=\"onKey($event)\"\n      type=\"text\"\n      class=\"form-control\"\n      placeholder=\"{{ 'asm.customerList.searchBox' | cxTranslate }}\"\n      attr.aria-label=\"{{ 'asm.customerList.enterSearchBox' | cxTranslate }}\"\n    />\n    <cx-icon\n      [type]=\"iconTypes.SEARCH\"\n      role=\"button\"\n      [attr.aria-label]=\"'storeFinder.searchNearestStores' | cxTranslate\"\n      class=\"search\"\n      (click)=\"searchCustomers()\"\n    ></cx-icon>\n  </div>\n</ng-template>\n\n<ng-template #total let-customerSearchPage=\"customerSearchPage\">\n  <span class=\"cx-total\" *ngIf=\"customerSearchPage?.pagination?.totalResults\">\n    <ng-container *ngIf=\"customerSearchPage?.pagination?.totalResults > 1\">\n      {{\n        'asm.customerList.noOfCustomers'\n          | cxTranslate: { count: customerSearchPage?.pagination?.totalResults }\n      }}\n    </ng-container>\n    <ng-container *ngIf=\"customerSearchPage?.pagination?.totalResults === 1\">\n      {{ 'asm.customerList.oneCustomer' | cxTranslate }}\n    </ng-container>\n  </span>\n</ng-template>\n\n<ng-template #sort>\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.tableSort.sortBy' | cxTranslate\n    }}</span>\n    <cx-sorting\n      class=\"sort-selector\"\n      [sortOptions]=\"sorts\"\n      [sortLabels]=\"getSortLabels() | async\"\n      (sortListEvent)=\"changeSortCode($event)\"\n      [selectedOption]=\"sortCode\"\n      placeholder=\"{{ 'asm.customerList.tableSort.sortBy' | cxTranslate }}\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: sortCode,\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    ></cx-sorting>\n  </label>\n</ng-template>\n\n<ng-template #pagination>\n  <div class=\"cx-pagination-buttons\">\n    <div>\n      {{\n        'asm.customerList.page.page' | cxTranslate: { count: currentPage + 1 }\n      }}\n    </div>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToPreviousPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-previous\"\n      [disabled]=\"currentPage === 0 || !loaded\"\n    >\n      <cx-icon class=\"previous\" [type]=\"iconTypes.CARET_LEFT\"></cx-icon\n      ><span>{{ 'asm.customerList.page.previous' | cxTranslate }}</span>\n    </button>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToNextPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-next\"\n      [disabled]=\"currentPage === maxPage || !loaded\"\n    >\n      <span>{{ 'asm.customerList.page.next' | cxTranslate }}</span\n      ><cx-icon class=\"next\" [type]=\"iconTypes.CARET_RIGHT\"></cx-icon>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #groupSelector let-customerListsPage=\"customerListsPage\">\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.title' | cxTranslate\n    }}</span>\n    <ng-select\n      class=\"customer-list-selector\"\n      [searchable]=\"false\"\n      [clearable]=\"false\"\n      (change)=\"onChangeCustomerGroup()\"\n      [tabIndex]=\"0\"\n      [(ngModel)]=\"selectedUserGroupId\"\n      [items]=\"customerListsPage?.userGroups\"\n      bindLabel=\"name\"\n      bindValue=\"uid\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: getGroupName(customerListsPage, selectedUserGroupId),\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    >\n    </ng-select>\n  </label>\n</ng-template>\n\n<ng-template #closeButton>\n  <button\n    type=\"button\"\n    class=\"close\"\n    attr.aria-label=\"{{ 'common.close' | cxTranslate }}\"\n    (click)=\"closeModal('Cross click')\"\n  >\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-template>\n\n<ng-template #createCustomerButton>\n  <button\n    type=\"button\"\n    class=\"btn cx-asm-create-customer-btn\"\n    (click)=\"createCustomer()\"\n  >\n    <cx-icon [type]=\"iconTypes.USER_PLUS\"></cx-icon>\n    <span>{{ 'asm.customerList.createCustomer' | cxTranslate }}</span>\n  </button>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i5.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i1.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "component", type: i6.NgSelectComponent, selector: "ng-select", inputs: ["bindLabel", "bindValue", "markFirst", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "appearance", "dropdownPosition", "appendTo", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "openOnEnter", "maxSelectedItems", "groupBy", "groupValue", "bufferAmount", "virtualScroll", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "tabIndex", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "typeahead", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { kind: "directive", type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i1.SpinnerComponent, selector: "cx-spinner" }, { kind: "directive", type: i1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i1.NgSelectA11yDirective, selector: "[cxNgSelectA11y]", inputs: ["cxNgSelectA11y"] }, { kind: "component", type: i1.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "ariaControls", "ariaLabel", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { kind: "component", type: i1.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }, { kind: "directive", type: i3.FeatureLevelDirective, selector: "[cxFeatureLevel]", inputs: ["cxFeatureLevel"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-customer-list', template: "<div\n  class=\"cx-asm-customer-list cx-modal-container cx-asm-dialog\"\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"closeModal('Escape clicked')\"\n>\n  <div class=\"cx-modal-content\">\n    <!-- Modal Header -->\n    <ng-container>\n      <div class=\"cx-dialog-header modal-header\">\n        <h2 id=\"asm-customer-list-title\" class=\"title modal-title\">\n          {{ 'asm.customerList.title' | cxTranslate }}\n        </h2>\n        <div id=\"asm-customer-list-desc\" class=\"cx-visually-hidden\">\n          {{ 'asm.customerList.description' | cxTranslate }}\n        </div>\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'!6.1'\">\n          <ng-template *ngTemplateOutlet=\"closeButton\"></ng-template>\n        </ng-container>\n        <ng-container *cxFeatureLevel=\"'6.1'\">\n          <ng-template *ngTemplateOutlet=\"createCustomerButton\"></ng-template>\n        </ng-container>\n      </div>\n      <div\n        class=\"cx-dialog-sub-header modal-header\"\n        [class.tablet-mobile]=\"(breakpoint$ | async) !== BREAKPOINT.md\"\n        *ngIf=\"customerListsPage$ | async as customerListsPage\"\n      >\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'!6.1'\">\n          <ng-template\n            *ngTemplateOutlet=\"\n              groupSelector;\n              context: { customerListsPage: customerListsPage }\n            \"\n          ></ng-template>\n        </ng-container>\n        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n        <ng-container *cxFeatureLevel=\"'6.1'\">\n          <div\n            class=\"cx-header-select\"\n            [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n          >\n            <ng-template\n              *ngTemplateOutlet=\"\n                groupSelector;\n                context: { customerListsPage: customerListsPage }\n              \"\n            ></ng-template>\n            <ng-template\n              *ngTemplateOutlet=\"\n                total;\n                context: {\n                  customerSearchPage: customerSearchPage$ | async\n                }\n              \"\n            >\n            </ng-template>\n          </div>\n        </ng-container>\n\n        <div\n          class=\"cx-header-actions\"\n          [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n        >\n          <ng-template *ngTemplateOutlet=\"sort\"></ng-template>\n          <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n          <ng-container *cxFeatureLevel=\"'!6.1'\">\n            <ng-template *ngTemplateOutlet=\"pagination\"></ng-template>\n          </ng-container>\n          <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n          <ng-container *cxFeatureLevel=\"'6.1'\">\n            <ng-template *ngTemplateOutlet=\"search\"></ng-template>\n          </ng-container>\n        </div>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"cx-dialog-body modal-body\">\n        <div class=\"cx-dialog-row\">\n          <div class=\"cx-dialog-item\">\n            <div *ngIf=\"listsEmpty\" class=\"cx-error-state\">\n              {{ 'asm.customerList.noLists' | cxTranslate }}\n            </div>\n            <div *ngIf=\"listsError\" class=\"cx-error-state\">\n              {{ 'asm.customerList.listsError' | cxTranslate }}\n            </div>\n            <div *ngIf=\"customerSearchError$ | async\" class=\"cx-error-state\">\n              {{ 'generalErrors.pageFailure' | cxTranslate }}\n            </div>\n            <cx-spinner *ngIf=\"customerSearchLoading$ | async\"></cx-spinner>\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <table\n                id=\"asm-cusomer-list-table\"\n                role=\"table\"\n                class=\"table\"\n                *ngIf=\"loaded\"\n              >\n                <caption class=\"cx-visually-hidden\">\n                  {{\n                    'asm.customerList.title' | cxTranslate\n                  }}\n                </caption>\n                <thead *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\">\n                  <tr role=\"row\">\n                    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                    <ng-container *cxFeatureLevel=\"'!6.1'\">\n                      <th\n                        role=\"columnheader\"\n                        class=\"cx-avatar-cell\"\n                        *ngIf=\"customerListConfig?.showAvatar\"\n                      >\n                        <span class=\"cx-visually-hidden\">\n                          {{\n                            'asm.customerList.tableHeader.customer'\n                              | cxTranslate\n                          }}\n                        </span>\n                      </th>\n                    </ng-container>\n                    <th\n                      role=\"columnheader\"\n                      *ngFor=\"let column of customerListConfig?.columns\"\n                    >\n                      <span\n                        *ngIf=\"\n                          column.headerLocalizationKey &&\n                          column.headerLocalizationKey !== 'hideHeaders'\n                        \"\n                      >\n                        <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                        <ng-container *cxFeatureLevel=\"'!6.1'\">\n                          {{ column.headerLocalizationKey | cxTranslate }}\n                        </ng-container>\n                        <ng-container *cxFeatureLevel=\"'6.1'\">\n                          <!-- TODO:(CXSPA-3090) for next major release replace the translation lable -->\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey ===\n                              'asm.customerList.tableHeader.customer'\n                            \"\n                          >\n                            {{\n                              'asm.customerList.tableHeader.customerName'\n                                | cxTranslate\n                            }}\n                          </ng-container>\n                          <!-- TODO:(CXSPA-3090) for next major release replace the translation lable -->\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey ===\n                              'asm.customerList.tableHeader.email'\n                            \"\n                          >\n                            {{\n                              'asm.customerList.tableHeader.emailId'\n                                | cxTranslate\n                            }}\n                          </ng-container>\n                          <ng-container\n                            *ngIf=\"\n                              column.headerLocalizationKey !==\n                                'asm.customerList.tableHeader.customer' &&\n                              column.headerLocalizationKey !==\n                                'asm.customerList.tableHeader.email'\n                            \"\n                          >\n                            {{ column.headerLocalizationKey | cxTranslate }}\n                          </ng-container>\n                        </ng-container>\n                      </span>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr\n                    role=\"row\"\n                    *ngFor=\"let customerEntry of customerSearchPage?.entries\"\n                  >\n                    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n                    <ng-container *cxFeatureLevel=\"'!6.1'\">\n                      <td\n                        role=\"cell\"\n                        *ngIf=\"customerListConfig?.showAvatar\"\n                        class=\"cx-avatar-cell\"\n                      >\n                        <div class=\"cx-avatar\">\n                          {{ getBadgeText(customerEntry) }}\n                        </div>\n                      </td>\n                    </ng-container>\n                    <!-- multi columns if desktop -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.md\"\n                    >\n                      <td\n                        role=\"cell\"\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: false\n                            }\n                          \"\n                        ></ng-template>\n                      </td>\n                    </ng-container>\n                    <!-- two column if tablet -->\n                    <ng-container\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.sm\"\n                    >\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let even = even\n                          \"\n                        >\n                          <ng-container *ngIf=\"even\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                      <td role=\"cell\" class=\"cx-multi-cell\">\n                        <ng-container\n                          *ngFor=\"\n                            let column of customerListConfig?.columns;\n                            let odd = odd\n                          \"\n                        >\n                          <ng-container *ngIf=\"odd\">\n                            <ng-template\n                              *ngTemplateOutlet=\"\n                                cell;\n                                context: {\n                                  customerEntry: customerEntry,\n                                  column: column,\n                                  showHeader: true\n                                }\n                              \"\n                            ></ng-template>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                    <!-- one column if mobile -->\n                    <td\n                      role=\"cell\"\n                      class=\"cx-multi-cell\"\n                      *ngIf=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n                    >\n                      <ng-container\n                        *ngFor=\"let column of customerListConfig?.columns\"\n                      >\n                        <ng-template\n                          *ngTemplateOutlet=\"\n                            cell;\n                            context: {\n                              customerEntry: customerEntry,\n                              column: column,\n                              showHeader: true\n                            }\n                          \"\n                        ></ng-template>\n                      </ng-container>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div\n                class=\"cx-empty-state\"\n                *ngIf=\"!customerSearchPage?.entries.length\"\n              >\n                {{ 'asm.customerList.noCustomers' | cxTranslate }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n      <ng-container *cxFeatureLevel=\"'6.1'\">\n        <!-- Modal Foot -->\n        <div\n          class=\"cx-dialog-sub-header modal-header cx-dialog-foot\"\n          [class.asm-mobile-pagination]=\"\n            (breakpoint$ | async) !== BREAKPOINT.md\n          \"\n          *ngIf=\"customerListsPage$ | async as customerListsPage\"\n        >\n          <div\n            class=\"cx-header-actions\"\n            [class.mobile]=\"(breakpoint$ | async) === BREAKPOINT.xs\"\n          >\n            <div *ngIf=\"customerSearchPage$ | async as customerSearchPage\">\n              <cx-pagination\n                [pagination]=\"customerSearchPage.pagination\"\n                (viewPageEvent)=\"changePage($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n        </div>\n        <div class=\"cx-dialog-footer modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn cx-asm-customer-list-btn-cancel\"\n            (click)=\"closeModal('Cancel click')\"\n          >\n            {{ 'asm.createCustomerForm.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template\n  #cell\n  let-customerEntry=\"customerEntry\"\n  let-column=\"column\"\n  let-showHeader=\"showHeader\"\n>\n  <div\n    class=\"cx-cell-container\"\n    *ngIf=\"column.headerLocalizationKey !== 'hideHeaders'\"\n  >\n    <span class=\"cx-header-text\" *ngIf=\"showHeader\">\n      {{ column.headerLocalizationKey | cxTranslate }}\n    </span>\n\n    <ng-container *ngIf=\"!column.actionType\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </ng-container>\n\n    <!-- TODO:(CXSPA-3090) for next major release remove feature level -->\n    <ng-container *cxFeatureLevel=\"'6.1'\">\n      <div\n        class=\"cx-avatar\"\n        *ngIf=\"\n          customerListConfig?.showAvatar &&\n          column?.actionType === customerListColumnActionType?.START_SESSION\n        \"\n      >\n        <img\n          *ngIf=\"customerEntry?.userAvatar?.url\"\n          [attr.src]=\"\n            occConfig?.backend?.occ?.baseUrl + customerEntry?.userAvatar?.url\n          \"\n          alt=\"{{ 'asm.mainLogoLabel' | cxTranslate }}\"\n        />\n        <div class=\"cx-avatar-text\" *ngIf=\"!customerEntry?.userAvatar?.url\">\n          {{ getBadgeText(customerEntry) }}\n        </div>\n      </div>\n    </ng-container>\n\n    <button\n      *ngIf=\"column.actionType\"\n      (click)=\"startColumnAction(customerEntry, column.actionType)\"\n      class=\"btn btn-link cx-action-link cx-btn-cell\"\n      [class]=\"column.actionType === 'ACTIVE_CART' ? 'cx-cart' : ''\"\n      [disabled]=\"isRequired(customerEntry, column.actionType)\"\n      [attr.title]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [attr.aria-label]=\"\n        column.icon\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"\n          cellContent;\n          context: { column: column, customerEntry: customerEntry }\n        \"\n      ></ng-container>\n    </button>\n  </div>\n</ng-template>\n<ng-template #cellContent let-customerEntry=\"customerEntry\" let-column=\"column\">\n  <div>\n    <span *ngIf=\"!column.icon\">{{\n      column.renderer?.(customerEntry) || ''\n    }}</span>\n    <cx-icon\n      *ngIf=\"column.icon\"\n      [attr.title]=\"\n        !column.actionType\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n      [class.cx-action-color]=\"\n        column.actionType && !isRequired(customerEntry, column.actionType)\n      \"\n      [type]=\"column.icon.symbol\"\n      [attr.aria-label]=\"\n        !column.actionType\n          ? (column.icon.captionLocalizationKey ?? column.headerLocalizationKey\n            | cxTranslate)\n          : undefined\n      \"\n    ></cx-icon>\n  </div>\n</ng-template>\n\n<ng-template #search>\n  <div class=\"form-group search-wrapper\">\n    <input\n      [formControl]=\"searchBox\"\n      (keyup)=\"onKey($event)\"\n      type=\"text\"\n      class=\"form-control\"\n      placeholder=\"{{ 'asm.customerList.searchBox' | cxTranslate }}\"\n      attr.aria-label=\"{{ 'asm.customerList.enterSearchBox' | cxTranslate }}\"\n    />\n    <cx-icon\n      [type]=\"iconTypes.SEARCH\"\n      role=\"button\"\n      [attr.aria-label]=\"'storeFinder.searchNearestStores' | cxTranslate\"\n      class=\"search\"\n      (click)=\"searchCustomers()\"\n    ></cx-icon>\n  </div>\n</ng-template>\n\n<ng-template #total let-customerSearchPage=\"customerSearchPage\">\n  <span class=\"cx-total\" *ngIf=\"customerSearchPage?.pagination?.totalResults\">\n    <ng-container *ngIf=\"customerSearchPage?.pagination?.totalResults > 1\">\n      {{\n        'asm.customerList.noOfCustomers'\n          | cxTranslate: { count: customerSearchPage?.pagination?.totalResults }\n      }}\n    </ng-container>\n    <ng-container *ngIf=\"customerSearchPage?.pagination?.totalResults === 1\">\n      {{ 'asm.customerList.oneCustomer' | cxTranslate }}\n    </ng-container>\n  </span>\n</ng-template>\n\n<ng-template #sort>\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.tableSort.sortBy' | cxTranslate\n    }}</span>\n    <cx-sorting\n      class=\"sort-selector\"\n      [sortOptions]=\"sorts\"\n      [sortLabels]=\"getSortLabels() | async\"\n      (sortListEvent)=\"changeSortCode($event)\"\n      [selectedOption]=\"sortCode\"\n      placeholder=\"{{ 'asm.customerList.tableSort.sortBy' | cxTranslate }}\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: sortCode,\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    ></cx-sorting>\n  </label>\n</ng-template>\n\n<ng-template #pagination>\n  <div class=\"cx-pagination-buttons\">\n    <div>\n      {{\n        'asm.customerList.page.page' | cxTranslate: { count: currentPage + 1 }\n      }}\n    </div>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToPreviousPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-previous\"\n      [disabled]=\"currentPage === 0 || !loaded\"\n    >\n      <cx-icon class=\"previous\" [type]=\"iconTypes.CARET_LEFT\"></cx-icon\n      ><span>{{ 'asm.customerList.page.previous' | cxTranslate }}</span>\n    </button>\n    <button\n      *ngIf=\"maxPage > 0\"\n      (click)=\"goToNextPage()\"\n      class=\"btn btn-link cx-action-link cx-btn-next\"\n      [disabled]=\"currentPage === maxPage || !loaded\"\n    >\n      <span>{{ 'asm.customerList.page.next' | cxTranslate }}</span\n      ><cx-icon class=\"next\" [type]=\"iconTypes.CARET_RIGHT\"></cx-icon>\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #groupSelector let-customerListsPage=\"customerListsPage\">\n  <label>\n    <span class=\"cx-visually-hidden\">{{\n      'asm.customerList.title' | cxTranslate\n    }}</span>\n    <ng-select\n      class=\"customer-list-selector\"\n      [searchable]=\"false\"\n      [clearable]=\"false\"\n      (change)=\"onChangeCustomerGroup()\"\n      [tabIndex]=\"0\"\n      [(ngModel)]=\"selectedUserGroupId\"\n      [items]=\"customerListsPage?.userGroups\"\n      bindLabel=\"name\"\n      bindValue=\"uid\"\n      [cxNgSelectA11y]=\"{\n        ariaLabel: getGroupName(customerListsPage, selectedUserGroupId),\n        ariaControls: 'asm-cusomer-list-table'\n      }\"\n    >\n    </ng-select>\n  </label>\n</ng-template>\n\n<ng-template #closeButton>\n  <button\n    type=\"button\"\n    class=\"close\"\n    attr.aria-label=\"{{ 'common.close' | cxTranslate }}\"\n    (click)=\"closeModal('Cross click')\"\n  >\n    <span aria-hidden=\"true\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </span>\n  </button>\n</ng-template>\n\n<ng-template #createCustomerButton>\n  <button\n    type=\"button\"\n    class=\"btn cx-asm-create-customer-btn\"\n    (click)=\"createCustomer()\"\n  >\n    <cx-icon [type]=\"iconTypes.USER_PLUS\"></cx-icon>\n    <span>{{ 'asm.customerList.createCustomer' | cxTranslate }}</span>\n  </button>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i1.BreakpointService }, { type: i2.AsmConfig }, { type: i3.TranslationService }, { type: i2.AsmCustomerListFacade }, { type: i3.FeatureConfigService, decorators: [{
                    type: Optional
                }] }, { type: i3.OccConfig, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { addNewCustomerLink: [{
                type: ViewChild,
                args: ['addNewCustomerLink']
            }] } });
//# sourceMappingURL=data:application/json;base64,