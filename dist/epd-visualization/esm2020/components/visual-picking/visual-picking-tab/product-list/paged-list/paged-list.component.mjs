/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, inject, } from '@angular/core';
import { LoggerService } from '@spartacus/core';
import { ICON_TYPE } from '@spartacus/storefront';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@spartacus/storefront";
/**
 * Generic in-memory paged list component that can be used to render arbitrary items in
 * a vertical orientation.
 * Previous/next buttons as well as indicator-buttons can used to navigate the slides (pages).
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template` and `headerTemplate`.
 */
export class PagedListComponent {
    setActiveSlideStartIndex(activeSlideStartIndex) {
        this.activeSlideStartIndex = activeSlideStartIndex;
        this.activeSlideStartIndexChange.emit(activeSlideStartIndex);
    }
    constructor(el) {
        this.el = el;
        /**
         * The maximum number of items per slide
         */
        this.itemsPerSlide = 10;
        /**
         * Indicates whether the visual indicators are used.
         */
        this.hideIndicators = false;
        this.indicatorIcon = ICON_TYPE.CIRCLE;
        this.previousIcon = ICON_TYPE.CARET_LEFT;
        this.nextIcon = ICON_TYPE.CARET_RIGHT;
        this.activeSlideStartIndex = 0;
        this.activeSlideStartIndexChange = new EventEmitter();
        this.logger = inject(LoggerService);
    }
    ngOnInit() {
        if (!this.headerTemplate) {
            this.logger.error('No template reference provided to render the header for the `cx-epd-visualization-paged-list`');
            return;
        }
        if (!this.template) {
            this.logger.error('No template reference provided to render the items for the `cx-epd-visualization-paged-list`');
            return;
        }
    }
}
PagedListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PagedListComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
PagedListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PagedListComponent, selector: "cx-epd-visualization-paged-list", inputs: { title: "title", items: "items", headerTemplate: "headerTemplate", template: "template", itemsPerSlide: "itemsPerSlide", hideIndicators: "hideIndicators", indicatorIcon: "indicatorIcon", previousIcon: "previousIcon", nextIcon: "nextIcon", activeSlideStartIndex: "activeSlideStartIndex" }, outputs: { activeSlideStartIndexChange: "activeSlideStartIndexChange" }, ngImport: i0, template: "<ng-container *ngIf=\"items?.length > 0 && itemsPerSlide\">\n  <h3 *ngIf=\"title\">{{ title }}</h3>\n\n  <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n\n  <div class=\"list-panel\">\n    <div class=\"slides\">\n      <ng-container *ngFor=\"let _ of items; let i = index\">\n        <div\n          class=\"slide\"\n          *ngIf=\"i % itemsPerSlide === 0\"\n          [class.active]=\"i === activeSlideStartIndex\"\n        >\n          <ng-container\n            *ngFor=\"\n              let item of items | slice: i:i + itemsPerSlide;\n              let j = index\n            \"\n          >\n            <div\n              *ngIf=\"item as data\"\n              class=\"item\"\n              [class.active]=\"i === activeSlideStartIndex\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  template;\n                  context: {\n                    item: data,\n                    active: i === activeSlideStartIndex\n                  }\n                \"\n              ></ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"!hideIndicators && itemsPerSlide < items.length\"\n    class=\"indicators\"\n  >\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"previous\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex - itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex === 0\"\n    >\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\n    </button>\n\n    <ng-container *ngFor=\"let _ of items; let i = index\">\n      <button\n        *ngIf=\"i % itemsPerSlide === 0\"\n        (click)=\"setActiveSlideStartIndex(i)\"\n        [disabled]=\"i === activeSlideStartIndex\"\n        class=\"slide-indicator\"\n      >\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\n      </button>\n    </ng-container>\n\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"next\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex + itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex > items.length - itemsPerSlide - 1\"\n    >\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\n    </button>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "pipe", type: i1.SlicePipe, name: "slice" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PagedListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-epd-visualization-paged-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container *ngIf=\"items?.length > 0 && itemsPerSlide\">\n  <h3 *ngIf=\"title\">{{ title }}</h3>\n\n  <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n\n  <div class=\"list-panel\">\n    <div class=\"slides\">\n      <ng-container *ngFor=\"let _ of items; let i = index\">\n        <div\n          class=\"slide\"\n          *ngIf=\"i % itemsPerSlide === 0\"\n          [class.active]=\"i === activeSlideStartIndex\"\n        >\n          <ng-container\n            *ngFor=\"\n              let item of items | slice: i:i + itemsPerSlide;\n              let j = index\n            \"\n          >\n            <div\n              *ngIf=\"item as data\"\n              class=\"item\"\n              [class.active]=\"i === activeSlideStartIndex\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  template;\n                  context: {\n                    item: data,\n                    active: i === activeSlideStartIndex\n                  }\n                \"\n              ></ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    *ngIf=\"!hideIndicators && itemsPerSlide < items.length\"\n    class=\"indicators\"\n  >\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"previous\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex - itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex === 0\"\n    >\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\n    </button>\n\n    <ng-container *ngFor=\"let _ of items; let i = index\">\n      <button\n        *ngIf=\"i % itemsPerSlide === 0\"\n        (click)=\"setActiveSlideStartIndex(i)\"\n        [disabled]=\"i === activeSlideStartIndex\"\n        class=\"slide-indicator\"\n      >\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\n      </button>\n    </ng-container>\n\n    <button\n      *ngIf=\"itemsPerSlide < items.length\"\n      class=\"next\"\n      (click)=\"setActiveSlideStartIndex(activeSlideStartIndex + itemsPerSlide)\"\n      [disabled]=\"activeSlideStartIndex > items.length - itemsPerSlide - 1\"\n    >\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\n    </button>\n  </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { title: [{
                type: Input
            }], items: [{
                type: Input
            }], headerTemplate: [{
                type: Input
            }], template: [{
                type: Input
            }], itemsPerSlide: [{
                type: Input
            }], hideIndicators: [{
                type: Input
            }], indicatorIcon: [{
                type: Input
            }], previousIcon: [{
                type: Input
            }], nextIcon: [{
                type: Input
            }], activeSlideStartIndex: [{
                type: Input
            }], activeSlideStartIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZWQtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9pbnRlZ3JhdGlvbi1saWJzL2VwZC12aXN1YWxpemF0aW9uL2NvbXBvbmVudHMvdmlzdWFsLXBpY2tpbmcvdmlzdWFsLXBpY2tpbmctdGFiL3Byb2R1Y3QtbGlzdC9wYWdlZC1saXN0L3BhZ2VkLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaW50ZWdyYXRpb24tbGlicy9lcGQtdmlzdWFsaXphdGlvbi9jb21wb25lbnRzL3Zpc3VhbC1waWNraW5nL3Zpc3VhbC1waWNraW5nLXRhYi9wcm9kdWN0LWxpc3QvcGFnZWQtbGlzdC9wYWdlZC1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFFTixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUVsRDs7Ozs7OztHQU9HO0FBTUgsTUFBTSxPQUFPLGtCQUFrQjtJQXVDN0Isd0JBQXdCLENBQUMscUJBQTZCO1FBQ3BELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxxQkFBcUIsQ0FBQztRQUNuRCxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUlELFlBQXNCLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBeEJwQzs7V0FFRztRQUNNLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBRTVCOztXQUVHO1FBQ00sbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFFdkIsa0JBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ2pDLGlCQUFZLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUNwQyxhQUFRLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUVqQywwQkFBcUIsR0FBRyxDQUFDLENBQUM7UUFDekIsZ0NBQTJCLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQU96RCxXQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRUYsQ0FBQztJQUV4QyxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsK0ZBQStGLENBQ2hHLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZiw4RkFBOEYsQ0FDL0YsQ0FBQztZQUNGLE9BQU87U0FDUjtJQUNILENBQUM7OytHQTlEVSxrQkFBa0I7bUdBQWxCLGtCQUFrQiwwYkNqQy9CLG91RUEwRUE7MkZEekNhLGtCQUFrQjtrQkFMOUIsU0FBUzsrQkFDRSxpQ0FBaUMsbUJBRTFCLHVCQUF1QixDQUFDLE1BQU07aUdBTXRDLEtBQUs7c0JBQWIsS0FBSztnQkFLRyxLQUFLO3NCQUFiLEtBQUs7Z0JBS0csY0FBYztzQkFBdEIsS0FBSztnQkFNRyxRQUFRO3NCQUFoQixLQUFLO2dCQUtHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBS0csY0FBYztzQkFBdEIsS0FBSztnQkFFRyxhQUFhO3NCQUFyQixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUs7Z0JBQ0csUUFBUTtzQkFBaEIsS0FBSztnQkFFRyxxQkFBcUI7c0JBQTdCLEtBQUs7Z0JBQ0ksMkJBQTJCO3NCQUFwQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBpbmplY3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuLyoqXG4gKiBHZW5lcmljIGluLW1lbW9yeSBwYWdlZCBsaXN0IGNvbXBvbmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlbmRlciBhcmJpdHJhcnkgaXRlbXMgaW5cbiAqIGEgdmVydGljYWwgb3JpZW50YXRpb24uXG4gKiBQcmV2aW91cy9uZXh0IGJ1dHRvbnMgYXMgd2VsbCBhcyBpbmRpY2F0b3ItYnV0dG9ucyBjYW4gdXNlZCB0byBuYXZpZ2F0ZSB0aGUgc2xpZGVzIChwYWdlcykuXG4gKlxuICogVG8gYWxsb3cgZm9yIGZsZXhpYmxlIHJlbmRlcmluZyBvZiBpdGVtcywgdGhlIHJlbmRlcmluZyBpcyBkZWxlZ2F0ZWQgdG8gdGhlXG4gKiBnaXZlbiBgdGVtcGxhdGVgIGFuZCBgaGVhZGVyVGVtcGxhdGVgLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1lcGQtdmlzdWFsaXphdGlvbi1wYWdlZC1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BhZ2VkLWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUGFnZWRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIFRoZSB0aXRsZSBpcyByZW5kZXJlZCBhcyB0aGUgY2Fyb3VzZWwgaGVhZGluZy5cbiAgICovXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpdGVtcyQgcmVwcmVzZW50IHRoZSBjYXJvdXNlbCBpdGVtcy5cbiAgICovXG4gIEBJbnB1dCgpIGl0ZW1zOiBPYnNlcnZhYmxlPGFueT5bXTtcblxuICAvKipcbiAgICogVGhlIGhlYWRlclRlbXBsYXRlIGlzIHJlbmRlcmVkIGFib3ZlIHRoZSBpdGVtIHJvd3MuXG4gICAqL1xuICBASW5wdXQoKSBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAvKipcbiAgICogVGhlIHRlbXBsYXRlIGlzIHJlbmRlcmVkIGZvciBlYWNoIGl0ZW0sIHNvIHRoYXQgdGhlIGFjdHVhbFxuICAgKiB2aWV3IGNhbiBiZSBnaXZlbiBieSB0aGUgY29tcG9uZW50IHRoYXQgdXNlcyB0aGUgYFBhZ2VkTGlzdENvbXBvbmVudGAuXG4gICAqL1xuICBASW5wdXQoKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHBlciBzbGlkZVxuICAgKi9cbiAgQElucHV0KCkgaXRlbXNQZXJTbGlkZSA9IDEwO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdmlzdWFsIGluZGljYXRvcnMgYXJlIHVzZWQuXG4gICAqL1xuICBASW5wdXQoKSBoaWRlSW5kaWNhdG9ycyA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIGluZGljYXRvckljb24gPSBJQ09OX1RZUEUuQ0lSQ0xFO1xuICBASW5wdXQoKSBwcmV2aW91c0ljb24gPSBJQ09OX1RZUEUuQ0FSRVRfTEVGVDtcbiAgQElucHV0KCkgbmV4dEljb24gPSBJQ09OX1RZUEUuQ0FSRVRfUklHSFQ7XG5cbiAgQElucHV0KCkgYWN0aXZlU2xpZGVTdGFydEluZGV4ID0gMDtcbiAgQE91dHB1dCgpIGFjdGl2ZVNsaWRlU3RhcnRJbmRleENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIHNldEFjdGl2ZVNsaWRlU3RhcnRJbmRleChhY3RpdmVTbGlkZVN0YXJ0SW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuYWN0aXZlU2xpZGVTdGFydEluZGV4ID0gYWN0aXZlU2xpZGVTdGFydEluZGV4O1xuICAgIHRoaXMuYWN0aXZlU2xpZGVTdGFydEluZGV4Q2hhbmdlLmVtaXQoYWN0aXZlU2xpZGVTdGFydEluZGV4KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2dnZXIgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGVsOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5oZWFkZXJUZW1wbGF0ZSkge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICdObyB0ZW1wbGF0ZSByZWZlcmVuY2UgcHJvdmlkZWQgdG8gcmVuZGVyIHRoZSBoZWFkZXIgZm9yIHRoZSBgY3gtZXBkLXZpc3VhbGl6YXRpb24tcGFnZWQtbGlzdGAnXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50ZW1wbGF0ZSkge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICdObyB0ZW1wbGF0ZSByZWZlcmVuY2UgcHJvdmlkZWQgdG8gcmVuZGVyIHRoZSBpdGVtcyBmb3IgdGhlIGBjeC1lcGQtdmlzdWFsaXphdGlvbi1wYWdlZC1saXN0YCdcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbXM/Lmxlbmd0aCA+IDAgJiYgaXRlbXNQZXJTbGlkZVwiPlxuICA8aDMgKm5nSWY9XCJ0aXRsZVwiPnt7IHRpdGxlIH19PC9oMz5cblxuICA8bmctY29udGFpbmVyICpuZ1RlbXBsYXRlT3V0bGV0PVwiaGVhZGVyVGVtcGxhdGVcIj48L25nLWNvbnRhaW5lcj5cblxuICA8ZGl2IGNsYXNzPVwibGlzdC1wYW5lbFwiPlxuICAgIDxkaXYgY2xhc3M9XCJzbGlkZXNcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IF8gb2YgaXRlbXM7IGxldCBpID0gaW5kZXhcIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPVwic2xpZGVcIlxuICAgICAgICAgICpuZ0lmPVwiaSAlIGl0ZW1zUGVyU2xpZGUgPT09IDBcIlxuICAgICAgICAgIFtjbGFzcy5hY3RpdmVdPVwiaSA9PT0gYWN0aXZlU2xpZGVTdGFydEluZGV4XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICpuZ0Zvcj1cIlxuICAgICAgICAgICAgICBsZXQgaXRlbSBvZiBpdGVtcyB8IHNsaWNlOiBpOmkgKyBpdGVtc1BlclNsaWRlO1xuICAgICAgICAgICAgICBsZXQgaiA9IGluZGV4XG4gICAgICAgICAgICBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtIGFzIGRhdGFcIlxuICAgICAgICAgICAgICBjbGFzcz1cIml0ZW1cIlxuICAgICAgICAgICAgICBbY2xhc3MuYWN0aXZlXT1cImkgPT09IGFjdGl2ZVNsaWRlU3RhcnRJbmRleFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgICAgICAgICAgdGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogaSA9PT0gYWN0aXZlU2xpZGVTdGFydEluZGV4XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgPjwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXZcbiAgICAqbmdJZj1cIiFoaWRlSW5kaWNhdG9ycyAmJiBpdGVtc1BlclNsaWRlIDwgaXRlbXMubGVuZ3RoXCJcbiAgICBjbGFzcz1cImluZGljYXRvcnNcIlxuICA+XG4gICAgPGJ1dHRvblxuICAgICAgKm5nSWY9XCJpdGVtc1BlclNsaWRlIDwgaXRlbXMubGVuZ3RoXCJcbiAgICAgIGNsYXNzPVwicHJldmlvdXNcIlxuICAgICAgKGNsaWNrKT1cInNldEFjdGl2ZVNsaWRlU3RhcnRJbmRleChhY3RpdmVTbGlkZVN0YXJ0SW5kZXggLSBpdGVtc1BlclNsaWRlKVwiXG4gICAgICBbZGlzYWJsZWRdPVwiYWN0aXZlU2xpZGVTdGFydEluZGV4ID09PSAwXCJcbiAgICA+XG4gICAgICA8Y3gtaWNvbiBbdHlwZV09XCJwcmV2aW91c0ljb25cIj48L2N4LWljb24+XG4gICAgPC9idXR0b24+XG5cbiAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBfIG9mIGl0ZW1zOyBsZXQgaSA9IGluZGV4XCI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgICpuZ0lmPVwiaSAlIGl0ZW1zUGVyU2xpZGUgPT09IDBcIlxuICAgICAgICAoY2xpY2spPVwic2V0QWN0aXZlU2xpZGVTdGFydEluZGV4KGkpXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cImkgPT09IGFjdGl2ZVNsaWRlU3RhcnRJbmRleFwiXG4gICAgICAgIGNsYXNzPVwic2xpZGUtaW5kaWNhdG9yXCJcbiAgICAgID5cbiAgICAgICAgPGN4LWljb24gW3R5cGVdPVwiaW5kaWNhdG9ySWNvblwiPjwvY3gtaWNvbj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgPGJ1dHRvblxuICAgICAgKm5nSWY9XCJpdGVtc1BlclNsaWRlIDwgaXRlbXMubGVuZ3RoXCJcbiAgICAgIGNsYXNzPVwibmV4dFwiXG4gICAgICAoY2xpY2spPVwic2V0QWN0aXZlU2xpZGVTdGFydEluZGV4KGFjdGl2ZVNsaWRlU3RhcnRJbmRleCArIGl0ZW1zUGVyU2xpZGUpXCJcbiAgICAgIFtkaXNhYmxlZF09XCJhY3RpdmVTbGlkZVN0YXJ0SW5kZXggPiBpdGVtcy5sZW5ndGggLSBpdGVtc1BlclNsaWRlIC0gMVwiXG4gICAgPlxuICAgICAgPGN4LWljb24gW3R5cGVdPVwibmV4dEljb25cIj48L2N4LWljb24+XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=