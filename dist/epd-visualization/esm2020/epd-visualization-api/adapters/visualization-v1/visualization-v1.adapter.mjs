import { Injectable, inject } from '@angular/core';
import { LoggerService, normalizeHttpError, } from '@spartacus/core';
import { LOOKUP_VISUALIZATIONS_RESPONSE_NORMALIZER, } from '@spartacus/epd-visualization/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/epd-visualization/root";
import * as i3 from "@spartacus/core";
/**
 * This adapter references an API that is expected to be deprecated and relocated
 * since multiple microservice APIs are being combined into a single namespace.
 * A new adapter implementation will be added and this one will be deprecated
 * when the new endpoint is available.
 */
export class VisualizationV1Adapter {
    constructor(http, epdVisualizationConfig, converter) {
        this.http = http;
        this.epdVisualizationConfig = epdVisualizationConfig;
        this.converter = converter;
        this.logger = inject(LoggerService);
        this.baseUrl = this.getBaseUrl();
    }
    getBaseUrl() {
        const epdVisualization = this.epdVisualizationConfig
            .epdVisualization;
        const visualizationApiConfig = epdVisualization.apis;
        return `${visualizationApiConfig.baseUrl}/vis/public/visualization`;
    }
    getUrl(visualizationUsageId, folderUsageId) {
        const queryParts = [
            `usage=${encodeURIComponent(JSON.stringify(visualizationUsageId))}`,
            `folderUsageId=${encodeURIComponent(JSON.stringify(folderUsageId))}`,
        ];
        return `${this.baseUrl}/v1/lookup/visualization?${queryParts.join('&')}`;
    }
    /**
     * Used for finding a visualization by Usage ID that has anonymous (unauthenticated) read access enabled.
     * The search is performed in the SAP EPD Visualization service instance associated with the SaaS subscription for the SAP EPD tenant.
     * @param visualizationUsageId The SAP EPD Visualization usage ID value identifying visualizations to match.
     * Only visualizations that have the specified usage ID value will be returned.
     * @param folderUsageId The SAP EPD Visualization usage ID identifying folders to search for visualizations.
     * Only folders that are tagged with the specified usage ID value that have anonymous access enabled will be searched.
     * @returns An Observable producing a LookupVisualizationsResponse which contains an array of objects describing matched visualizations.
     */
    lookupVisualization(visualizationUsageId, folderUsageId) {
        return this.http.get(this.getUrl(visualizationUsageId, folderUsageId)).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(LOOKUP_VISUALIZATIONS_RESPONSE_NORMALIZER));
    }
}
VisualizationV1Adapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VisualizationV1Adapter, deps: [{ token: i1.HttpClient }, { token: i2.EpdVisualizationConfig }, { token: i3.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
VisualizationV1Adapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VisualizationV1Adapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: VisualizationV1Adapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.EpdVisualizationConfig }, { type: i3.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzdWFsaXphdGlvbi12MS5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vaW50ZWdyYXRpb24tbGlicy9lcGQtdmlzdWFsaXphdGlvbi9lcGQtdmlzdWFsaXphdGlvbi1hcGkvYWRhcHRlcnMvdmlzdWFsaXphdGlvbi12MS92aXN1YWxpemF0aW9uLXYxLmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUVMLGFBQWEsRUFDYixrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQ0wseUNBQXlDLEdBRzFDLE1BQU0sbUNBQW1DLENBQUM7QUFPM0MsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBRTVDOzs7OztHQUtHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUdqQyxZQUNZLElBQWdCLEVBQ2hCLHNCQUE4QyxFQUM5QyxTQUEyQjtRQUYzQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFMN0IsV0FBTSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQU92QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBSU8sVUFBVTtRQUNoQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxzQkFBc0I7YUFDakQsZ0JBQStDLENBQUM7UUFDbkQsTUFBTSxzQkFBc0IsR0FDMUIsZ0JBQWdCLENBQUMsSUFBOEIsQ0FBQztRQUVsRCxPQUFPLEdBQUcsc0JBQXNCLENBQUMsT0FBTywyQkFBMkIsQ0FBQztJQUN0RSxDQUFDO0lBRVMsTUFBTSxDQUNkLG9CQUE2QixFQUM3QixhQUFzQjtRQUV0QixNQUFNLFVBQVUsR0FBYTtZQUMzQixTQUFTLGtCQUFrQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFO1lBQ25FLGlCQUFpQixrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUU7U0FDckUsQ0FBQztRQUNGLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyw0QkFBNEIsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQzNFLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILG1CQUFtQixDQUNqQixvQkFBNkIsRUFDN0IsYUFBc0I7UUFFdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN6RSxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFDekUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMseUNBQXlDLENBQUMsQ0FDbkUsQ0FBQztJQUNKLENBQUM7O21IQWxEVSxzQkFBc0I7dUhBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQURsQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29udmVydGVyU2VydmljZSxcbiAgTG9nZ2VyU2VydmljZSxcbiAgbm9ybWFsaXplSHR0cEVycm9yLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgTE9PS1VQX1ZJU1VBTElaQVRJT05TX1JFU1BPTlNFX05PUk1BTElaRVIsXG4gIExvb2t1cFZpc3VhbGl6YXRpb25zUmVzcG9uc2UsXG4gIFZpc3VhbGl6YXRpb25BZGFwdGVyLFxufSBmcm9tICdAc3BhcnRhY3VzL2VwZC12aXN1YWxpemF0aW9uL2NvcmUnO1xuaW1wb3J0IHtcbiAgRXBkVmlzdWFsaXphdGlvbkNvbmZpZyxcbiAgRXBkVmlzdWFsaXphdGlvbklubmVyQ29uZmlnLFxuICBVc2FnZUlkLFxuICBWaXN1YWxpemF0aW9uQXBpQ29uZmlnLFxufSBmcm9tICdAc3BhcnRhY3VzL2VwZC12aXN1YWxpemF0aW9uL3Jvb3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBUaGlzIGFkYXB0ZXIgcmVmZXJlbmNlcyBhbiBBUEkgdGhhdCBpcyBleHBlY3RlZCB0byBiZSBkZXByZWNhdGVkIGFuZCByZWxvY2F0ZWRcbiAqIHNpbmNlIG11bHRpcGxlIG1pY3Jvc2VydmljZSBBUElzIGFyZSBiZWluZyBjb21iaW5lZCBpbnRvIGEgc2luZ2xlIG5hbWVzcGFjZS5cbiAqIEEgbmV3IGFkYXB0ZXIgaW1wbGVtZW50YXRpb24gd2lsbCBiZSBhZGRlZCBhbmQgdGhpcyBvbmUgd2lsbCBiZSBkZXByZWNhdGVkXG4gKiB3aGVuIHRoZSBuZXcgZW5kcG9pbnQgaXMgYXZhaWxhYmxlLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVmlzdWFsaXphdGlvblYxQWRhcHRlciBpbXBsZW1lbnRzIFZpc3VhbGl6YXRpb25BZGFwdGVyIHtcbiAgcHJvdGVjdGVkIGxvZ2dlciA9IGluamVjdChMb2dnZXJTZXJ2aWNlKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcm90ZWN0ZWQgZXBkVmlzdWFsaXphdGlvbkNvbmZpZzogRXBkVmlzdWFsaXphdGlvbkNvbmZpZyxcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuYmFzZVVybCA9IHRoaXMuZ2V0QmFzZVVybCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBnZXRCYXNlVXJsKCkge1xuICAgIGNvbnN0IGVwZFZpc3VhbGl6YXRpb24gPSB0aGlzLmVwZFZpc3VhbGl6YXRpb25Db25maWdcbiAgICAgIC5lcGRWaXN1YWxpemF0aW9uIGFzIEVwZFZpc3VhbGl6YXRpb25Jbm5lckNvbmZpZztcbiAgICBjb25zdCB2aXN1YWxpemF0aW9uQXBpQ29uZmlnID1cbiAgICAgIGVwZFZpc3VhbGl6YXRpb24uYXBpcyBhcyBWaXN1YWxpemF0aW9uQXBpQ29uZmlnO1xuXG4gICAgcmV0dXJuIGAke3Zpc3VhbGl6YXRpb25BcGlDb25maWcuYmFzZVVybH0vdmlzL3B1YmxpYy92aXN1YWxpemF0aW9uYDtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRVcmwoXG4gICAgdmlzdWFsaXphdGlvblVzYWdlSWQ6IFVzYWdlSWQsXG4gICAgZm9sZGVyVXNhZ2VJZDogVXNhZ2VJZFxuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IHF1ZXJ5UGFydHM6IHN0cmluZ1tdID0gW1xuICAgICAgYHVzYWdlPSR7ZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHZpc3VhbGl6YXRpb25Vc2FnZUlkKSl9YCxcbiAgICAgIGBmb2xkZXJVc2FnZUlkPSR7ZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGZvbGRlclVzYWdlSWQpKX1gLFxuICAgIF07XG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZVVybH0vdjEvbG9va3VwL3Zpc3VhbGl6YXRpb24/JHtxdWVyeVBhcnRzLmpvaW4oJyYnKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgZm9yIGZpbmRpbmcgYSB2aXN1YWxpemF0aW9uIGJ5IFVzYWdlIElEIHRoYXQgaGFzIGFub255bW91cyAodW5hdXRoZW50aWNhdGVkKSByZWFkIGFjY2VzcyBlbmFibGVkLlxuICAgKiBUaGUgc2VhcmNoIGlzIHBlcmZvcm1lZCBpbiB0aGUgU0FQIEVQRCBWaXN1YWxpemF0aW9uIHNlcnZpY2UgaW5zdGFuY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBTYWFTIHN1YnNjcmlwdGlvbiBmb3IgdGhlIFNBUCBFUEQgdGVuYW50LlxuICAgKiBAcGFyYW0gdmlzdWFsaXphdGlvblVzYWdlSWQgVGhlIFNBUCBFUEQgVmlzdWFsaXphdGlvbiB1c2FnZSBJRCB2YWx1ZSBpZGVudGlmeWluZyB2aXN1YWxpemF0aW9ucyB0byBtYXRjaC5cbiAgICogT25seSB2aXN1YWxpemF0aW9ucyB0aGF0IGhhdmUgdGhlIHNwZWNpZmllZCB1c2FnZSBJRCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLlxuICAgKiBAcGFyYW0gZm9sZGVyVXNhZ2VJZCBUaGUgU0FQIEVQRCBWaXN1YWxpemF0aW9uIHVzYWdlIElEIGlkZW50aWZ5aW5nIGZvbGRlcnMgdG8gc2VhcmNoIGZvciB2aXN1YWxpemF0aW9ucy5cbiAgICogT25seSBmb2xkZXJzIHRoYXQgYXJlIHRhZ2dlZCB3aXRoIHRoZSBzcGVjaWZpZWQgdXNhZ2UgSUQgdmFsdWUgdGhhdCBoYXZlIGFub255bW91cyBhY2Nlc3MgZW5hYmxlZCB3aWxsIGJlIHNlYXJjaGVkLlxuICAgKiBAcmV0dXJucyBBbiBPYnNlcnZhYmxlIHByb2R1Y2luZyBhIExvb2t1cFZpc3VhbGl6YXRpb25zUmVzcG9uc2Ugd2hpY2ggY29udGFpbnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBkZXNjcmliaW5nIG1hdGNoZWQgdmlzdWFsaXphdGlvbnMuXG4gICAqL1xuICBsb29rdXBWaXN1YWxpemF0aW9uKFxuICAgIHZpc3VhbGl6YXRpb25Vc2FnZUlkOiBVc2FnZUlkLFxuICAgIGZvbGRlclVzYWdlSWQ6IFVzYWdlSWRcbiAgKTogT2JzZXJ2YWJsZTxMb29rdXBWaXN1YWxpemF0aW9uc1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5nZXRVcmwodmlzdWFsaXphdGlvblVzYWdlSWQsIGZvbGRlclVzYWdlSWQpKS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHRocm93RXJyb3Iobm9ybWFsaXplSHR0cEVycm9yKGVycm9yLCB0aGlzLmxvZ2dlcikpKSxcbiAgICAgIHRoaXMuY29udmVydGVyLnBpcGVhYmxlKExPT0tVUF9WSVNVQUxJWkFUSU9OU19SRVNQT05TRV9OT1JNQUxJWkVSKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==