import { Injectable, inject } from '@angular/core';
import { LoggerService, normalizeHttpError, } from '@spartacus/core';
import { FUTURE_STOCK_LIST_NORMALIZER, FUTURE_STOCK_NORMALIZER, } from '@spartacus/product/future-stock/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccFutureStockAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.logger = inject(LoggerService);
    }
    getFutureStock(userId, productCode) {
        return this.http
            .get(this.getFutureStockEndpoint(userId, productCode))
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(FUTURE_STOCK_NORMALIZER));
    }
    getFutureStocks(userId, productCodes) {
        return this.http
            .get(this.getFutureStocksEndpoint(userId, productCodes))
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(FUTURE_STOCK_LIST_NORMALIZER));
    }
    getFutureStockEndpoint(userId, productCode) {
        return this.occEndpoints.buildUrl('futureStock', {
            urlParams: { userId, productCode },
        });
    }
    getFutureStocksEndpoint(userId, productCodes) {
        const params = {};
        params['productCodes'] = productCodes;
        return this.occEndpoints.buildUrl('futureStocks', {
            urlParams: { userId },
            queryParams: params,
        });
    }
}
OccFutureStockAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccFutureStockAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccFutureStockAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccFutureStockAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccFutureStockAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWZ1dHVyZS1zdG9jay5hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QvZnV0dXJlLXN0b2NrL29jYy9hZGFwdGVycy9vY2MtZnV0dXJlLXN0b2NrLmFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUVMLGFBQWEsRUFFYixrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLHVCQUF1QixHQUl4QixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRzVDLE1BQU0sT0FBTyxxQkFBcUI7SUFHaEMsWUFDWSxJQUFnQixFQUNoQixZQUFpQyxFQUNqQyxTQUEyQjtRQUYzQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNqQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUw3QixXQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBTXRDLENBQUM7SUFFSixjQUFjLENBQ1osTUFBYyxFQUNkLFdBQW1CO1FBRW5CLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQXFCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7YUFDekUsSUFBSSxDQUNILFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ25ELEVBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsQ0FDakQsQ0FBQztJQUNOLENBQUM7SUFFRCxlQUFlLENBQ2IsTUFBYyxFQUNkLFlBQW9CO1FBRXBCLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQ0YsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FDbkQ7YUFDQSxJQUFJLENBQ0gsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDbkIsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FDbkQsRUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUN0RCxDQUFDO0lBQ04sQ0FBQztJQUVTLHNCQUFzQixDQUM5QixNQUFjLEVBQ2QsV0FBbUI7UUFFbkIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDL0MsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtTQUNuQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsdUJBQXVCLENBQy9CLE1BQWMsRUFDZCxZQUFvQjtRQUVwQixNQUFNLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFlBQVksQ0FBQztRQUV0QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtZQUNoRCxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUU7WUFDckIsV0FBVyxFQUFFLE1BQU07U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7a0hBM0RVLHFCQUFxQjtzSEFBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIENvbnZlcnRlclNlcnZpY2UsXG4gIExvZ2dlclNlcnZpY2UsXG4gIE9jY0VuZHBvaW50c1NlcnZpY2UsXG4gIG5vcm1hbGl6ZUh0dHBFcnJvcixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcblxuaW1wb3J0IHtcbiAgRlVUVVJFX1NUT0NLX0xJU1RfTk9STUFMSVpFUixcbiAgRlVUVVJFX1NUT0NLX05PUk1BTElaRVIsXG4gIEZ1dHVyZVN0b2NrQWRhcHRlcixcbiAgUHJvZHVjdEZ1dHVyZVN0b2NrLFxuICBQcm9kdWN0RnV0dXJlU3RvY2tMaXN0LFxufSBmcm9tICdAc3BhcnRhY3VzL3Byb2R1Y3QvZnV0dXJlLXN0b2NrL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE9jY0Z1dHVyZVN0b2NrQWRhcHRlciBpbXBsZW1lbnRzIEZ1dHVyZVN0b2NrQWRhcHRlciB7XG4gIHByb3RlY3RlZCBsb2dnZXIgPSBpbmplY3QoTG9nZ2VyU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJvdGVjdGVkIG9jY0VuZHBvaW50czogT2NjRW5kcG9pbnRzU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29udmVydGVyOiBDb252ZXJ0ZXJTZXJ2aWNlXG4gICkge31cblxuICBnZXRGdXR1cmVTdG9jayhcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBwcm9kdWN0Q29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8UHJvZHVjdEZ1dHVyZVN0b2NrPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxQcm9kdWN0RnV0dXJlU3RvY2s+KHRoaXMuZ2V0RnV0dXJlU3RvY2tFbmRwb2ludCh1c2VySWQsIHByb2R1Y3RDb2RlKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICB0aHJvd0Vycm9yKG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciwgdGhpcy5sb2dnZXIpKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmNvbnZlcnRlci5waXBlYWJsZShGVVRVUkVfU1RPQ0tfTk9STUFMSVpFUilcbiAgICAgICk7XG4gIH1cblxuICBnZXRGdXR1cmVTdG9ja3MoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgcHJvZHVjdENvZGVzOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxQcm9kdWN0RnV0dXJlU3RvY2tMaXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxQcm9kdWN0RnV0dXJlU3RvY2tMaXN0PihcbiAgICAgICAgdGhpcy5nZXRGdXR1cmVTdG9ja3NFbmRwb2ludCh1c2VySWQsIHByb2R1Y3RDb2RlcylcbiAgICAgIClcbiAgICAgIC5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICB0aHJvd0Vycm9yKG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvciwgdGhpcy5sb2dnZXIpKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmNvbnZlcnRlci5waXBlYWJsZShGVVRVUkVfU1RPQ0tfTElTVF9OT1JNQUxJWkVSKVxuICAgICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRGdXR1cmVTdG9ja0VuZHBvaW50KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHByb2R1Y3RDb2RlOiBzdHJpbmdcbiAgKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5vY2NFbmRwb2ludHMuYnVpbGRVcmwoJ2Z1dHVyZVN0b2NrJywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCwgcHJvZHVjdENvZGUgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRGdXR1cmVTdG9ja3NFbmRwb2ludChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICBwcm9kdWN0Q29kZXM6IHN0cmluZ1xuICApOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhcmFtcyA9IDxhbnk+e307XG4gICAgcGFyYW1zWydwcm9kdWN0Q29kZXMnXSA9IHByb2R1Y3RDb2RlcztcblxuICAgIHJldHVybiB0aGlzLm9jY0VuZHBvaW50cy5idWlsZFVybCgnZnV0dXJlU3RvY2tzJywge1xuICAgICAgdXJsUGFyYW1zOiB7IHVzZXJJZCB9LFxuICAgICAgcXVlcnlQYXJhbXM6IHBhcmFtcyxcbiAgICB9KTtcbiAgfVxufVxuIl19