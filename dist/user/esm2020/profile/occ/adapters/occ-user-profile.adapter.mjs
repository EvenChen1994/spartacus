/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { InterceptorUtil, LoggerService, USE_CLIENT_TOKEN, normalizeHttpError, } from '@spartacus/core';
import { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SIGN_UP_SERIALIZER, } from '@spartacus/user/profile/core';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
const CONTENT_TYPE_JSON_HEADER = { 'Content-Type': 'application/json' };
const CONTENT_TYPE_URLENCODED_HEADER = {
    'Content-Type': 'application/x-www-form-urlencoded',
};
export class OccUserProfileAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.logger = inject(LoggerService);
    }
    update(userId, user) {
        const endpoint = this.occEndpoints.isConfigured('userUpdateProfile')
            ? 'userUpdateProfile'
            : 'user';
        const url = this.occEndpoints.buildUrl(endpoint, { urlParams: { userId } });
        user = this.converter.convert(user, USER_PROFILE_SERIALIZER);
        return this.http
            .patch(url, user)
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    register(user) {
        const url = this.occEndpoints.buildUrl('userRegister');
        let headers = new HttpHeaders({
            ...CONTENT_TYPE_JSON_HEADER,
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);
        return this.http.post(url, user, { headers }).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(USER_PROFILE_NORMALIZER));
    }
    registerGuest(guid, password) {
        const url = this.occEndpoints.buildUrl('userRegister');
        let headers = new HttpHeaders({
            ...CONTENT_TYPE_URLENCODED_HEADER,
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        const httpParams = new HttpParams()
            .set('guid', guid)
            .set('password', password);
        return this.http.post(url, httpParams, { headers }).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(USER_PROFILE_NORMALIZER));
    }
    requestForgotPasswordEmail(userEmailAddress) {
        const url = this.occEndpoints.buildUrl('userForgotPassword');
        const httpParams = new HttpParams().set('userId', userEmailAddress);
        let headers = new HttpHeaders({
            ...CONTENT_TYPE_URLENCODED_HEADER,
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http
            .post(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    resetPassword(token, newPassword) {
        const url = this.occEndpoints.buildUrl('userResetPassword');
        let headers = new HttpHeaders({
            ...CONTENT_TYPE_JSON_HEADER,
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http
            .post(url, { token, newPassword }, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    updateEmail(userId, currentPassword, newUserId) {
        const url = this.occEndpoints.buildUrl('userUpdateLoginId', {
            urlParams: { userId },
        });
        const httpParams = new HttpParams()
            .set('password', currentPassword)
            .set('newLogin', newUserId);
        const headers = new HttpHeaders({
            ...CONTENT_TYPE_URLENCODED_HEADER,
        });
        return this.http
            .put(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    updatePassword(userId, oldPassword, newPassword) {
        const url = this.occEndpoints.buildUrl('userUpdatePassword', {
            urlParams: { userId },
        });
        const httpParams = new HttpParams()
            .set('old', oldPassword)
            .set('new', newPassword);
        const headers = new HttpHeaders({
            ...CONTENT_TYPE_URLENCODED_HEADER,
        });
        return this.http
            .put(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    close(userId) {
        const endpoint = this.occEndpoints.isConfigured('userCloseAccount')
            ? 'userCloseAccount'
            : 'user';
        const url = this.occEndpoints.buildUrl(endpoint, { urlParams: { userId } });
        return this.http
            .delete(url)
            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));
    }
    loadTitles() {
        const url = this.occEndpoints.buildUrl('titles');
        return this.http.get(url).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), map((titleList) => titleList.titles ?? []), this.converter.pipeableMany(TITLE_NORMALIZER));
    }
}
OccUserProfileAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccUserProfileAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccUserProfileAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccUserProfileAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccUserProfileAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,