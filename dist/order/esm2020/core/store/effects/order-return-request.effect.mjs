/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { LoggerService, normalizeHttpError } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/order-history.connector";
export class OrderReturnRequestEffect {
    constructor(actions$, orderConnector) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.logger = inject(LoggerService);
        this.createReturnRequest$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.CREATE_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .return(payload.userId, payload.returnRequestInput)
                .pipe(map((returnRequest) => new OrderActions.CreateOrderReturnRequestSuccess(returnRequest)), catchError((error) => of(new OrderActions.CreateOrderReturnRequestFail(normalizeHttpError(error, this.logger)))));
        })));
        this.loadReturnRequest$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                .pipe(map((returnRequest) => new OrderActions.LoadOrderReturnRequestSuccess(returnRequest)), catchError((error) => of(new OrderActions.LoadOrderReturnRequestFail(normalizeHttpError(error, this.logger)))));
        })));
        this.cancelReturnRequest$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.CANCEL_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                .pipe(map(() => new OrderActions.CancelOrderReturnRequestSuccess()), catchError((error) => of(new OrderActions.CancelOrderReturnRequestFail(normalizeHttpError(error, this.logger)))));
        })));
        this.loadReturnRequestList$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map((returnRequestList) => new OrderActions.LoadOrderReturnRequestListSuccess(returnRequestList)), catchError((error) => of(new OrderActions.LoadOrderReturnRequestListFail(normalizeHttpError(error, this.logger)))));
        })));
    }
}
OrderReturnRequestEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderReturnRequestEffect, deps: [{ token: i1.Actions }, { token: i2.OrderHistoryConnector }], target: i0.ɵɵFactoryTarget.Injectable });
OrderReturnRequestEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderReturnRequestEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OrderReturnRequestEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.OrderHistoryConnector }]; } });
//# sourceMappingURL=data:application/json;base64,