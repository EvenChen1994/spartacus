/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { inject, Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { normalizeHttpError } from '@spartacus/core';
import { of } from 'rxjs';
import { map, switchMap, catchError } from 'rxjs/operators';
import { OrderHistoryConnector } from '../../connectors';
import { OrderActions } from '../actions';
import * as i0 from "@angular/core";
export class ConsignmentTrackingByIdEffects {
    constructor() {
        this.actions$ = inject(Actions);
        this.orderConnector = inject(OrderHistoryConnector);
        this.loadConsignmentTrackingById$ = createEffect(() => this.actions$.pipe(ofType(OrderActions.LOAD_CONSIGNMENT_TRACKING_BY_ID), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .getConsignmentTracking(payload.orderCode, payload.consignmentCode, payload.userId)
                .pipe(map((tracking) => new OrderActions.LoadConsignmentTrackingByIdSuccess({
                orderCode: payload.orderCode,
                consignmentCode: payload.consignmentCode,
                consignmentTracking: tracking,
            })), catchError((error) => of(new OrderActions.LoadConsignmentTrackingByIdFail({
                orderCode: payload.orderCode,
                consignmentCode: payload.consignmentCode,
                error: normalizeHttpError(error),
            }))));
        })));
    }
}
ConsignmentTrackingByIdEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConsignmentTrackingByIdEffects, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ConsignmentTrackingByIdEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConsignmentTrackingByIdEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ConsignmentTrackingByIdEffects, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2lnbm1lbnQtdHJhY2tpbmctYnktaWQuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZGVyL2NvcmUvc3RvcmUvZWZmZWN0cy9jb25zaWdubWVudC10cmFja2luZy1ieS1pZC5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUVILE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBRzFDLE1BQU0sT0FBTyw4QkFBOEI7SUFEM0M7UUFFWSxhQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNCLG1CQUFjLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDekQsaUNBQTRCLEdBQzFCLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxZQUFZLENBQUMsK0JBQStCLENBQUMsRUFDcEQsR0FBRyxDQUNELENBQUMsTUFBZ0QsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDckUsRUFDRCxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQyxjQUFjO2lCQUN2QixzQkFBc0IsQ0FDckIsT0FBTyxDQUFDLFNBQVMsRUFDakIsT0FBTyxDQUFDLGVBQWUsRUFDdkIsT0FBTyxDQUFDLE1BQU0sQ0FDZjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUNELENBQUMsUUFBNkIsRUFBRSxFQUFFLENBQ2hDLElBQUksWUFBWSxDQUFDLGtDQUFrQyxDQUFDO2dCQUNsRCxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7Z0JBQzVCLGVBQWUsRUFBRSxPQUFPLENBQUMsZUFBZTtnQkFDeEMsbUJBQW1CLEVBQUUsUUFBUTthQUM5QixDQUFDLENBQ0wsRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxZQUFZLENBQUMsK0JBQStCLENBQUM7Z0JBQy9DLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztnQkFDNUIsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlO2dCQUN4QyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDO2FBQ2pDLENBQUMsQ0FDSCxDQUNGLENBQ0YsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FBQztLQUNMOzsySEF2Q1ksOEJBQThCOytIQUE5Qiw4QkFBOEI7MkZBQTlCLDhCQUE4QjtrQkFEMUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IGluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgY3JlYXRlRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IG5vcm1hbGl6ZUh0dHBFcnJvciB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBDb25zaWdubWVudFRyYWNraW5nIH0gZnJvbSAnQHNwYXJ0YWN1cy9vcmRlci9yb290JztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE9yZGVySGlzdG9yeUNvbm5lY3RvciB9IGZyb20gJy4uLy4uL2Nvbm5lY3RvcnMnO1xuaW1wb3J0IHsgT3JkZXJBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25zaWdubWVudFRyYWNraW5nQnlJZEVmZmVjdHMge1xuICBwcm90ZWN0ZWQgYWN0aW9ucyQgPSBpbmplY3QoQWN0aW9ucyk7XG4gIHByb3RlY3RlZCBvcmRlckNvbm5lY3RvciA9IGluamVjdChPcmRlckhpc3RvcnlDb25uZWN0b3IpO1xuICBsb2FkQ29uc2lnbm1lbnRUcmFja2luZ0J5SWQkOiBPYnNlcnZhYmxlPE9yZGVyQWN0aW9ucy5Db25zaWdubWVudFRyYWNraW5nQnlJZEFjdGlvbj4gPVxuICAgIGNyZWF0ZUVmZmVjdCgoKSA9PlxuICAgICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgICBvZlR5cGUoT3JkZXJBY3Rpb25zLkxPQURfQ09OU0lHTk1FTlRfVFJBQ0tJTkdfQllfSUQpLFxuICAgICAgICBtYXAoXG4gICAgICAgICAgKGFjdGlvbjogT3JkZXJBY3Rpb25zLkxvYWRDb25zaWdubWVudFRyYWNraW5nQnlJZCkgPT4gYWN0aW9uLnBheWxvYWRcbiAgICAgICAgKSxcbiAgICAgICAgc3dpdGNoTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3JkZXJDb25uZWN0b3JcbiAgICAgICAgICAgIC5nZXRDb25zaWdubWVudFRyYWNraW5nKFxuICAgICAgICAgICAgICBwYXlsb2FkLm9yZGVyQ29kZSxcbiAgICAgICAgICAgICAgcGF5bG9hZC5jb25zaWdubWVudENvZGUsXG4gICAgICAgICAgICAgIHBheWxvYWQudXNlcklkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgICh0cmFja2luZzogQ29uc2lnbm1lbnRUcmFja2luZykgPT5cbiAgICAgICAgICAgICAgICAgIG5ldyBPcmRlckFjdGlvbnMuTG9hZENvbnNpZ25tZW50VHJhY2tpbmdCeUlkU3VjY2Vzcyh7XG4gICAgICAgICAgICAgICAgICAgIG9yZGVyQ29kZTogcGF5bG9hZC5vcmRlckNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnNpZ25tZW50Q29kZTogcGF5bG9hZC5jb25zaWdubWVudENvZGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnNpZ25tZW50VHJhY2tpbmc6IHRyYWNraW5nLFxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICAgICAgICAgICAgb2YoXG4gICAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkxvYWRDb25zaWdubWVudFRyYWNraW5nQnlJZEZhaWwoe1xuICAgICAgICAgICAgICAgICAgICBvcmRlckNvZGU6IHBheWxvYWQub3JkZXJDb2RlLFxuICAgICAgICAgICAgICAgICAgICBjb25zaWdubWVudENvZGU6IHBheWxvYWQuY29uc2lnbm1lbnRDb2RlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogbm9ybWFsaXplSHR0cEVycm9yKGVycm9yKSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICk7XG59XG4iXX0=