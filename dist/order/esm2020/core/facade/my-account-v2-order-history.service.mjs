/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { inject, Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { UserIdService } from '@spartacus/core';
import { of, using, combineLatest } from 'rxjs';
import { auditTime, filter, map, switchMap, tap } from 'rxjs/operators';
import { OrderActions } from '../store';
import { getOrderById, getOrderByIdEntity, } from '../store/selectors/order-by-id.selector';
import { getConsignmentTrackingById, getConsignmentTrackingByIdEntity, } from '../store/selectors/order-group.selectors';
import { OrderHistoryService } from './order-history.service';
import { OrderReturnRequestService } from './order-return-request.service';
import * as i0 from "@angular/core";
export class MyAccountV2OrderHistoryService {
    constructor() {
        this.orderReturnRequestService = inject(OrderReturnRequestService);
        this.store = inject(Store);
        this.userIdService = inject(UserIdService);
        this.orderHistoryService = inject(OrderHistoryService);
    }
    clearOrderList() {
        this.orderHistoryService.clearOrderList();
    }
    getOrderDetailsWithTracking(orderCode) {
        return this.getOrderDetails(orderCode).pipe(switchMap((order) => {
            //-----------------> filling consignment tracking
            const orderView = { ...order };
            orderView.consignments = [];
            const requests = (order.consignments ?? []).map((consignment) => {
                const consignmentView = { ...consignment };
                if (consignment.code && consignment.trackingID) {
                    return this.getConsignmentTracking(order?.code ?? '', consignment.code).pipe(map((trackingInfo) => {
                        consignmentView.consignmentTracking = trackingInfo;
                        orderView.consignments?.push(consignmentView);
                        return orderView;
                    }));
                }
                else {
                    orderView.consignments?.push(consignmentView);
                    return of(orderView);
                }
            });
            if (requests === undefined || requests.length < 1) {
                return of(orderView);
            }
            return combineLatest(requests).pipe(switchMap((orders) => {
                if (orders !== undefined) {
                    return of(orders[0]);
                }
                else {
                    return of(order);
                }
            }));
            //<-----------------
        }));
    }
    getOrderHistoryListWithDetails(pageSize) {
        const orderListView = {};
        return this.orderHistoryService.getOrderHistoryList(pageSize).pipe(switchMap((orderList) => {
            orderListView.pagination = orderList?.pagination;
            orderListView.sorts = orderList?.sorts;
            orderListView.orders = [];
            const requests = (orderList?.orders ?? []).map((order) => {
                const orderView = { ...order };
                return this.getOrderDetailsWithTracking(order?.code ?? '').pipe(map((orderDetail) => {
                    /** filling extra fields ---> */
                    orderView.returnable = orderDetail?.returnable;
                    orderView.totalItems = orderDetail?.totalItems;
                    orderView.entries = orderDetail?.entries;
                    orderView.consignments = orderDetail?.consignments;
                    orderView.unconsignedEntries = orderDetail?.unconsignedEntries;
                    orderView.returnRequests = [];
                    /** filling extra fields <--- */
                    orderListView.orders?.push(orderView);
                    return orderListView;
                }));
            });
            if (requests.length === 0) {
                // in case of no order
                requests.push(of(orderListView));
            }
            return combineLatest(requests);
        }), map((requests) => {
            if (requests !== undefined) {
                return requests[0];
            }
            else {
                return {};
            }
        }));
    }
    getOrderHistoryList(pageSize) {
        const orderHistoryListRequest = this.getOrderHistoryListWithDetails(pageSize);
        const returnRequestListRequest = this.orderReturnRequestService.getOrderReturnRequestList();
        return combineLatest([
            orderHistoryListRequest,
            returnRequestListRequest,
        ]).pipe(switchMap((responses) => {
            const returnRequests = responses?.[1]?.returnRequests;
            const orderHistory = responses?.[0];
            if (returnRequests && orderHistory?.orders) {
                if (orderHistory.pagination?.totalResults === 0) {
                    return of(orderHistory);
                }
                return orderHistory.orders.map((order) => {
                    const returnItems = returnRequests?.filter((returnItem) => returnItem.order?.code === order.code);
                    if (returnItems) {
                        order.returnRequests = returnItems;
                    }
                    return orderHistory;
                });
            }
            else {
                return of(orderHistory);
            }
        }));
    }
    getOrderDetailsValue(code) {
        return this.store
            .select(getOrderById(code))
            .pipe(filter((order) => Boolean(order)));
    }
    getOrderDetailsState(code) {
        return this.store.select(getOrderByIdEntity(code));
    }
    loadOrderDetails(code) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrderActions.LoadOrderById({
                userId,
                code,
            })),
        });
    }
    getOrderDetails(code) {
        const loading$ = this.getOrderDetailsState(code).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadOrderDetails(code);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getOrderDetailsValue(code));
    }
    getConsignmentTrackingValue(orderCode, consignmentCode) {
        return this.store
            .select(getConsignmentTrackingById(orderCode, consignmentCode))
            .pipe(filter((tracking) => Boolean(tracking)));
    }
    getConsignmentTrackingState(orderCode, consignmentCode) {
        return this.store.select(getConsignmentTrackingByIdEntity(orderCode, consignmentCode));
    }
    loadConsignmentTracking(orderCode, consignmentCode) {
        this.userIdService.takeUserId(true).subscribe({
            next: (userId) => this.store.dispatch(new OrderActions.LoadConsignmentTrackingById({
                orderCode,
                consignmentCode,
                userId,
            })),
        });
    }
    getConsignmentTracking(orderCode, consignmentCode) {
        const loading$ = this.getConsignmentTrackingState(orderCode, consignmentCode).pipe(auditTime(0), tap((state) => {
            if (!(state.loading || state.success || state.error)) {
                this.loadConsignmentTracking(orderCode, consignmentCode);
            }
        }));
        return using(() => loading$.subscribe(), () => this.getConsignmentTrackingValue(orderCode, consignmentCode));
    }
}
MyAccountV2OrderHistoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MyAccountV2OrderHistoryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MyAccountV2OrderHistoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MyAccountV2OrderHistoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: MyAccountV2OrderHistoryService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,