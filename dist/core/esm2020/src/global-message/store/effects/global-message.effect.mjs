/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { select } from '@ngrx/store';
import { EMPTY, of } from 'rxjs';
import { concatMap, delay, filter, map, switchMap, take, withLatestFrom, } from 'rxjs/operators';
import { ObjectComparisonUtils } from '../../../util/object-comparison-utils';
import { isNotUndefined } from '../../../util/type-guards';
import { GlobalMessageActions } from '../actions/index';
import { GlobalMessageSelectors } from '../selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@ngrx/store";
import * as i3 from "../../config/global-message-config";
export class GlobalMessageEffect {
    constructor(actions$, store, config, platformId) {
        this.actions$ = actions$;
        this.store = store;
        this.config = config;
        this.platformId = platformId;
        this.removeDuplicated$ = createEffect(() => this.actions$.pipe(ofType(GlobalMessageActions.ADD_MESSAGE), map((action) => action.payload), switchMap((message) => of(message.text).pipe(withLatestFrom(this.store.pipe(select(GlobalMessageSelectors.getGlobalMessageEntitiesByType(message.type)))), filter(([text, messages]) => ObjectComparisonUtils.countOfDeepEqualObjects(text, messages) >
            1), map(([text, messages]) => {
            const index = ObjectComparisonUtils.indexOfFirstOccurrence(text, messages);
            if (index !== undefined) {
                return new GlobalMessageActions.RemoveMessage({
                    type: message.type,
                    index,
                });
            }
        }), filter(isNotUndefined)))));
        this.hideAfterDelay$ = createEffect(() => isPlatformBrowser(this.platformId) // we don't want to run this logic when doing SSR
            ? this.actions$.pipe(ofType(GlobalMessageActions.ADD_MESSAGE), map((action) => action.payload), concatMap((message) => {
                const config = this.config.globalMessages?.[message.type];
                return this.store.pipe(select(GlobalMessageSelectors.getGlobalMessageCountByType(message.type)), take(1), filter((count) => ((config && config.timeout !== undefined) ||
                    message.timeout !== undefined) &&
                    count > 0), delay(message.timeout || config?.timeout), switchMap(() => of(new GlobalMessageActions.RemoveMessage({
                    type: message.type,
                    index: 0,
                }))));
            }))
            : // workaround is required due to NGRX mutating a global static
                // observable EMPTY, causing to throw an error if we have
                // effect registered on the same observable twice
                () => EMPTY);
    }
}
GlobalMessageEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: GlobalMessageEffect, deps: [{ token: i1.Actions }, { token: i2.Store }, { token: i3.GlobalMessageConfig }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
GlobalMessageEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: GlobalMessageEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: GlobalMessageEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.Store }, { type: i3.GlobalMessageConfig }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,