/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { inject, Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, tap } from 'rxjs/operators';
import { ProductActions } from '../actions/index';
import { GlobalMessageType, } from '../../../global-message/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { LoggerService } from '../../../logger';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/reviews/product-reviews.connector";
import * as i3 from "../../../global-message/index";
export class ProductReviewsEffects {
    constructor(actions$, productReviewsConnector, globalMessageService) {
        this.actions$ = actions$;
        this.productReviewsConnector = productReviewsConnector;
        this.globalMessageService = globalMessageService;
        this.logger = inject(LoggerService);
        this.loadProductReviews$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.LOAD_PRODUCT_REVIEWS), map((action) => action.payload), mergeMap((productCode) => {
            return this.productReviewsConnector.get(productCode).pipe(map((data) => {
                return new ProductActions.LoadProductReviewsSuccess({
                    productCode,
                    list: data,
                });
            }), catchError((error) => of(new ProductActions.LoadProductReviewsFail(normalizeHttpError(error, this.logger)))));
        })));
        this.postProductReview = createEffect(() => this.actions$.pipe(ofType(ProductActions.POST_PRODUCT_REVIEW), map((action) => action.payload), mergeMap((payload) => {
            return this.productReviewsConnector
                .add(payload.productCode, payload.review)
                .pipe(map((reviewResponse) => {
                return new ProductActions.PostProductReviewSuccess(reviewResponse);
            }), catchError((error) => of(new ProductActions.PostProductReviewFail(normalizeHttpError(error, this.logger)))));
        })));
        this.showGlobalMessageOnPostProductReviewSuccess$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.POST_PRODUCT_REVIEW_SUCCESS), tap(() => {
            this.globalMessageService.add({ key: 'productReview.thankYouForReview' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        })), { dispatch: false });
        this.showGlobalMessageOnPostProductReviewFail$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.POST_PRODUCT_REVIEW_FAIL), tap(() => {
            this.globalMessageService.add({ key: 'productReview.postReviewFail' }, GlobalMessageType.MSG_TYPE_ERROR);
        })), { dispatch: false });
    }
}
ProductReviewsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductReviewsEffects, deps: [{ token: i1.Actions }, { token: i2.ProductReviewsConnector }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductReviewsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductReviewsEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductReviewsEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ProductReviewsConnector }, { type: i3.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,