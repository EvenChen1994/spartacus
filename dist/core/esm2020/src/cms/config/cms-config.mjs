/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { Config } from '../../config/config-tokens';
import { OccConfig } from '../../occ/config/occ-config';
import * as i0 from "@angular/core";
export const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
/** @deprecated - unused since 6.5. Now `SmartEditLauncher` is responsible for triggering the lazy loading of the `SMART_EDIT_FEATURE` */
export const SMART_EDIT_DUMMY_COMPONENT_TYPE = 'SmartEditDummyCMSComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
export class CmsConfig extends OccConfig {
}
CmsConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CmsConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
CmsConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CmsConfig, providedIn: 'root', useExisting: Config });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CmsConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useExisting: Config,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2Ntcy9jb25maWcvY21zLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFFM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7QUErQnhELE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLHFCQUFxQixDQUFDO0FBQ3BFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLGtCQUFrQixDQUFDO0FBRTFELHlJQUF5STtBQUN6SSxNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyw0QkFBNEIsQ0FBQztBQW9ENUUsZ0VBQWdFO0FBQ2hFLE1BQU0sQ0FBTixJQUFZLG9CQUtYO0FBTEQsV0FBWSxvQkFBb0I7SUFDOUIsa0ZBQWtGO0lBQ2xGLGtEQUEwQixDQUFBO0lBQzFCLDJFQUEyRTtJQUMzRSxtREFBMkIsQ0FBQTtBQUM3QixDQUFDLEVBTFcsb0JBQW9CLEtBQXBCLG9CQUFvQixRQUsvQjtBQTJCRCxNQUFNLE9BQWdCLFNBQVUsU0FBUSxTQUFTOztzR0FBM0IsU0FBUzswR0FBVCxTQUFTLGNBSGpCLE1BQU0sZUFDTCxNQUFNOzJGQUVDLFNBQVM7a0JBSjlCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07b0JBQ2xCLFdBQVcsRUFBRSxNQUFNO2lCQUNwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBTUERYLUZpbGVDb3B5cmlnaHRUZXh0OiAyMDIzIFNBUCBTcGFydGFjdXMgdGVhbSA8c3BhcnRhY3VzLXRlYW1Ac2FwLmNvbT5cbiAqXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUsIFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLXRva2Vucyc7XG5pbXBvcnQgeyBDbXNDb21wb25lbnQgfSBmcm9tICcuLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vLi4vb2NjL2NvbmZpZy9vY2MtY29uZmlnJztcblxuZXhwb3J0IGludGVyZmFjZSBTdGFuZGFyZENtc0NvbXBvbmVudENvbmZpZyB7XG4gIENNU1NpdGVDb250ZXh0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ01TTGlua0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFNpbXBsZVJlc3BvbnNpdmVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBTaW1wbGVCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBCYW5uZXJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDTVNQYXJhZ3JhcGhDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBCcmVhZGNydW1iQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTmF2aWdhdGlvbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEZvb3Rlck5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDYXRlZ29yeU5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0QWRkVG9DYXJ0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgTWluaUNhcnRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0Q2Fyb3VzZWxDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBTZWFyY2hCb3hDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0UmVmZXJlbmNlc0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENNU1RhYlBhcmFncmFwaENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIExvZ2luQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKc3BJbmNsdWRlQ21zQ29tcG9uZW50Q29uZmlnIHtcbiAgQWNjb3VudEFkZHJlc3NCb29rQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgRm9yZ290UGFzc3dvcmRDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBSZXNldFBhc3N3b3JkQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdERldGFpbHNUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0U3BlY3NUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBQcm9kdWN0UmV2aWV3c1RhYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBKU1BfSU5DTFVERV9DTVNfQ09NUE9ORU5UX1RZUEUgPSAnSnNwSW5jbHVkZUNvbXBvbmVudCc7XG5leHBvcnQgY29uc3QgQ01TX0ZMRVhfQ09NUE9ORU5UX1RZUEUgPSAnQ01TRmxleENvbXBvbmVudCc7XG5cbi8qKiBAZGVwcmVjYXRlZCAtIHVudXNlZCBzaW5jZSA2LjUuIE5vdyBgU21hcnRFZGl0TGF1bmNoZXJgIGlzIHJlc3BvbnNpYmxlIGZvciB0cmlnZ2VyaW5nIHRoZSBsYXp5IGxvYWRpbmcgb2YgdGhlIGBTTUFSVF9FRElUX0ZFQVRVUkVgICovXG5leHBvcnQgY29uc3QgU01BUlRfRURJVF9EVU1NWV9DT01QT05FTlRfVFlQRSA9ICdTbWFydEVkaXREdW1teUNNU0NvbXBvbmVudCc7XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvZiB0aGUgQ01TIGNvbXBvbmVudCdzIGNoaWxkIHJvdXRlc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENtc0NvbXBvbmVudENoaWxkUm91dGVzQ29uZmlnIHtcbiAgLyoqXG4gICAqIFJvdXRlIGBkYXRhYCBwcm9wZXJ0eSB0byBhcHBseSBvbiB0aGUgcGFyZW50IChob3N0KSByb3V0ZSBvZiB0aGUgQ01TIGNoaWxkIHJvdXRlcy5cbiAgICovXG4gIHBhcmVudD86IFBpY2s8Um91dGUsICdkYXRhJz47XG5cbiAgLyoqXG4gICAqIENoaWxkIHJvdXRlcyBkZWZpbmVkIGJ5IHRoZSBleGlzdGVuY2Ugb2YgdGhlIENNUyBjb21wb25lbnQgb24gdGhlIHBhZ2UuXG4gICAqL1xuICBjaGlsZHJlbj86IFJvdXRlW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ21zQ29tcG9uZW50TWFwcGluZzxUID0gQ21zQ29tcG9uZW50PiB7XG4gIGNvbXBvbmVudD86IGFueTtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYWJsZSBjb21wb25lbnQgcHJvdmlkZXJzIGZvciBjbXMgY29tcG9uZW50cy5cbiAgICpcbiAgICogQ29tcG9uZW50IHNlcnZpY2VzIGFyZSBkZXNpZ25lZCB0byBiZSBub24tc2luZ2xldG9uIHNlcnZpY2VzIGFuZCBhcmUgc2NvcGVkXG4gICAqIHRvIHRoZSBjb21wb25lbnQgaW5qZWN0aW9uIHRyZWUuIFRoZSBhZHZhbnRhZ2Ugb2YgdGhlc2Ugc2VydmljZXMgaXMgdGhhdCB0aGV5IGNhblxuICAgKiByZXNvbHZlIHNlcnZpY2VzIGluamVjdGVkIHRvIHRoZSBjb21wb25lbnQgaW5qZWN0aW9uIHRyZWUuIEhvd2V2ZXIsIHRoZXNlIHNlcnZpY2VzXG4gICAqIGNhbm5vdCBiZSBleHRlbmRlZCB3aXRoIHRoZSBuYXRpdmUgQW5ndWxhciBESSBzeXN0ZW0uXG4gICAqXG4gICAqIFRoZSBjb25maWd1cmFibGUgY29tcG9uZW50IHByb3ZpZGVycyBtaXRpZ2F0ZSB0aGlzIGRvd25zaWRlLCBieSBhbGxvd2luZyB5b3UgdG8gcHJvdmlkZVxuICAgKiBjb21wb25lbnQgcHJvdmlkZXJzIHRocm91Z2ggc2VydmljZXMuXG4gICAqL1xuICBwcm92aWRlcnM/OiBTdGF0aWNQcm92aWRlcltdO1xuICBjaGlsZFJvdXRlcz86IFJvdXRlW10gfCBDbXNDb21wb25lbnRDaGlsZFJvdXRlc0NvbmZpZztcbiAgZGlzYWJsZVNTUj86IGJvb2xlYW47XG4gIGkxOG5LZXlzPzogc3RyaW5nW107XG4gIGd1YXJkcz86IGFueVtdO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IGRhdGEgY2FuIGJlIHN0YXRpY2FsbHkgY29uZmlndXJlZC4gVGhlIGRhdGEgY2FuIGJlIHVzZWQgZm9yIHZhcmlvdXMgcmVhc29uczpcbiAgICogLSBJbXByb3ZlIHBlcmZvcm1hbmNlIHdpdGggYW4gaW5pdGlhbCBkYXRhIHRoYXQgZG9lc24ndCByZXF1aXJlIEFQSSByZXNwb25zZVxuICAgKiAtIEludHJvZHVjZSBVSSBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5vdCBhdmFpbGFibGUgb24gdGhlIEFQSVxuICAgKiAtIEJ1aWxkIGdob3N0IGRlc2lnbiBiYXNlZCBvbiB0aGUgaW5pdGlhbCBkYXRhIHRoYXQgaXMgdXNlZCBwcmlvciB0byB0aGUgYmFja2VuZCBkYXRhIGlzIGxvYWRlZFxuICAgKi9cbiAgZGF0YT86IFQ7XG5cbiAgLyoqXG4gICAqIERlZmVyTG9hZGluZyBjYW4gYmUgc3BlY2lmaWVkIGdsb2JhbGx5LCBidXQgYWxzbyBwZXIgY29tcG9uZW50LlxuICAgKiBTb21lIGNvbXBvbmVudHMgcmVxdWlyZSBkaXJlY3QgbG9hZGluZyB3aGlsZSBpdCdzIG5vdCBpbml0aWFsbHlcbiAgICogaW4gdGhlIHZpZXdwb3J0LlxuICAgKi9cbiAgZGVmZXJMb2FkaW5nPzogRGVmZXJMb2FkaW5nU3RyYXRlZ3k7XG59XG5cbi8qKiBTdHJhdGVneSB0byBjb250cm9sIHRoZSBsb2FkaW5nIHN0cmF0ZWd5IG9mIERPTSBlbGVtZW50cy4gKi9cbmV4cG9ydCBlbnVtIERlZmVyTG9hZGluZ1N0cmF0ZWd5IHtcbiAgLyoqIERlZmVycyBsb2FkaW5nIG9mIERPTSBlbGVtZW50cyB1bnRpbCBlbGVtZW50IGlzIG5lYXIvaW4gdGhlIHVzZXJzIHZpZXcgcG9ydCAqL1xuICBERUZFUiA9ICdERUZFUlJFRC1MT0FESU5HJyxcbiAgLyoqIFJlbmRlcnMgdGhlIERPTSBpbnN0YW50bHkgd2l0aG91dCBiZWluZyBjb25jZXJuZWQgd2l0aCB0aGUgdmlldyBwb3J0ICovXG4gIElOU1RBTlQgPSAnSU5TVEFOVC1MT0FESU5HJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDTVNDb21wb25lbnRDb25maWdcbiAgZXh0ZW5kcyBTdGFuZGFyZENtc0NvbXBvbmVudENvbmZpZyxcbiAgICBKc3BJbmNsdWRlQ21zQ29tcG9uZW50Q29uZmlnIHtcbiAgW2NvbXBvbmVudFR5cGU6IHN0cmluZ106IENtc0NvbXBvbmVudE1hcHBpbmcgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZU1vZHVsZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBMYXp5IHJlc29sdmVkIGZlYXR1cmUgbW9kdWxlXG4gICAqL1xuICBtb2R1bGU/OiAoKSA9PiBQcm9taXNlPGFueT47XG4gIC8qKlxuICAgKiBMYXp5IHJlc29sdmVkIGRlcGVuZGVuY3kgbW9kdWxlcyBvciBmZWF0dXJlcyByZWZlcmVuY2VkIGJ5IG5hbWVcbiAgICovXG4gIGRlcGVuZGVuY2llcz86ICgoKCkgPT4gUHJvbWlzZTxhbnk+KSB8IHN0cmluZylbXTtcbiAgLyoqXG4gICAqIENtcyBjb21wb25lbnRzIGNvdmVyZWQgYnkgdGhpcyBmZWF0dXJlXG4gICAqL1xuICBjbXNDb21wb25lbnRzPzogc3RyaW5nW107XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbXNDb25maWcgZXh0ZW5kcyBPY2NDb25maWcge1xuICBmZWF0dXJlTW9kdWxlcz86IHsgW2ZlYXR1cmVOYW1lOiBzdHJpbmddOiBGZWF0dXJlTW9kdWxlQ29uZmlnIHwgc3RyaW5nIH07XG4gIGNtc0NvbXBvbmVudHM/OiBDTVNDb21wb25lbnRDb25maWc7XG4gIGNvbXBvbmVudHNMb2FkaW5nPzoge1xuICAgIHBhZ2VTaXplPzogbnVtYmVyO1xuICB9O1xufVxuXG5kZWNsYXJlIG1vZHVsZSAnLi4vLi4vY29uZmlnL2NvbmZpZy10b2tlbnMnIHtcbiAgaW50ZXJmYWNlIENvbmZpZyBleHRlbmRzIENtc0NvbmZpZyB7fVxufVxuIl19