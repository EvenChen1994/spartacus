/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { from } from 'rxjs';
import { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';
import { AuthActions } from '../../../auth/user-auth/store/actions/index';
import { LoggerService } from '../../../logger';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { bufferDebounceTime } from '../../../util/rxjs/buffer-debounce-time';
import { withdrawOn } from '../../../util/rxjs/withdraw-on';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/component/cms-component.connector";
export class ComponentsEffects {
    constructor(actions$, cmsComponentConnector) {
        this.actions$ = actions$;
        this.cmsComponentConnector = cmsComponentConnector;
        this.logger = inject(LoggerService);
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, AuthActions.LOGOUT, AuthActions.LOGIN));
        this.loadComponent$ = createEffect(() => ({ scheduler, debounce = 0 } = {}) => this.actions$.pipe(ofType(CmsActions.LOAD_CMS_COMPONENT), groupBy((actions) => serializePageContext(actions.payload.pageContext)), mergeMap((actionGroup) => actionGroup.pipe(bufferDebounceTime(debounce, scheduler), mergeMap((actions) => this.loadComponentsEffect(actions.map((action) => action.payload.uid), actions[0].payload.pageContext ?? { id: '' })))), withdrawOn(this.contextChange$)));
    }
    loadComponentsEffect(componentUids, pageContext) {
        return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(switchMap((components) => {
            const actions = [];
            const uidsLeft = new Set(componentUids);
            for (const component of components) {
                actions.push(new CmsActions.LoadCmsComponentSuccess({
                    component,
                    uid: component.uid,
                    pageContext,
                }));
                uidsLeft.delete(component.uid ?? '');
            }
            // we have to emit LoadCmsComponentFail for all component's uids that
            // are missing from the response
            uidsLeft.forEach((uid) => {
                actions.push(new CmsActions.LoadCmsComponentFail({
                    uid,
                    pageContext,
                }));
            });
            return from(actions);
        }), catchError((error) => from(componentUids.map((uid) => new CmsActions.LoadCmsComponentFail({
            uid,
            error: normalizeHttpError(error, this.logger),
            pageContext,
        })))));
    }
}
ComponentsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ComponentsEffects, deps: [{ token: i1.Actions }, { token: i2.CmsComponentConnector }], target: i0.ɵɵFactoryTarget.Injectable });
ComponentsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ComponentsEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ComponentsEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.CmsComponentConnector }]; } });
//# sourceMappingURL=data:application/json;base64,