/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { HttpHeaders } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { map, switchMap } from 'rxjs/operators';
import { CMS_COMPONENT_NORMALIZER } from '../../../cms/connectors/component/converters';
import { PageType, USER_CMS_ENDPOINTS, } from '../../../model/cms.model';
import { UserIdService } from '../../../auth';
import { FeatureConfigService } from '../../../features-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../services/occ-endpoints.service";
import * as i3 from "../../../util/converter.service";
export class OccCmsComponentAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
        this.userIdService = inject(UserIdService);
        this.featureConfigService = inject(FeatureConfigService);
        this.headers = new HttpHeaders().set('Content-Type', 'application/json');
    }
    load(id, pageContext) {
        // TODO: (CXSPA-4886) Remove flag in the major
        if (this.featureConfigService.isEnabled(USER_CMS_ENDPOINTS)) {
            return this.userIdService.getUserId().pipe(switchMap((userId) => {
                return this.http.get(this.getComponentEndPoint(id, pageContext, userId), {
                    headers: this.headers,
                });
            }), this.converter.pipeable(CMS_COMPONENT_NORMALIZER));
        }
        return this.http
            .get(this.getComponentEndPoint(id, pageContext), {
            headers: this.headers,
        })
            .pipe(this.converter.pipeable(CMS_COMPONENT_NORMALIZER));
    }
    findComponentsByIds(ids, pageContext, fields = 'DEFAULT', currentPage = 0, pageSize = ids.length, sort) {
        const requestParams = {
            ...this.getContextParams(pageContext),
            ...this.getPaginationParams(currentPage, pageSize, sort),
        };
        requestParams['componentIds'] = ids.toString();
        // TODO: (CXSPA-4886) Remove flag in the major
        if (this.featureConfigService.isEnabled(USER_CMS_ENDPOINTS)) {
            return this.userIdService.getUserId().pipe(switchMap((userId) => {
                return this.http.get(this.getComponentsEndpoint(requestParams, fields, userId), {
                    headers: this.headers,
                });
            }), map((componentList) => componentList.component ?? []), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
        }
        return this.http
            .get(this.getComponentsEndpoint(requestParams, fields), {
            headers: this.headers,
        })
            .pipe(map((componentList) => componentList.component ?? []), this.converter.pipeableMany(CMS_COMPONENT_NORMALIZER));
    }
    getComponentEndPoint(id, pageContext, userId) {
        // TODO: (CXSPA-4886) Remove flag in the major
        if (this.featureConfigService.isEnabled(USER_CMS_ENDPOINTS)) {
            const queryParams = this.getContextParams(pageContext);
            const attributes = userId
                ? {
                    urlParams: { id, userId },
                    queryParams,
                }
                : { urlParams: { id }, queryParams };
            return this.occEndpoints.buildUrl('component', attributes);
        }
        return this.occEndpoints.buildUrl('component', {
            urlParams: { id },
            queryParams: this.getContextParams(pageContext),
        });
    }
    getComponentsEndpoint(requestParams, fields, userId) {
        // TODO: (CXSPA-4886) Remove flag in the major
        if (this.featureConfigService.isEnabled(USER_CMS_ENDPOINTS)) {
            const queryParams = { fields, ...requestParams };
            const attributes = userId
                ? {
                    urlParams: { userId },
                    queryParams,
                }
                : { queryParams };
            return this.occEndpoints.buildUrl('components', attributes);
        }
        return this.occEndpoints.buildUrl('components', {
            queryParams: { fields, ...requestParams },
        });
    }
    getPaginationParams(currentPage, pageSize, sort) {
        const requestParams = {};
        if (currentPage !== undefined) {
            requestParams['currentPage'] = currentPage.toString();
        }
        if (pageSize !== undefined) {
            requestParams['pageSize'] = pageSize.toString();
        }
        if (sort !== undefined) {
            requestParams['sort'] = sort;
        }
        return requestParams;
    }
    getContextParams(pageContext) {
        let requestParams = {};
        switch (pageContext.type) {
            case PageType.PRODUCT_PAGE: {
                requestParams = { productCode: pageContext.id };
                break;
            }
            case PageType.CATEGORY_PAGE: {
                requestParams = { categoryCode: pageContext.id };
                break;
            }
            case PageType.CATALOG_PAGE: {
                requestParams = { catalogCode: pageContext.id };
                break;
            }
        }
        return requestParams;
    }
}
OccCmsComponentAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCmsComponentAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i3.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCmsComponentAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCmsComponentAdapter, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: OccCmsComponentAdapter, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i3.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,