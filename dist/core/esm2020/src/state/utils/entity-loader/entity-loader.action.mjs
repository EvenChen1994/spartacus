/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { entityMeta } from '../entity/entity.action';
import { failMeta, loadMeta, resetMeta, successMeta, } from '../loader/loader.action';
export const ENTITY_LOAD_ACTION = '[ENTITY] LOAD';
export const ENTITY_FAIL_ACTION = '[ENTITY] LOAD FAIL';
export const ENTITY_SUCCESS_ACTION = '[ENTITY] LOAD SUCCESS';
export const ENTITY_RESET_ACTION = '[ENTITY] RESET';
export function entityLoadMeta(entityType, id) {
    return {
        ...loadMeta(entityType),
        ...entityMeta(entityType, id),
    };
}
export function entityFailMeta(entityType, id, error) {
    return {
        ...failMeta(entityType, error),
        ...entityMeta(entityType, id),
    };
}
export function entitySuccessMeta(entityType, id) {
    return {
        ...successMeta(entityType),
        ...entityMeta(entityType, id),
    };
}
export function entityResetMeta(entityType, id) {
    return {
        ...resetMeta(entityType),
        ...entityMeta(entityType, id),
    };
}
export class EntityLoadAction {
    constructor(entityType, id) {
        this.type = ENTITY_LOAD_ACTION;
        this.meta = entityLoadMeta(entityType, id);
    }
}
export class EntityFailAction {
    constructor(entityType, id, error) {
        this.type = ENTITY_FAIL_ACTION;
        this.meta = entityFailMeta(entityType, id, error);
    }
}
export class EntitySuccessAction {
    constructor(entityType, id, payload) {
        this.payload = payload;
        this.type = ENTITY_SUCCESS_ACTION;
        this.meta = entitySuccessMeta(entityType, id);
    }
}
export class EntityLoaderResetAction {
    constructor(entityType, id) {
        this.type = ENTITY_RESET_ACTION;
        this.meta = entityResetMeta(entityType, id);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWxvYWRlci5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9zdGF0ZS91dGlscy9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXIuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFHSCxPQUFPLEVBQVksVUFBVSxFQUFjLE1BQU0seUJBQXlCLENBQUM7QUFDM0UsT0FBTyxFQUNMLFFBQVEsRUFFUixRQUFRLEVBQ1IsU0FBUyxFQUNULFdBQVcsR0FDWixNQUFNLHlCQUF5QixDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztBQUNsRCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUN2RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQVNwRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixVQUFrQixFQUNsQixFQUFZO0lBRVosT0FBTztRQUNMLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUN2QixHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzlCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsVUFBa0IsRUFDbEIsRUFBWSxFQUNaLEtBQVc7SUFFWCxPQUFPO1FBQ0wsR0FBRyxRQUFRLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQztRQUM5QixHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzlCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixVQUFrQixFQUNsQixFQUFZO0lBRVosT0FBTztRQUNMLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQztRQUMxQixHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO0tBQzlCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FDN0IsVUFBa0IsRUFDbEIsRUFBYTtJQUViLE9BQU87UUFDTCxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDeEIsR0FBRyxVQUFVLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztLQUM5QixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBWSxVQUFrQixFQUFFLEVBQVk7UUFGNUMsU0FBSSxHQUFHLGtCQUFrQixDQUFDO1FBR3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRzNCLFlBQVksVUFBa0IsRUFBRSxFQUFZLEVBQUUsS0FBVztRQUZ6RCxTQUFJLEdBQUcsa0JBQWtCLENBQUM7UUFHeEIsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQVksVUFBa0IsRUFBRSxFQUFZLEVBQVMsT0FBYTtRQUFiLFlBQU8sR0FBUCxPQUFPLENBQU07UUFGbEUsU0FBSSxHQUFHLHFCQUFxQixDQUFDO1FBRzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx1QkFBdUI7SUFHbEMsWUFBWSxVQUFrQixFQUFFLEVBQVk7UUFGNUMsU0FBSSxHQUFHLG1CQUFtQixDQUFDO1FBR3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBFbnRpdHlJZCwgZW50aXR5TWV0YSwgRW50aXR5TWV0YSB9IGZyb20gJy4uL2VudGl0eS9lbnRpdHkuYWN0aW9uJztcbmltcG9ydCB7XG4gIGZhaWxNZXRhLFxuICBMb2FkZXJNZXRhLFxuICBsb2FkTWV0YSxcbiAgcmVzZXRNZXRhLFxuICBzdWNjZXNzTWV0YSxcbn0gZnJvbSAnLi4vbG9hZGVyL2xvYWRlci5hY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgRU5USVRZX0xPQURfQUNUSU9OID0gJ1tFTlRJVFldIExPQUQnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9GQUlMX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEIEZBSUwnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9TVUNDRVNTX0FDVElPTiA9ICdbRU5USVRZXSBMT0FEIFNVQ0NFU1MnO1xuZXhwb3J0IGNvbnN0IEVOVElUWV9SRVNFVF9BQ1RJT04gPSAnW0VOVElUWV0gUkVTRVQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUxvYWRlck1ldGEgZXh0ZW5kcyBFbnRpdHlNZXRhLCBMb2FkZXJNZXRhIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5TG9hZGVyQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgcGF5bG9hZD86IGFueTtcbiAgcmVhZG9ubHkgbWV0YT86IEVudGl0eUxvYWRlck1ldGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRpdHlMb2FkTWV0YShcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxuICBpZDogRW50aXR5SWRcbik6IEVudGl0eUxvYWRlck1ldGEge1xuICByZXR1cm4ge1xuICAgIC4uLmxvYWRNZXRhKGVudGl0eVR5cGUpLFxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5RmFpbE1ldGEoXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcbiAgaWQ6IEVudGl0eUlkLFxuICBlcnJvcj86IGFueVxuKTogRW50aXR5TG9hZGVyTWV0YSB7XG4gIHJldHVybiB7XG4gICAgLi4uZmFpbE1ldGEoZW50aXR5VHlwZSwgZXJyb3IpLFxuICAgIC4uLmVudGl0eU1ldGEoZW50aXR5VHlwZSwgaWQpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW50aXR5U3VjY2Vzc01ldGEoXG4gIGVudGl0eVR5cGU6IHN0cmluZyxcbiAgaWQ6IEVudGl0eUlkXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdWNjZXNzTWV0YShlbnRpdHlUeXBlKSxcbiAgICAuLi5lbnRpdHlNZXRhKGVudGl0eVR5cGUsIGlkKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVudGl0eVJlc2V0TWV0YShcbiAgZW50aXR5VHlwZTogc3RyaW5nLFxuICBpZD86IEVudGl0eUlkXG4pOiBFbnRpdHlMb2FkZXJNZXRhIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5yZXNldE1ldGEoZW50aXR5VHlwZSksXG4gICAgLi4uZW50aXR5TWV0YShlbnRpdHlUeXBlLCBpZCksXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlMb2FkQWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcbiAgdHlwZSA9IEVOVElUWV9MT0FEX0FDVElPTjtcbiAgcmVhZG9ubHkgbWV0YTogRW50aXR5TG9hZGVyTWV0YTtcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogRW50aXR5SWQpIHtcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlMb2FkTWV0YShlbnRpdHlUeXBlLCBpZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGl0eUZhaWxBY3Rpb24gaW1wbGVtZW50cyBFbnRpdHlMb2FkZXJBY3Rpb24ge1xuICB0eXBlID0gRU5USVRZX0ZBSUxfQUNUSU9OO1xuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBFbnRpdHlJZCwgZXJyb3I/OiBhbnkpIHtcbiAgICB0aGlzLm1ldGEgPSBlbnRpdHlGYWlsTWV0YShlbnRpdHlUeXBlLCBpZCwgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlTdWNjZXNzQWN0aW9uIGltcGxlbWVudHMgRW50aXR5TG9hZGVyQWN0aW9uIHtcbiAgdHlwZSA9IEVOVElUWV9TVUNDRVNTX0FDVElPTjtcbiAgcmVhZG9ubHkgbWV0YTogRW50aXR5TG9hZGVyTWV0YTtcbiAgY29uc3RydWN0b3IoZW50aXR5VHlwZTogc3RyaW5nLCBpZDogRW50aXR5SWQsIHB1YmxpYyBwYXlsb2FkPzogYW55KSB7XG4gICAgdGhpcy5tZXRhID0gZW50aXR5U3VjY2Vzc01ldGEoZW50aXR5VHlwZSwgaWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlMb2FkZXJSZXNldEFjdGlvbiBpbXBsZW1lbnRzIEVudGl0eUxvYWRlckFjdGlvbiB7XG4gIHR5cGUgPSBFTlRJVFlfUkVTRVRfQUNUSU9OO1xuICByZWFkb25seSBtZXRhOiBFbnRpdHlMb2FkZXJNZXRhO1xuICBjb25zdHJ1Y3RvcihlbnRpdHlUeXBlOiBzdHJpbmcsIGlkOiBFbnRpdHlJZCkge1xuICAgIHRoaXMubWV0YSA9IGVudGl0eVJlc2V0TWV0YShlbnRpdHlUeXBlLCBpZCk7XG4gIH1cbn1cbiJdfQ==