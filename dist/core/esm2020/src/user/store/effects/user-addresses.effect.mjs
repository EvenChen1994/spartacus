/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { inject, Injectable } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap, tap } from 'rxjs/operators';
import { GlobalMessageType, } from '../../../global-message/index';
import { LoggerService } from '../../../logger';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/address/user-address.connector";
import * as i3 from "../../facade/user-address.service";
import * as i4 from "../../../global-message/index";
export class UserAddressesEffects {
    constructor(actions$, userAddressConnector, userAddressService, messageService) {
        this.actions$ = actions$;
        this.userAddressConnector = userAddressConnector;
        this.userAddressService = userAddressService;
        this.messageService = messageService;
        this.logger = inject(LoggerService);
        this.loadUserAddresses$ = createEffect(() => this.actions$.pipe(ofType(UserActions.LOAD_USER_ADDRESSES), map((action) => action.payload), switchMap((payload) => {
            return this.userAddressConnector.getAll(payload).pipe(map((addresses) => {
                return new UserActions.LoadUserAddressesSuccess(addresses);
            }), catchError((error) => of(new UserActions.LoadUserAddressesFail(normalizeHttpError(error, this.logger)))));
        })));
        this.addUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.ADD_USER_ADDRESS), map((action) => action.payload), mergeMap((payload) => {
            return this.userAddressConnector
                .add(payload.userId, payload.address)
                .pipe(map((data) => {
                return new UserActions.AddUserAddressSuccess(data);
            }), catchError((error) => of(new UserActions.AddUserAddressFail(normalizeHttpError(error, this.logger)))));
        })));
        this.updateUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.UPDATE_USER_ADDRESS), map((action) => action.payload), mergeMap((payload) => {
            return this.userAddressConnector
                .update(payload.userId, payload.addressId, payload.address)
                .pipe(map(() => {
                return new UserActions.UpdateUserAddressSuccess(payload);
            }), catchError((error) => {
                this.showGlobalMessage('addressForm.invalidAddress', GlobalMessageType.MSG_TYPE_ERROR);
                return of(new UserActions.UpdateUserAddressFail(normalizeHttpError(error, this.logger)));
            }));
        })));
        this.deleteUserAddress$ = createEffect(() => this.actions$.pipe(ofType(UserActions.DELETE_USER_ADDRESS), map((action) => action.payload), mergeMap((payload) => {
            return this.userAddressConnector
                .delete(payload.userId, payload.addressId)
                .pipe(map((data) => {
                return new UserActions.DeleteUserAddressSuccess(data);
            }), catchError((error) => of(new UserActions.DeleteUserAddressFail(normalizeHttpError(error, this.logger)))));
        })));
        /**
         *  Reload addresses and notify about add success
         */
        this.showGlobalMessageOnAddSuccess$ = createEffect(() => this.actions$.pipe(ofType(UserActions.ADD_USER_ADDRESS_SUCCESS), tap(() => {
            this.loadAddresses();
            this.showGlobalMessage('addressForm.userAddressAddSuccess');
        })), { dispatch: false });
        /**
         *  Reload addresses and notify about update success
         */
        this.showGlobalMessageOnUpdateSuccess$ = createEffect(() => this.actions$.pipe(ofType(UserActions.UPDATE_USER_ADDRESS_SUCCESS), map((action) => action.payload), tap((payload) => {
            this.loadAddresses();
            // don't show the message if just setting address as default
            if (Object.keys(payload?.address).length !== 1 ||
                !payload?.address?.defaultAddress) {
                this.showGlobalMessage('addressForm.userAddressUpdateSuccess');
            }
        })), { dispatch: false });
        /**
         *  Reload addresses and notify about delete success
         */
        this.showGlobalMessageOnDeleteSuccess$ = createEffect(() => this.actions$.pipe(ofType(UserActions.DELETE_USER_ADDRESS_SUCCESS), tap(() => {
            this.loadAddresses();
            this.showGlobalMessage('addressForm.userAddressDeleteSuccess');
        })), { dispatch: false });
    }
    /**
     * Show global confirmation message with provided text
     */
    showGlobalMessage(key, type) {
        this.messageService.add({ key }, type ?? GlobalMessageType.MSG_TYPE_CONFIRMATION);
    }
    loadAddresses() {
        this.userAddressService.loadAddresses();
    }
}
UserAddressesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserAddressesEffects, deps: [{ token: i1.Actions }, { token: i2.UserAddressConnector }, { token: i3.UserAddressService }, { token: i4.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
UserAddressesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserAddressesEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: UserAddressesEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserAddressConnector }, { type: i3.UserAddressService }, { type: i4.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,