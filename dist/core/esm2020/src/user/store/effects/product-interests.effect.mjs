/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { LoggerService } from '../../../logger';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/interests/user-interests.connector";
export class ProductInterestsEffect {
    constructor(actions$, userInterestsConnector) {
        this.actions$ = actions$;
        this.userInterestsConnector = userInterestsConnector;
        this.logger = inject(LoggerService);
        this.loadProductInteres$ = createEffect(() => this.actions$.pipe(ofType(UserActions.LOAD_PRODUCT_INTERESTS), map((action) => action.payload), switchMap((payload) => {
            return this.userInterestsConnector
                .getInterests(payload.userId, payload.pageSize, payload.currentPage, payload.sort, payload.productCode, payload.notificationType)
                .pipe(map((interests) => {
                return new UserActions.LoadProductInterestsSuccess(interests);
            }), catchError((error) => of(new UserActions.LoadProductInterestsFail(normalizeHttpError(error, this.logger)))));
        })));
        this.removeProductInterest$ = createEffect(() => this.actions$.pipe(ofType(UserActions.REMOVE_PRODUCT_INTEREST), map((action) => action.payload), switchMap((payload) => this.userInterestsConnector
            .removeInterest(payload.userId, payload.item)
            .pipe(switchMap((data) => [
            new UserActions.LoadProductInterests(payload.singleDelete
                ? {
                    userId: payload.userId,
                    productCode: payload.item.product?.code,
                    notificationType: payload.item.productInterestEntry?.[0].interestType,
                }
                : { userId: payload.userId }),
            new UserActions.RemoveProductInterestSuccess(data),
        ]), catchError((error) => of(new UserActions.RemoveProductInterestFail(normalizeHttpError(error, this.logger))))))));
        this.addProductInterest$ = createEffect(() => this.actions$.pipe(ofType(UserActions.ADD_PRODUCT_INTEREST), map((action) => action.payload), switchMap((payload) => this.userInterestsConnector
            .addInterest(payload.userId, payload.productCode, payload.notificationType)
            .pipe(switchMap((res) => [
            new UserActions.LoadProductInterests({
                userId: payload.userId,
                productCode: payload.productCode,
                notificationType: payload.notificationType,
            }),
            new UserActions.AddProductInterestSuccess(res),
        ]), catchError((error) => of(new UserActions.AddProductInterestFail(normalizeHttpError(error, this.logger))))))));
    }
}
ProductInterestsEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductInterestsEffect, deps: [{ token: i1.Actions }, { token: i2.UserInterestsConnector }], target: i0.ɵɵFactoryTarget.Injectable });
ProductInterestsEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductInterestsEffect });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProductInterestsEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserInterestsConnector }]; } });
//# sourceMappingURL=data:application/json;base64,