/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable, inject, isDevMode } from '@angular/core';
import { createEffect, ofType } from '@ngrx/effects';
import { EMPTY, of } from 'rxjs';
import { catchError, concatMap, filter, map, mergeMap, switchMap, tap, withLatestFrom, } from 'rxjs/operators';
import { AuthActions } from '../../../auth/index';
import { LoggerService } from '../../../logger';
import { UserActions } from '../../../user/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { AnonymousConsentsActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/anonymous-consent-templates.connector";
import * as i3 from "../../../auth/index";
import * as i4 from "../../config/anonymous-consents-config";
import * as i5 from "../../facade/index";
import * as i6 from "../../../user/facade/user-consent.service";
export class AnonymousConsentsEffects {
    isRequiredConsent(templateCode) {
        return Boolean(templateCode &&
            this.anonymousConsentsConfig.anonymousConsents?.requiredConsents?.includes(templateCode));
    }
    constructor(actions$, anonymousConsentTemplatesConnector, authService, anonymousConsentsConfig, anonymousConsentService, userConsentService, userIdService) {
        this.actions$ = actions$;
        this.anonymousConsentTemplatesConnector = anonymousConsentTemplatesConnector;
        this.authService = authService;
        this.anonymousConsentsConfig = anonymousConsentsConfig;
        this.anonymousConsentService = anonymousConsentService;
        this.userConsentService = userConsentService;
        this.userIdService = userIdService;
        this.logger = inject(LoggerService);
        this.checkConsentVersions$ = createEffect(() => this.actions$.pipe(ofType(AnonymousConsentsActions.ANONYMOUS_CONSENT_CHECK_UPDATED_VERSIONS), withLatestFrom(this.anonymousConsentService.getConsents()), concatMap(([_, currentConsents]) => {
            return this.anonymousConsentTemplatesConnector
                .loadAnonymousConsents()
                .pipe(map((newConsents) => {
                if (!newConsents) {
                    if (isDevMode()) {
                        this.logger.warn('No consents were loaded. Please check the Spartacus documentation as this could be a back-end configuration issue.');
                    }
                    return false;
                }
                const currentConsentVersions = currentConsents.map((consent) => consent.templateVersion);
                const newConsentVersions = newConsents.map((consent) => consent.templateVersion);
                return this.detectUpdatedVersion(currentConsentVersions, newConsentVersions);
            }), switchMap((updated) => updated
                ? of(new AnonymousConsentsActions.LoadAnonymousConsentTemplates())
                : EMPTY), catchError((error) => of(new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(normalizeHttpError(error, this.logger)))));
        })));
        this.loadAnonymousConsentTemplates$ = createEffect(() => this.actions$.pipe(ofType(AnonymousConsentsActions.LOAD_ANONYMOUS_CONSENT_TEMPLATES), withLatestFrom(this.anonymousConsentService.getTemplates()), concatMap(([_, currentConsentTemplates]) => this.anonymousConsentTemplatesConnector
            .loadAnonymousConsentTemplates()
            .pipe(mergeMap((newConsentTemplates) => {
            let updated = false;
            if (currentConsentTemplates &&
                currentConsentTemplates.length !== 0) {
                updated = this.anonymousConsentService.detectUpdatedTemplates(currentConsentTemplates, newConsentTemplates);
            }
            return [
                new AnonymousConsentsActions.LoadAnonymousConsentTemplatesSuccess(newConsentTemplates),
                new AnonymousConsentsActions.ToggleAnonymousConsentTemplatesUpdated(updated),
            ];
        }), catchError((error) => of(new AnonymousConsentsActions.LoadAnonymousConsentTemplatesFail(normalizeHttpError(error, this.logger))))))));
        // TODO(#9416): This won't work with flow different than `Resource Owner Password Flow` which involves redirect (maybe in popup in will work)
        this.transferAnonymousConsentsToUser$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN), filter(() => Boolean(this.anonymousConsentsConfig.anonymousConsents)), withLatestFrom(this.actions$.pipe(ofType(UserActions.REGISTER_USER_SUCCESS))), filter(([, registerAction]) => Boolean(registerAction)), switchMap(() => this.anonymousConsentService.getConsents().pipe(withLatestFrom(this.userIdService.getUserId(), this.anonymousConsentService.getTemplates(), this.authService.isUserLoggedIn()), filter(([, , , loggedIn]) => loggedIn), concatMap(([consents, userId, templates, _loggedIn]) => {
            const actions = [];
            for (const consent of consents) {
                if (this.anonymousConsentService.isConsentGiven(consent) &&
                    !this.isRequiredConsent(consent.templateCode)) {
                    for (const template of templates) {
                        if (template.id === consent.templateCode) {
                            actions.push(new UserActions.TransferAnonymousConsent({
                                userId,
                                consentTemplateId: template.id,
                                consentTemplateVersion: template.version,
                            }));
                            break;
                        }
                    }
                }
            }
            if (actions.length > 0) {
                return actions;
            }
            return EMPTY;
        })))));
        this.giveRequiredConsentsToUser$ = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN), filter((action) => Boolean(this.anonymousConsentsConfig.anonymousConsents &&
            this.anonymousConsentsConfig.anonymousConsents.requiredConsents &&
            action)), concatMap(() => this.userConsentService.getConsentsResultSuccess().pipe(withLatestFrom(this.userIdService.getUserId(), this.userConsentService.getConsents(), this.authService.isUserLoggedIn()), filter(([, , , loggedIn]) => loggedIn), tap(([loaded, _userId, _templates, _loggedIn]) => {
            if (!loaded) {
                this.userConsentService.loadConsents();
            }
        }), map(([_loaded, userId, templates, _loggedIn]) => {
            return { userId, templates };
        }), concatMap(({ userId, templates }) => {
            const actions = [];
            for (const template of templates) {
                if (this.userConsentService.isConsentWithdrawn(template.currentConsent) &&
                    this.isRequiredConsent(template.id)) {
                    actions.push(new UserActions.GiveUserConsent({
                        userId,
                        consentTemplateId: template.id,
                        consentTemplateVersion: template.version,
                    }));
                }
            }
            return actions.length > 0 ? actions : EMPTY;
        })))));
    }
    /**
     * Compares the given versions and determines if there's a mismatch,
     * in which case `true` is returned.
     *
     * @param currentVersions versions of the current consents
     * @param newVersions versions of the new consents
     */
    detectUpdatedVersion(currentVersions, newVersions) {
        if (currentVersions.length !== newVersions.length) {
            return true;
        }
        for (let i = 0; i < newVersions.length; i++) {
            if (currentVersions[i] !== newVersions[i]) {
                return true;
            }
        }
        return false;
    }
}
AnonymousConsentsEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AnonymousConsentsEffects, deps: [{ token: i1.Actions }, { token: i2.AnonymousConsentTemplatesConnector }, { token: i3.AuthService }, { token: i4.AnonymousConsentsConfig }, { token: i5.AnonymousConsentsService }, { token: i6.UserConsentService }, { token: i3.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
AnonymousConsentsEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AnonymousConsentsEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: AnonymousConsentsEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.AnonymousConsentTemplatesConnector }, { type: i3.AuthService }, { type: i4.AnonymousConsentsConfig }, { type: i5.AnonymousConsentsService }, { type: i6.UserConsentService }, { type: i3.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,