{"version":3,"file":"spartacus-pdf-invoices-core.mjs","sources":["../../../feature-libs/pdf-invoices/core/connectors/converters.ts","../../../feature-libs/pdf-invoices/core/connectors/pdf-invoices.adapter.ts","../../../feature-libs/pdf-invoices/core/connectors/pdf-invoices.connector.ts","../../../feature-libs/pdf-invoices/core/connectors/index.ts","../../../feature-libs/pdf-invoices/core/http-interceptors/bad-request/pdf-invoices-badrequest.handler.ts","../../../feature-libs/pdf-invoices/core/http-interceptors/index.ts","../../../feature-libs/pdf-invoices/core/services/pdf-invoices.service.ts","../../../feature-libs/pdf-invoices/core/services/index.ts","../../../feature-libs/pdf-invoices/core/pdf-invoices-core.module.ts","../../../feature-libs/pdf-invoices/core/public_api.ts","../../../feature-libs/pdf-invoices/core/spartacus-pdf-invoices-core.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { OrderInvoiceList } from '@spartacus/pdf-invoices/root';\n\nexport const PDF_INVOICES_LIST_INVOICES_NORMALIZER = new InjectionToken<\n  Converter<any, OrderInvoiceList>\n>('PDFInvoicesListInvoices');\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  InvoiceQueryParams,\n  OrderInvoiceList,\n} from '@spartacus/pdf-invoices/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class PDFInvoicesAdapter {\n  /**\n   * Abstract method used to get the PDF invoices for an order\n   * @param userId Logged in user id\n   * @param orderId If provided, it will be used, otherwise it will use orderId from router state.\n   * @param queryParams Additional query parameters used in the API request\n   */\n  abstract getInvoicesForOrder(\n    userId: string,\n    orderId: string,\n    queryParams: InvoiceQueryParams\n  ): Observable<OrderInvoiceList>;\n\n  /**\n   * Returns the document blob for given invoiceId, orderId and externalSystemId\n   * @param userId Logged in user id\n   * @param orderId If provided, it will be used, otherwise it will use orderId from router state.\n   * @param invoiceId The id of the invoice to be downloaded\n   * @param externalSystemId External system that provides the invoice PDF\n   */\n  abstract getInvoicePDF(\n    userId: string,\n    orderId: string,\n    invoiceId: string,\n    externalSystemId?: string\n  ): Observable<Blob>;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n  InvoiceQueryParams,\n  OrderInvoiceList,\n} from '@spartacus/pdf-invoices/root';\nimport { Observable } from 'rxjs';\nimport { PDFInvoicesAdapter } from './pdf-invoices.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PDFInvoicesConnector {\n  constructor(protected adapter: PDFInvoicesAdapter) {}\n\n  public getInvoicesForOrder(\n    userId: string,\n    orderId: string,\n    queryParams: InvoiceQueryParams\n  ): Observable<OrderInvoiceList> {\n    return this.adapter.getInvoicesForOrder(userId, orderId, queryParams);\n  }\n\n  public getInvoicePDF(\n    userId: string,\n    orderId: string,\n    invoiceId: string,\n    externalSystemId?: string\n  ): Observable<Blob> {\n    return this.adapter.getInvoicePDF(\n      userId,\n      orderId,\n      invoiceId,\n      externalSystemId\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './converters';\nexport * from './pdf-invoices.adapter';\nexport * from './pdf-invoices.connector';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HttpErrorResponse, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ErrorModel,\n  GlobalMessageType,\n  HttpErrorHandler,\n  HttpResponseStatus,\n  Priority,\n} from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PDFInvoicesBadRequestHandler extends HttpErrorHandler {\n  responseStatus = HttpResponseStatus.BAD_REQUEST;\n\n  hasMatch(errorResponse: HttpErrorResponse): boolean {\n    return (\n      super.hasMatch(errorResponse) && this.getErrors(errorResponse)?.length > 0\n    );\n  }\n\n  handleError(request: HttpRequest<any>, response: HttpErrorResponse): void {\n    this.handleInvoicesListError(request, response);\n    this.handlePDFDownloadError(request, response);\n  }\n\n  protected handleInvoicesListError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((e) => this.isInvoicesListNotFoundError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          { key: 'pdfInvoices.invoicesLoadingError' },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected handlePDFDownloadError(\n    _request: HttpRequest<any>,\n    response: HttpErrorResponse\n  ) {\n    this.getErrors(response)\n      .filter((e) => this.isDownloadInvoiceError(e))\n      .forEach(() => {\n        this.globalMessageService.add(\n          {\n            key: 'pdfInvoices.downloadPDFError',\n          },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      });\n  }\n\n  protected isInvoicesListNotFoundError(error: ErrorModel): boolean {\n    return (\n      error?.type === 'UnknownIdentifierError' &&\n      error?.message != null &&\n      error?.message.includes('Order')\n    );\n  }\n\n  protected isDownloadInvoiceError(error: ErrorModel): boolean {\n    return (\n      error?.type === 'UnknownIdentifierError' &&\n      error?.message != null &&\n      error?.message.includes('Invoice')\n    );\n  }\n\n  protected getErrors(response: HttpErrorResponse): ErrorModel[] {\n    return (response.error?.errors).filter(\n      (error: any) =>\n        this.isInvoicesListNotFoundError(error) ||\n        this.isDownloadInvoiceError(error)\n    );\n  }\n\n  getPriority(): Priority {\n    return Priority.NORMAL;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './bad-request/pdf-invoices-badrequest.handler';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { RoutingService, UserIdService } from '@spartacus/core';\nimport {\n  InvoiceQueryParams,\n  OrderInvoiceList,\n  PDFInvoicesFacade,\n} from '@spartacus/pdf-invoices/root';\nimport { Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';\nimport { PDFInvoicesConnector } from '../connectors/pdf-invoices.connector';\n\n@Injectable()\nexport class PDFInvoicesService implements PDFInvoicesFacade, OnDestroy {\n  protected subscriptions = new Subscription();\n\n  userId: string;\n  orderId: string;\n\n  constructor(\n    private routingService: RoutingService,\n    private userIdService: UserIdService,\n    protected pdfInvoicesConnector: PDFInvoicesConnector\n  ) {\n    this.subscriptions.add(\n      this.userIdService\n        .takeUserId()\n        .subscribe((userId) => (this.userId = userId))\n    );\n    this.subscriptions.add(\n      this.getOrderId().subscribe((orderId) => (this.orderId = orderId))\n    );\n  }\n\n  getInvoicesForOrder(\n    queryParams: InvoiceQueryParams,\n    userId?: string,\n    orderId?: string\n  ): Observable<OrderInvoiceList> {\n    return this.pdfInvoicesConnector\n      .getInvoicesForOrder(\n        userId || this.userId,\n        orderId || this.orderId,\n        queryParams\n      )\n      .pipe(shareReplay(1));\n  }\n\n  getInvoicePDF(\n    invoiceId: string,\n    externalSystemId?: string,\n    userId?: string,\n    orderId?: string\n  ): Observable<Blob> {\n    return this.pdfInvoicesConnector\n      .getInvoicePDF(\n        userId || this.userId,\n        orderId || this.orderId,\n        invoiceId,\n        externalSystemId\n      )\n      .pipe(shareReplay(1));\n  }\n\n  protected getOrderId(): Observable<string> {\n    return this.routingService.getRouterState().pipe(\n      map((routingData) => routingData.state.params),\n      distinctUntilChanged(),\n      map((params) => params.orderCode)\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './pdf-invoices.service';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { HttpErrorHandler } from '@spartacus/core';\nimport { PDFInvoicesFacade } from '@spartacus/pdf-invoices/root';\nimport { PDFInvoicesConnector } from './connectors/pdf-invoices.connector';\nimport { PDFInvoicesBadRequestHandler } from './http-interceptors/bad-request/pdf-invoices-badrequest.handler';\nimport { PDFInvoicesService } from './services';\n\n@NgModule({\n  imports: [],\n  providers: [\n    PDFInvoicesService,\n    {\n      provide: PDFInvoicesFacade,\n      useExisting: PDFInvoicesService,\n    },\n    {\n      provide: HttpErrorHandler,\n      useExisting: PDFInvoicesBadRequestHandler,\n      multi: true,\n    },\n    PDFInvoicesConnector,\n  ],\n})\nexport class PDFInvoicesCoreModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './connectors/index';\nexport * from './http-interceptors/index';\nexport * from './pdf-invoices-core.module';\nexport * from './services/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.PDFInvoicesAdapter","i2.PDFInvoicesConnector"],"mappings":"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"}