/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { defaultRenderingStrategyResolver } from './rendering-strategy-resolver';
import { defaultRenderingStrategyResolverOptions } from './rendering-strategy-resolver-options';
export var RenderingStrategy;
(function (RenderingStrategy) {
    RenderingStrategy[RenderingStrategy["ALWAYS_CSR"] = -1] = "ALWAYS_CSR";
    RenderingStrategy[RenderingStrategy["DEFAULT"] = 0] = "DEFAULT";
    RenderingStrategy[RenderingStrategy["ALWAYS_SSR"] = 1] = "ALWAYS_SSR";
})(RenderingStrategy || (RenderingStrategy = {}));
export const defaultSsrOptimizationOptions = {
    concurrency: 10,
    timeout: 3000,
    forcedSsrTimeout: 60000,
    maxRenderTime: 300000,
    reuseCurrentRendering: true,
    debug: false,
    renderingStrategyResolver: defaultRenderingStrategyResolver(defaultRenderingStrategyResolverOptions),
    //CXSPA-3680 - set ExpressServerLogger as default
    //logger: new ExpressServerLogger(),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NyLW9wdGltaXphdGlvbi1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS1saWJzL3NldHVwL3Nzci9vcHRpbWl6ZWQtZW5naW5lL3Nzci1vcHRpbWl6YXRpb24tb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBSUgsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDakYsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUE0SGhHLE1BQU0sQ0FBTixJQUFZLGlCQUlYO0FBSkQsV0FBWSxpQkFBaUI7SUFDM0Isc0VBQWUsQ0FBQTtJQUNmLCtEQUFXLENBQUE7SUFDWCxxRUFBYyxDQUFBO0FBQ2hCLENBQUMsRUFKVyxpQkFBaUIsS0FBakIsaUJBQWlCLFFBSTVCO0FBRUQsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQTJCO0lBQ25FLFdBQVcsRUFBRSxFQUFFO0lBQ2YsT0FBTyxFQUFFLElBQUs7SUFDZCxnQkFBZ0IsRUFBRSxLQUFNO0lBQ3hCLGFBQWEsRUFBRSxNQUFPO0lBQ3RCLHFCQUFxQixFQUFFLElBQUk7SUFDM0IsS0FBSyxFQUFFLEtBQUs7SUFDWix5QkFBeUIsRUFBRSxnQ0FBZ0MsQ0FDekQsdUNBQXVDLENBQ3hDO0lBQ0QsaURBQWlEO0lBQ2pELG9DQUFvQztDQUNyQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgRXhwcmVzc1NlcnZlckxvZ2dlciB9IGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBkZWZhdWx0UmVuZGVyaW5nU3RyYXRlZ3lSZXNvbHZlciB9IGZyb20gJy4vcmVuZGVyaW5nLXN0cmF0ZWd5LXJlc29sdmVyJztcbmltcG9ydCB7IGRlZmF1bHRSZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyT3B0aW9ucyB9IGZyb20gJy4vcmVuZGVyaW5nLXN0cmF0ZWd5LXJlc29sdmVyLW9wdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNzck9wdGltaXphdGlvbk9wdGlvbnMge1xuICAvKipcbiAgICogVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgU1NSIHJlbmRlcmluZyB0byBoYXBwZW4uXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBFbmFibGUgaW4tbWVtb3J5IGNhY2hlIGZvciBwcmUtcmVuZGVyZWQgdXJscy5cbiAgICpcbiAgICogSWYgZGlzYWJsZWQsIHRoZSBjYWNoZSB3aWxsIHN0aWxsIGJlIHVzZWQgdG8gdGVtcG9yYXJpbHkgc3RvcmVcbiAgICogcmVuZGVycyBmaW5pc2hlZCBhZnRlciBjc3IgZmFsbGJhY2sgaW4gb3JkZXIgdG8gc2VydmUgdGhlbSB3aXRoXG4gICAqIG5leHQgcmVxdWVzdCBvbmx5LlxuICAgKi9cbiAgY2FjaGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBMaW1pdCB0aGUgY2FjaGUgc2l6ZVxuICAgKlxuICAgKiBTcGVjaWZpZWQgbnVtYmVyIG9mIGVudHJpZXMgdGhhdCB3aWxsIGJlIGtlcHQgaW4gY2FjaGUsIGFsbG93cyB0byBrZWVwXG4gICAqIG1lbW9yeSB1c2FnZSB1bmRlciBjb250cm9sLlxuICAgKlxuICAgKiBDYW4gYWxzbyBiZSB1c2Ugd2hlbiBgY2FjaGVgIG9wdGlvbiBpcyBzZXQgdG8gZmFsc2UuIEl0IHdpbGwgdGhlbiBsaW1pdCB0aGVcbiAgICogbnVtYmVyIG9mIHJlbmRlcnMgdGhhdCB0aW1lb3V0cyBhbmQgYXJlIGtlcHQgaW4gdGVtcG9yYXJ5IGNhY2hlLCB3YWl0aW5nXG4gICAqIHRvIGJlIHNlcnZlZCB3aXRoIG5leHQgcmVxdWVzdC5cbiAgICovXG4gIGNhY2hlU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogTGltaXQgbnVtYmVyIG9mIGNvbmN1cnJlbnQgcmVuZGVyaW5nXG4gICAqL1xuICBjb25jdXJyZW5jeT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGltZSBpbiBtaWxsaXNlY29uZHMgYWZ0ZXIgcHJlcmVuZGVyZWQgcGFnZSBpcyBiZWNvbWluZyBzdGFsZSBhbmQgc2hvdWxkXG4gICAqIGJlIHJlbmRlcmVkIGFnYWluLlxuICAgKi9cbiAgdHRsPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbGxvd3Mgb3ZlcnJpZGluZyBkZWZhdWx0IGtleSBnZW5lcmF0b3IgZm9yIGN1c3RvbSBkaWZmZXJlbnRpYXRpbmdcbiAgICogYmV0d2VlbiByZW5kZXJlZCBwYWdlcy4gQnkgZGVmYXVsdCBpdCB1c2VzIHRoZSBmdWxsIHJlcXVlc3QgVVJMLlxuICAgKlxuICAgKiBAcGFyYW0gcmVxXG4gICAqL1xuICByZW5kZXJLZXlSZXNvbHZlcj86IChyZXE6IFJlcXVlc3QpID0+IHN0cmluZztcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgZm9yIHRoZSBkZWZpbml0aW9uIG9mIGEgY3VzdG9tIHJlbmRlcmluZyBzdHJhdGVneSBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzLlxuICAgKiBCeSBkZWZhdWx0LCB3ZSBwcm92aWRlIGEgZGVmYXVsdFJlbmRlcmluZ1N0cmF0ZWd5UmVzb2x2ZXIsXG4gICAqIHdoaWNoIGhhcyBhIGRlZmF1bHQgcGFyYW1ldGVyIGRlZmF1bHRSZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyT3B0aW9ucy5cbiAgICogVGhpcyBkZWZhdWx0IG9wdGlvbiBkaXNhYmxlcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgKFNTUikgb24gcGFnZXMgc3VjaCBhcyAnY2hlY2tvdXQnIGFuZCAnbXktYWNjb3VudCcuXG4gICAqXG4gICAqIEBwYXJhbSByZXFcbiAgICovXG4gIHJlbmRlcmluZ1N0cmF0ZWd5UmVzb2x2ZXI/OiAocmVxOiBSZXF1ZXN0KSA9PiBSZW5kZXJpbmdTdHJhdGVneTtcblxuICAvKipcbiAgICogVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgcmVuZGVyaW5nIHdoZW4gU1NSX0FMV0FZUyByZW5kZXIgc3RyYXRlZ3kgaXMgc2V0IGZvciB0aGUgcmVxdWVzdC5cbiAgICogRGVmYXVsdCB2YWx1ZSBpcyA2MDAwMCBtaWxsaXNlY29uZHMgKDEgbWludXRlKS5cbiAgICovXG4gIGZvcmNlZFNzclRpbWVvdXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIGZvciBob3cgbG9uZyB0aGUgcmVuZGVyIGlzIGV4cGVjdGVkIHRvIGZpbmlzaCBpbi5cbiAgICogRXhjZWVkaW5nIHRoaXMgdGltZW91dCB3aWxsIGRlY3JlYXNlIHRoZSBjb25jdXJyZW5jeSBsaW1pdFxuICAgKiBhbmQgYWxsb3cgZm9yIHRoZSBuZXcgcmVxdWVzdCB0byBiZSBzZXJ2ZXItc2lkZSByZW5kZXJlZC5cbiAgICogSG93ZXZlciwgdGhpcyBtYXkgbm90IHJlbGVhc2UgdGhlIHJlbmRlcmluZyByZXNvdXJjZXMgZm9yIHRoZSBoYW5naW5nIHJlbmRlcixcbiAgICogd2hpY2ggbWF5IGNhdXNlIGFkZGl0aW9uYWwgbWVtb3J5IHVzYWdlIG9uIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEl0IHdpbGwgbG9nIHdoaWNoIHJlbmRlciBpcyBleGNlZWRpbmcgdGhlIHJlbmRlciB0aW1lLFxuICAgKiB3aGljaCBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZyBpc3N1ZXMuXG4gICAqXG4gICAqIFRoZSB2YWx1ZSBzaG91bGQgYWx3YXlzIGJlIGhpZ2hlciB0aGFuIGB0aW1lb3V0YCBhbmQgYGZvcmNlZFNzclRpbWVvdXRgLlxuICAgKlxuICAgKiBEZWZhdWx0IHZhbHVlIGlzIDMwMDAwMCBtaWxsaXNlY29uZHMgKDUgbWludXRlcykuXG4gICAqL1xuICBtYXhSZW5kZXJUaW1lPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbnN0ZWFkIG9mIGltbWVkaWF0ZWx5IGZhbGxpbmcgYmFjayB0byBDU1JcbiAgICogd2hpbGUgYSByZW5kZXIgZm9yIHRoZSBzYW1lIGtleSBpcyBpbiBwcm9ncmVzcywgdGhpcyBvcHRpb24gd2lsbCBtYWtlXG4gICAqIHRoZSBzdWJzZXF1ZW50IHJlcXVlc3RzIGZvciB0aGlzIGtleSB3YWl0IGZvciB0aGUgY3VycmVudCByZW5kZXIuXG4gICAqXG4gICAqIEFsbCBwZW5kaW5nIHJlcXVlc3RzIHRoYXQgZm9yIHRoZSBzYW1lIHJlbmRlcmluZyBrZXkgd2lsbFxuICAgKiB0YWtlIHVwIG9ubHkgX29uZV8gY29uY3VycmVuY3kgc2xvdCwgYmVjYXVzZSB0aGVyZSBpcyBvbmx5XG4gICAqIG9uZSBhY3R1YWwgcmVuZGVyaW5nIHRhc2sgYmVpbmcgcGVyZm9ybWVkLlxuICAgKlxuICAgKiBFYWNoIHJlcXVlc3QgaW5kZXBlbmRlbnRseSBob25vcnMgdGhlIGB0aW1lb3V0YCBvcHRpb24uXG4gICAqIEUuZy4sIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgc2V0dXAgd2hlcmUgYHRpbWVvdXRgIG9wdGlvblxuICAgKiBpcyBzZXQgdG8gM3MsIGFuZCB0aGUgZ2l2ZW4gcmVxdWVzdCB0YWtlcyA0cyB0byByZW5kZXIuXG4gICAqIFRoZSBmbG93IGlzIGFzIGZvbGxvd3M6XG4gICAqXG4gICAqIC0gMXN0IHJlcXVlc3QgYXJyaXZlcyBhbmQgdHJpZ2dlcnMgdGhlIFNTUi5cbiAgICogLSAybmQgcmVxdWVzdCBmb3IgdGhlIHNhbWUgVVJMIGFycml2ZXMgMnMgYWZ0ZXIgdGhlIDFzdCBvbmUuXG4gICAqICAgIEluc3RlYWQgb2YgZmFsbGluZyBiYWNrIHRvIENTUiwgaXQgd2FpdHMgKHdpdGggaXRzIG93biB0aW1lb3V0KVxuICAgKiAgICBmb3IgdGhlIHJlbmRlciBvZiB0aGUgZmlyc3QgcmVxdWVzdC5cbiAgICogLSAxc3QgcmVxdWVzdCB0aW1lcyBvdXQgYWZ0ZXIgM3MsIGFuZCBmYWxscyBiYWNrIHRvIENTUi5cbiAgICogLSBvbmUgc2Vjb25kIGFmdGVyIHRoZSB0aW1lb3V0LCB0aGUgY3VycmVudCByZW5kZXIgZmluaXNoZXMuXG4gICAqIC0gdGhlIDJuZCByZXF1ZXN0IHJldHVybnMgU1NSIGFmdGVyIG9ubHkgMnMgb2Ygd2FpdGluZy5cbiAgICovXG4gIHJldXNlQ3VycmVudFJlbmRlcmluZz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBkZXRhaWxlZCBsb2dzIGZvciB0cm91Ymxlc2hvb3RpbmcgcHJvYmxlbXNcbiAgICovXG4gIGRlYnVnPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ29uZmlnIGZvciBpbXByb3ZpbmcgbG9nZ2VkIG1lc3NhZ2VzIHdpdGggY29udGV4dCBhbmQgSlNPTiBzdHJ1Y3R1cmUuXG4gICAqXG4gICAqIEl0IGVuaGFuY2VzIHRoZSBsb2dzIGluIFNTUiBieSBhZGRpbmcgY29udGV4dCwgaW5jbHVkaW5nIHRoZSByZXF1ZXN0J3MgZGV0YWlscyxcbiAgICogYW5kIHN0cnVjdHVyaW5nIHRoZW0gYXMgSlNPTi5cbiAgICpcbiAgICogVGhlIGBsb2dnZXJgIHByb3BlcnR5IGlzIG9wdGlvbmFsIGFuZCBhY2NlcHRzIHR3byB2YWx1ZXM6XG4gICAqIC0gYHRydWVgOiAgICAgICAgIEVuYWJsZXMgdGhlIGRlZmF1bHQgbG9nZ2VyIGFuZCBlbmhhbmNlcyB0aGUgbG9ncy5cbiAgICogLSBgRXhwcmVzc1NlcnZlckxvZ2dlcmA6IEludGVycHJldHMgdGhlIGdpdmVuIGBFeHByZXNzU2VydmVyTG9nZ2VyYCBhcyBhIGN1c3RvbSBsb2dnZXJcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIGxvZ2dlciBpcyBkaXNhYmxlZCwgbWVhbmluZyB0aGF0IGxvZ3MgaW4gU1NSIGFyZSBub3QgZW5oYW5jZWQuXG4gICAqL1xuICBsb2dnZXI/OiB0cnVlIHwgRXhwcmVzc1NlcnZlckxvZ2dlcjsgLy9DWFNQQS0zNjgwIC0gYWxsb3cgb25seSBwcm92aWRpbmcgRXhwcmVzc1NlcnZlckxvZ2dlciBpbXBsZW1lbnRhdGlvbnNcbn1cblxuZXhwb3J0IGVudW0gUmVuZGVyaW5nU3RyYXRlZ3kge1xuICBBTFdBWVNfQ1NSID0gLTEsXG4gIERFRkFVTFQgPSAwLFxuICBBTFdBWVNfU1NSID0gMSxcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTc3JPcHRpbWl6YXRpb25PcHRpb25zOiBTc3JPcHRpbWl6YXRpb25PcHRpb25zID0ge1xuICBjb25jdXJyZW5jeTogMTAsXG4gIHRpbWVvdXQ6IDNfMDAwLFxuICBmb3JjZWRTc3JUaW1lb3V0OiA2MF8wMDAsXG4gIG1heFJlbmRlclRpbWU6IDMwMF8wMDAsXG4gIHJldXNlQ3VycmVudFJlbmRlcmluZzogdHJ1ZSxcbiAgZGVidWc6IGZhbHNlLFxuICByZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyOiBkZWZhdWx0UmVuZGVyaW5nU3RyYXRlZ3lSZXNvbHZlcihcbiAgICBkZWZhdWx0UmVuZGVyaW5nU3RyYXRlZ3lSZXNvbHZlck9wdGlvbnNcbiAgKSxcbiAgLy9DWFNQQS0zNjgwIC0gc2V0IEV4cHJlc3NTZXJ2ZXJMb2dnZXIgYXMgZGVmYXVsdFxuICAvL2xvZ2dlcjogbmV3IEV4cHJlc3NTZXJ2ZXJMb2dnZXIoKSxcbn07XG4iXX0=