/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { RenderingStrategy } from './ssr-optimization-options';
const hasExcludedParams = (request, excludedParams) => {
    const params = request.query
        ? Object.getOwnPropertyNames(request.query)
        : [];
    if (!excludedParams) {
        return false;
    }
    return excludedParams.some((excludedParam) => params.some((param) => excludedParam === param));
};
const hasExcludedUrl = (request, excludedUrls) => {
    return request.url && excludedUrls
        ? excludedUrls.some((url) => request.url.search(url) > -1)
        : false;
};
const shouldFallbackToCsr = (request, { excludedParams, excludedUrls }) => {
    return (hasExcludedParams(request, excludedParams) ||
        hasExcludedUrl(request, excludedUrls));
};
/**
 * Creates a rendering strategy resolver function with the specified options.
 *
 * @function
 * @param  options - The options to configure the rendering strategy resolver.
 * @param [options.excludedUrls] - An optional array of URLs for which server-side rendering (SSR) should be disabled.
 * @param [options.excludedParams] - An optional array of Query parameters for which SSR should be disabled.
 * @returns A rendering strategy resolver function that takes a Request object
 * as a parameter and returns the rendering strategy to be applied for the request, which can be either
 * `RenderingStrategy.ALWAYS_CSR` or `RenderingStrategy.DEFAULT`.
 */
export const defaultRenderingStrategyResolver = (options) => (request) => {
    return shouldFallbackToCsr(request, options)
        ? RenderingStrategy.ALWAYS_CSR
        : RenderingStrategy.DEFAULT;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyaW5nLXN0cmF0ZWd5LXJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vY29yZS1saWJzL3NldHVwL3Nzci9vcHRpbWl6ZWQtZW5naW5lL3JlbmRlcmluZy1zdHJhdGVneS1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBR0gsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHL0QsTUFBTSxpQkFBaUIsR0FBRyxDQUN4QixPQUFnQixFQUNoQixjQUFvQyxFQUMzQixFQUFFO0lBQ1gsTUFBTSxNQUFNLEdBQWEsT0FBTyxDQUFDLEtBQUs7UUFDcEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFUCxJQUFJLENBQUMsY0FBYyxFQUFFO1FBQ25CLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFxQixFQUFFLEVBQUUsQ0FDbkQsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQWEsRUFBVyxFQUFFLENBQUMsYUFBYSxLQUFLLEtBQUssQ0FBQyxDQUNqRSxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxjQUFjLEdBQUcsQ0FDckIsT0FBZ0IsRUFDaEIsWUFBa0MsRUFDbEMsRUFBRTtJQUNGLE9BQU8sT0FBTyxDQUFDLEdBQUcsSUFBSSxZQUFZO1FBQ2hDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUMxQixPQUFnQixFQUNoQixFQUFFLGNBQWMsRUFBRSxZQUFZLEVBQW9DLEVBQ2xFLEVBQUU7SUFDRixPQUFPLENBQ0wsaUJBQWlCLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQztRQUMxQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUN0QyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUMzQyxDQUFDLE9BQXlDLEVBQUUsRUFBRSxDQUM5QyxDQUFDLE9BQWdCLEVBQXFCLEVBQUU7SUFDdEMsT0FBTyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVO1FBQzlCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7QUFDaEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjMgU0FQIFNwYXJ0YWN1cyB0ZWFtIDxzcGFydGFjdXMtdGVhbUBzYXAuY29tPlxuICpcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUmVuZGVyaW5nU3RyYXRlZ3kgfSBmcm9tICcuL3Nzci1vcHRpbWl6YXRpb24tb3B0aW9ucyc7XG5pbXBvcnQgeyBSZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyT3B0aW9ucyB9IGZyb20gJy4vcmVuZGVyaW5nLXN0cmF0ZWd5LXJlc29sdmVyLW9wdGlvbnMnO1xuXG5jb25zdCBoYXNFeGNsdWRlZFBhcmFtcyA9IChcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgZXhjbHVkZWRQYXJhbXM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkXG4pOiBib29sZWFuID0+IHtcbiAgY29uc3QgcGFyYW1zOiBzdHJpbmdbXSA9IHJlcXVlc3QucXVlcnlcbiAgICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHJlcXVlc3QucXVlcnkpXG4gICAgOiBbXTtcblxuICBpZiAoIWV4Y2x1ZGVkUGFyYW1zKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4Y2x1ZGVkUGFyYW1zLnNvbWUoKGV4Y2x1ZGVkUGFyYW06IHN0cmluZykgPT5cbiAgICBwYXJhbXMuc29tZSgocGFyYW06IHN0cmluZyk6IGJvb2xlYW4gPT4gZXhjbHVkZWRQYXJhbSA9PT0gcGFyYW0pXG4gICk7XG59O1xuXG5jb25zdCBoYXNFeGNsdWRlZFVybCA9IChcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgZXhjbHVkZWRVcmxzOiBzdHJpbmdbXSB8IHVuZGVmaW5lZFxuKSA9PiB7XG4gIHJldHVybiByZXF1ZXN0LnVybCAmJiBleGNsdWRlZFVybHNcbiAgICA/IGV4Y2x1ZGVkVXJscy5zb21lKCh1cmwpID0+IHJlcXVlc3QudXJsLnNlYXJjaCh1cmwpID4gLTEpXG4gICAgOiBmYWxzZTtcbn07XG5cbmNvbnN0IHNob3VsZEZhbGxiYWNrVG9Dc3IgPSAoXG4gIHJlcXVlc3Q6IFJlcXVlc3QsXG4gIHsgZXhjbHVkZWRQYXJhbXMsIGV4Y2x1ZGVkVXJscyB9OiBSZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyT3B0aW9uc1xuKSA9PiB7XG4gIHJldHVybiAoXG4gICAgaGFzRXhjbHVkZWRQYXJhbXMocmVxdWVzdCwgZXhjbHVkZWRQYXJhbXMpIHx8XG4gICAgaGFzRXhjbHVkZWRVcmwocmVxdWVzdCwgZXhjbHVkZWRVcmxzKVxuICApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmVuZGVyaW5nIHN0cmF0ZWd5IHJlc29sdmVyIGZ1bmN0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBvcHRpb25zLlxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtICBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gY29uZmlndXJlIHRoZSByZW5kZXJpbmcgc3RyYXRlZ3kgcmVzb2x2ZXIuXG4gKiBAcGFyYW0gW29wdGlvbnMuZXhjbHVkZWRVcmxzXSAtIEFuIG9wdGlvbmFsIGFycmF5IG9mIFVSTHMgZm9yIHdoaWNoIHNlcnZlci1zaWRlIHJlbmRlcmluZyAoU1NSKSBzaG91bGQgYmUgZGlzYWJsZWQuXG4gKiBAcGFyYW0gW29wdGlvbnMuZXhjbHVkZWRQYXJhbXNdIC0gQW4gb3B0aW9uYWwgYXJyYXkgb2YgUXVlcnkgcGFyYW1ldGVycyBmb3Igd2hpY2ggU1NSIHNob3VsZCBiZSBkaXNhYmxlZC5cbiAqIEByZXR1cm5zIEEgcmVuZGVyaW5nIHN0cmF0ZWd5IHJlc29sdmVyIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBSZXF1ZXN0IG9iamVjdFxuICogYXMgYSBwYXJhbWV0ZXIgYW5kIHJldHVybnMgdGhlIHJlbmRlcmluZyBzdHJhdGVneSB0byBiZSBhcHBsaWVkIGZvciB0aGUgcmVxdWVzdCwgd2hpY2ggY2FuIGJlIGVpdGhlclxuICogYFJlbmRlcmluZ1N0cmF0ZWd5LkFMV0FZU19DU1JgIG9yIGBSZW5kZXJpbmdTdHJhdGVneS5ERUZBVUxUYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRSZW5kZXJpbmdTdHJhdGVneVJlc29sdmVyID1cbiAgKG9wdGlvbnM6IFJlbmRlcmluZ1N0cmF0ZWd5UmVzb2x2ZXJPcHRpb25zKSA9PlxuICAocmVxdWVzdDogUmVxdWVzdCk6IFJlbmRlcmluZ1N0cmF0ZWd5ID0+IHtcbiAgICByZXR1cm4gc2hvdWxkRmFsbGJhY2tUb0NzcihyZXF1ZXN0LCBvcHRpb25zKVxuICAgICAgPyBSZW5kZXJpbmdTdHJhdGVneS5BTFdBWVNfQ1NSXG4gICAgICA6IFJlbmRlcmluZ1N0cmF0ZWd5LkRFRkFVTFQ7XG4gIH07XG4iXX0=