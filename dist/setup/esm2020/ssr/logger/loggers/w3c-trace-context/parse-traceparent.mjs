/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { InvalidTraceparentFormatError } from './errors/invalid-traceparent-format-error';
import { InvalidTraceparentLengthError } from './errors/invalid-traceparent-length-error';
const HEXDIGLC = '[0-9a-f]'; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
const VERSION = HEXDIGLC + '{2}'; // 2 HEXDIGLC
const TRACE_ID = HEXDIGLC + '{32}'; // 32 HEXDIGLC
const PARENT_ID = HEXDIGLC + '{16}'; // 16 HEXDIGLC
const TRACE_FLAGS = HEXDIGLC + '{2}'; // 2 HEXDIGLC
const TRACEPARENT = [VERSION, TRACE_ID, PARENT_ID, TRACE_FLAGS].join('-'); // separated by dashes
const traceparentPattern = new RegExp('^' + TRACEPARENT + '$');
/**
 * Maps traceparent header to object with properties version, traceId, spanId and traceFlags.
 * Since `traceparent` header may be not attached to the request, the function returns undefined if the header is not provided.
 * If the header is provided but has invalid format or length, the function throws an error.
 *
 * @param traceparent
 * @returns Params of the traceparent header.
 *
 * @see https://www.w3.org/TR/trace-context/#traceparent-header-field-values
 */
export function parseTraceparent(traceparent) {
    if (typeof traceparent !== 'string') {
        return undefined;
    }
    if (traceparent.length !== 55) {
        throw new InvalidTraceparentLengthError(traceparent.length);
    }
    if (!traceparentPattern.test(traceparent)) {
        throw new InvalidTraceparentFormatError();
    }
    const [version, traceId, parentId, traceFlags] = traceparent.split('-');
    return { version, traceId, parentId, traceFlags };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtdHJhY2VwYXJlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9jb3JlLWxpYnMvc2V0dXAvc3NyL2xvZ2dlci9sb2dnZXJzL3czYy10cmFjZS1jb250ZXh0L3BhcnNlLXRyYWNlcGFyZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUMxRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUcxRixNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyx1RUFBdUU7QUFDcEcsTUFBTSxPQUFPLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLGFBQWE7QUFDL0MsTUFBTSxRQUFRLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLGNBQWM7QUFDbEQsTUFBTSxTQUFTLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLGNBQWM7QUFDbkQsTUFBTSxXQUFXLEdBQUcsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLGFBQWE7QUFDbkQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7QUFDakcsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsV0FBVyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRS9EOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sVUFBVSxnQkFBZ0IsQ0FDOUIsV0FBc0M7SUFFdEMsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDbkMsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO1FBQzdCLE1BQU0sSUFBSSw2QkFBNkIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDN0Q7SUFFRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQ3pDLE1BQU0sSUFBSSw2QkFBNkIsRUFBRSxDQUFDO0tBQzNDO0lBRUQsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMyBTQVAgU3BhcnRhY3VzIHRlYW0gPHNwYXJ0YWN1cy10ZWFtQHNhcC5jb20+XG4gKlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQgeyBJbnZhbGlkVHJhY2VwYXJlbnRGb3JtYXRFcnJvciB9IGZyb20gJy4vZXJyb3JzL2ludmFsaWQtdHJhY2VwYXJlbnQtZm9ybWF0LWVycm9yJztcbmltcG9ydCB7IEludmFsaWRUcmFjZXBhcmVudExlbmd0aEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvaW52YWxpZC10cmFjZXBhcmVudC1sZW5ndGgtZXJyb3InO1xuaW1wb3J0IHsgVzNjVHJhY2VDb250ZXh0IH0gZnJvbSAnLi93M2MtdHJhY2UtY29udGV4dC5tb2RlbCc7XG5cbmNvbnN0IEhFWERJR0xDID0gJ1swLTlhLWZdJzsgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI3RyYWNlcGFyZW50LWhlYWRlci1maWVsZC12YWx1ZXNcbmNvbnN0IFZFUlNJT04gPSBIRVhESUdMQyArICd7Mn0nOyAvLyAyIEhFWERJR0xDXG5jb25zdCBUUkFDRV9JRCA9IEhFWERJR0xDICsgJ3szMn0nOyAvLyAzMiBIRVhESUdMQ1xuY29uc3QgUEFSRU5UX0lEID0gSEVYRElHTEMgKyAnezE2fSc7IC8vIDE2IEhFWERJR0xDXG5jb25zdCBUUkFDRV9GTEFHUyA9IEhFWERJR0xDICsgJ3syfSc7IC8vIDIgSEVYRElHTENcbmNvbnN0IFRSQUNFUEFSRU5UID0gW1ZFUlNJT04sIFRSQUNFX0lELCBQQVJFTlRfSUQsIFRSQUNFX0ZMQUdTXS5qb2luKCctJyk7IC8vIHNlcGFyYXRlZCBieSBkYXNoZXNcbmNvbnN0IHRyYWNlcGFyZW50UGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nICsgVFJBQ0VQQVJFTlQgKyAnJCcpO1xuXG4vKipcbiAqIE1hcHMgdHJhY2VwYXJlbnQgaGVhZGVyIHRvIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgdmVyc2lvbiwgdHJhY2VJZCwgc3BhbklkIGFuZCB0cmFjZUZsYWdzLlxuICogU2luY2UgYHRyYWNlcGFyZW50YCBoZWFkZXIgbWF5IGJlIG5vdCBhdHRhY2hlZCB0byB0aGUgcmVxdWVzdCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkIGlmIHRoZSBoZWFkZXIgaXMgbm90IHByb3ZpZGVkLlxuICogSWYgdGhlIGhlYWRlciBpcyBwcm92aWRlZCBidXQgaGFzIGludmFsaWQgZm9ybWF0IG9yIGxlbmd0aCwgdGhlIGZ1bmN0aW9uIHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0gdHJhY2VwYXJlbnRcbiAqIEByZXR1cm5zIFBhcmFtcyBvZiB0aGUgdHJhY2VwYXJlbnQgaGVhZGVyLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3RyYWNlLWNvbnRleHQvI3RyYWNlcGFyZW50LWhlYWRlci1maWVsZC12YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHJhY2VwYXJlbnQoXG4gIHRyYWNlcGFyZW50OiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsXG4pOiBXM2NUcmFjZUNvbnRleHQgfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIHRyYWNlcGFyZW50ICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHJhY2VwYXJlbnQubGVuZ3RoICE9PSA1NSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkVHJhY2VwYXJlbnRMZW5ndGhFcnJvcih0cmFjZXBhcmVudC5sZW5ndGgpO1xuICB9XG5cbiAgaWYgKCF0cmFjZXBhcmVudFBhdHRlcm4udGVzdCh0cmFjZXBhcmVudCkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZFRyYWNlcGFyZW50Rm9ybWF0RXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IFt2ZXJzaW9uLCB0cmFjZUlkLCBwYXJlbnRJZCwgdHJhY2VGbGFnc10gPSB0cmFjZXBhcmVudC5zcGxpdCgnLScpO1xuXG4gIHJldHVybiB7IHZlcnNpb24sIHRyYWNlSWQsIHBhcmVudElkLCB0cmFjZUZsYWdzIH07XG59XG4iXX0=