{"version":3,"file":"spartacus-setup-ssr.mjs","sources":["../../../core-libs/setup/ssr/express-utils/express-request-origin.ts","../../../core-libs/setup/ssr/express-utils/express-request-url.ts","../../../core-libs/setup/ssr/logger/loggers/w3c-trace-context/errors/invalid-traceparent-format-error.ts","../../../core-libs/setup/ssr/logger/loggers/w3c-trace-context/errors/invalid-traceparent-length-error.ts","../../../core-libs/setup/ssr/logger/loggers/w3c-trace-context/parse-traceparent.ts","../../../core-libs/setup/ssr/optimized-engine/request-context.ts","../../../core-libs/setup/ssr/logger/loggers/default-express-server-logger.ts","../../../core-libs/setup/ssr/logger/loggers/express-server-logger.ts","../../../core-libs/setup/ssr/logger/loggers/legacy-express-server-logger.ts","../../../core-libs/setup/ssr/logger/loggers/index.ts","../../../core-libs/setup/ssr/logger/services/express-logger.service.ts","../../../core-libs/setup/ssr/logger/services/prerendering-logger.service.ts","../../../core-libs/setup/ssr/logger/services/server-logger-service-factory.ts","../../../core-libs/setup/ssr/logger/services/index.ts","../../../core-libs/setup/ssr/logger/index.ts","../../../core-libs/setup/ssr/optimized-engine/get-loggable-ssr-optimization-options.ts","../../../core-libs/setup/ssr/optimized-engine/rendering-cache.ts","../../../core-libs/setup/ssr/optimized-engine/rendering-strategy-resolver.ts","../../../core-libs/setup/ssr/optimized-engine/rendering-strategy-resolver-options.ts","../../../core-libs/setup/ssr/optimized-engine/ssr-optimization-options.ts","../../../core-libs/setup/ssr/optimized-engine/optimized-ssr-engine.ts","../../../core-libs/setup/ssr/providers/server-request-origin.ts","../../../core-libs/setup/ssr/providers/server-request-url.ts","../../../core-libs/setup/ssr/providers/ssr-providers.ts","../../../core-libs/setup/ssr/engine-decorator/ng-express-engine-decorator.ts","../../../core-libs/setup/ssr/engine-decorator/index.ts","../../../core-libs/setup/ssr/optimized-engine/index.ts","../../../core-libs/setup/ssr/providers/model.ts","../../../core-libs/setup/ssr/providers/index.ts","../../../core-libs/setup/ssr/public_api.ts","../../../core-libs/setup/ssr/spartacus-setup-ssr.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Request } from 'express';\n\nexport function getRequestOrigin(req: Request): string {\n  // If express is resolving and trusting X-Forwarded-Host, we want to take it\n  // into an account to properly generate request origin.\n  const trustProxyFn = req.app.get('trust proxy fn');\n  let forwardedHost = req.get('X-Forwarded-Host');\n  if (forwardedHost && trustProxyFn(req.connection.remoteAddress, 0)) {\n    if (forwardedHost.indexOf(',') !== -1) {\n      // Note: X-Forwarded-Host is normally only ever a\n      //       single value, but this is to be safe.\n      forwardedHost = forwardedHost\n        .substring(0, forwardedHost.indexOf(','))\n        .trimRight();\n    }\n    return `${req.protocol}://${forwardedHost}`;\n  } else {\n    return `${req.protocol}://${req.get('host')}`;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Request } from 'express';\nimport { getRequestOrigin } from './express-request-origin';\n\nexport function getRequestUrl(req: Request): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Error thrown when the traceparent header has an invalid format.\n */\nexport class InvalidTraceparentFormatError extends Error {\n  constructor() {\n    super('Traceparent header has invalid format.');\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Error thrown when the traceparent header has an invalid length.\n * @param traceparentLength The length of the traceparent header.\n */\nexport class InvalidTraceparentLengthError extends Error {\n  constructor(traceparentLength: number) {\n    super(\n      `Traceparent header has invalid length: ${traceparentLength}. Expected 55 characters.`\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InvalidTraceparentFormatError } from './errors/invalid-traceparent-format-error';\nimport { InvalidTraceparentLengthError } from './errors/invalid-traceparent-length-error';\nimport { W3cTraceContext } from './w3c-trace-context.model';\n\nconst HEXDIGLC = '[0-9a-f]'; // https://www.w3.org/TR/trace-context/#traceparent-header-field-values\nconst VERSION = HEXDIGLC + '{2}'; // 2 HEXDIGLC\nconst TRACE_ID = HEXDIGLC + '{32}'; // 32 HEXDIGLC\nconst PARENT_ID = HEXDIGLC + '{16}'; // 16 HEXDIGLC\nconst TRACE_FLAGS = HEXDIGLC + '{2}'; // 2 HEXDIGLC\nconst TRACEPARENT = [VERSION, TRACE_ID, PARENT_ID, TRACE_FLAGS].join('-'); // separated by dashes\nconst traceparentPattern = new RegExp('^' + TRACEPARENT + '$');\n\n/**\n * Maps traceparent header to object with properties version, traceId, spanId and traceFlags.\n * Since `traceparent` header may be not attached to the request, the function returns undefined if the header is not provided.\n * If the header is provided but has invalid format or length, the function throws an error.\n *\n * @param traceparent\n * @returns Params of the traceparent header.\n *\n * @see https://www.w3.org/TR/trace-context/#traceparent-header-field-values\n */\nexport function parseTraceparent(\n  traceparent: string | undefined | null\n): W3cTraceContext | undefined {\n  if (typeof traceparent !== 'string') {\n    return undefined;\n  }\n\n  if (traceparent.length !== 55) {\n    throw new InvalidTraceparentLengthError(traceparent.length);\n  }\n\n  if (!traceparentPattern.test(traceparent)) {\n    throw new InvalidTraceparentFormatError();\n  }\n\n  const [version, traceId, parentId, traceFlags] = traceparent.split('-');\n\n  return { version, traceId, parentId, traceFlags };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { randomUUID } from 'crypto';\nimport { Request } from 'express';\nimport { ExpressServerLogger } from '../logger';\nimport { parseTraceparent } from '../logger/loggers/w3c-trace-context/parse-traceparent';\nimport { W3cTraceContext } from '../logger/loggers/w3c-trace-context/w3c-trace-context.model';\n\n/**\n * RequestContext is used for log message in server side rendering.\n * It contains request's UUID, time of receiving the request and the W3C Trace Context if `traceparent` header is available and valid.\n */\nexport interface RequestContext {\n  uuid: string;\n  timeReceived: string;\n  traceContext?: W3cTraceContext;\n}\n\n/**\n * Returns the request context from the request object.\n * @param request - the request object\n * @returns the context of the request\n */\nexport const getRequestContext = (request: Request): RequestContext => {\n  return request.res?.locals?.cx?.request;\n};\n\n/**\n * Prepares and updates a request with the context object, which is used to enrich the logs.\n * It contains the random request's UUID, time of receiving the context and the W3C Trace Context (if available).\n * The trace context is parsed from the `traceparent` header, which is specified in\n * the \"W3C TraceContext\" document. See https://www.w3.org/TR/trace-context/#traceparent-header\n * for more details.\n * @param request - the request object\n * @param logger - the ExpressServerLogger object. It is used to log the error if occurred during parsing traceparent header\n * @returns the context of the request and error if occurred during parsing traceparent header\n */\nexport const preprocessRequestForLogger = (\n  request: Request,\n  logger: ExpressServerLogger\n) => {\n  const requestContext: RequestContext = {\n    ...createInitialRequestContext(),\n    traceContext: getTraceContext(request, logger),\n  };\n  setRequestContext(request, requestContext);\n};\n\n/**\n * Updates the request object with the request context.\n * @param request - the request object\n * @param context - the context of the request\n */\nconst setRequestContext = (request: Request, context: RequestContext) => {\n  if (request.res) {\n    request.res.locals = {\n      ...request.res.locals,\n      cx: {\n        ...request.res.locals.cx,\n        request: context,\n      },\n    };\n  }\n};\n\n/**\n * Creates the initial request context to the request object.\n * @param request - the request object\n * @returns object with a randomly generated UUID and the current time\n */\nconst createInitialRequestContext = (): RequestContext => {\n  const requestContext: RequestContext = {\n    uuid: randomUUID(),\n    timeReceived: new Date().toISOString(),\n  };\n  return requestContext;\n};\n\n/**\n * Parses the `traceparent` header and returns an object with the W3C TraceContext.\n * In case when the `traceparent` header is absent or invalid, `undefined` value is returned.\n * @param request - the request object\n * @param logger - the logger object\n *\n */\nconst getTraceContext = (\n  request: Request,\n  logger: ExpressServerLogger\n): W3cTraceContext | undefined => {\n  try {\n    return parseTraceparent(request.get('traceparent')) ?? undefined;\n  } catch (e) {\n    const error =\n      e instanceof Error\n        ? e\n        : new Error('Unexpected error during parsing traceparent header');\n    logger.error(error.message, { request });\n  }\n};\n\ndeclare module 'express' {\n  export interface Locals {\n    cx: {\n      request: RequestContext;\n    };\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isDevMode } from '@angular/core';\nimport { Request } from 'express';\nimport { getRequestContext } from '../../optimized-engine/request-context';\nimport {\n  ExpressServerLogger,\n  ExpressServerLoggerContext,\n} from './express-server-logger';\n\n/**\n *\n * Default logger used in SSR (ExpressJS) to enhance logs visible e.g. in monitoring tools e.g. Kibana.\n * It outputs a JSON with properties \"message\" and \"context\",\n * which contains a \"timestamp\" and details of the \"request\" (\"url\", \"uuid\", \"timeReceived\")\n *\n * The output \"context\" JSON will contain also a property \"traceContext\"\n * with \"traceId\", \"parentId\", \"version\" and \"traceFlags\",\n * if only the given request has the special header \"traceparent\" (specifed in\n * the \"W3C TraceContext\" document. See https://www.w3.org/TR/trace-context/#traceparent-header ).\n */\nexport class DefaultExpressServerLogger implements ExpressServerLogger {\n  log(message: string, context: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.log(this.stringifyWithContext(message, context));\n  }\n  warn(message: string, context: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.warn(this.stringifyWithContext(message, context));\n  }\n  error(message: string, context: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.error(this.stringifyWithContext(message, context));\n  }\n  info(message: string, context: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.info(this.stringifyWithContext(message, context));\n  }\n  debug(message: string, context: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.debug(this.stringifyWithContext(message, context));\n  }\n\n  /**\n   * Converts a message and an ExpressServerLoggerContext object into a single JSON string containing both pieces of information, which can be used for logging purposes.\n   *\n   * @protected\n   * @param message - The message to be included in the log entry.\n   * @param context - The context object associated with the log entry.\n   * @returns A JSON string containing both the message and context information, suitable for logging.\n   */\n  protected stringifyWithContext(\n    message: string,\n    context: ExpressServerLoggerContext\n  ): string {\n    const logObject = { message, context: this.mapContext(context) };\n\n    return isDevMode()\n      ? JSON.stringify(logObject, null, 2)\n      : JSON.stringify(logObject);\n  }\n\n  /**\n   * Map the context for the ExpressServerLogger\n   *\n   * @protected\n   * @param context - The logging context object to be mapped\n   * @returns - The mapped context with timestamp and request (if available)\n   */\n  protected mapContext(\n    context: ExpressServerLoggerContext\n  ): Record<string, any> {\n    const timestamp = new Date().toISOString();\n    const outputContext = { timestamp, ...context };\n\n    if (context.request) {\n      Object.assign(outputContext, {\n        request: this.mapRequest(context.request),\n      });\n    }\n\n    return outputContext;\n  }\n\n  /**\n   * Maps a Request object into a JavaScript object with specific properties.\n   *\n   * @protected\n   * @param request - An Express Request object.\n   * @returns - A mapped request object. By default, it contains only \"url\", a random \"uuid\" and \"timeReceived\" of the request.\n   */\n  protected mapRequest(request: Request): Record<string, any> {\n    return {\n      url: request.originalUrl,\n      ...getRequestContext(request),\n    };\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { InjectionToken } from '@angular/core';\nimport { Request } from 'express';\n\n/**\n * ExpressServerLoggerContext is used for log message in server side rendering.\n * It contains optional request object and additional properties that can be used in log message.\n */\nexport interface ExpressServerLoggerContext {\n  request?: Request;\n  [_key: string]: any;\n}\n\n/**\n * ExpressServerLogger is used for log message in server side rendering.\n * It contains methods for logging messages with different levels. Each method accepts message and context.\n * Context is an object that contains additional information about the log message.\n *\n * @property log - logs message with level \"log\"\n * @property warn - logs message with level \"warn\"\n * @property error - logs message with level \"error\"\n * @property info - logs message with level \"info\"\n * @property debug - logs message with level \"debug\"\n */\nexport interface ExpressServerLogger {\n  log(message: string, context: ExpressServerLoggerContext): void;\n  warn(message: string, context: ExpressServerLoggerContext): void;\n  error(message: string, context: ExpressServerLoggerContext): void;\n  info(message: string, context: ExpressServerLoggerContext): void;\n  debug(message: string, context: ExpressServerLoggerContext): void;\n}\n\n/**\n * Injection token for ExpressServerLogger used for log message in server side rendering.\n * EXPRESS_SERVER_LOGGER is used to provide proper logger to LoggerService instance.\n *\n * Spartacus is providing two types of server loggers:\n * - DefaultExpressServerLogger - default implementation used for logging contextual messages in SSR.\n * - LegacyExpressServerLogger - used for logging if contextual logging is disabled\n *\n */\nexport const EXPRESS_SERVER_LOGGER = new InjectionToken<ExpressServerLogger>(\n  'EXPRESS_SERVER_LOGGER'\n);\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  ExpressServerLogger,\n  ExpressServerLoggerContext,\n} from './express-server-logger';\n\n/**\n * @deprecated since 6.2, will be removed in a new major version, as contextual logging will be enabled by default.\n * Default implementation of `ExpressServerLogger` that just delegates log messages to the native `console` object without providing any context.\n * It's used when contextual logging is disabled.\n *\n *\n */\n//CXSPA-3680 - remove this class in 7.0\nexport class LegacyExpressServerLogger implements ExpressServerLogger {\n  log(message: string, _context?: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.log(message);\n  }\n  warn(message: string, _context?: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.warn(message);\n  }\n  error(message: string, _context?: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.error(message);\n  }\n  info(message: string, _context?: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.info(message);\n  }\n  debug(message: string, _context?: ExpressServerLoggerContext): void {\n    /* eslint-disable-next-line no-console */\n    console.debug(message);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './default-express-server-logger';\nexport * from './express-server-logger';\nexport * from './legacy-express-server-logger';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable, inject } from '@angular/core';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport { LoggerService } from '@spartacus/core';\nimport { formatWithOptions } from 'util';\nimport { EXPRESS_SERVER_LOGGER } from '../loggers';\n\n/**\n * Custom `LoggerService` used in ExpressJS.\n *\n * It converts the input arguments to a final string message similar as the native `console`\n * does (using the native function `format` from `node:util`) and passes this message\n * to a concrete server logger, used in ExpressJS.\n *\n * Besides the message, it also passes the current `request` of ExpressJS as an additional\n * context to the concrete server logger.\n */\n@Injectable({ providedIn: 'root' })\nexport class ExpressLoggerService implements LoggerService {\n  request = inject(REQUEST);\n  serverLogger = inject(EXPRESS_SERVER_LOGGER);\n\n  log(...args: Parameters<typeof console.log>): void {\n    this.serverLogger.log(this.formatLogMessage(...args), {\n      request: this.request,\n    });\n  }\n  warn(...args: Parameters<typeof console.warn>): void {\n    this.serverLogger.warn(this.formatLogMessage(...args), {\n      request: this.request,\n    });\n  }\n  error(...args: Parameters<typeof console.error>): void {\n    this.serverLogger.error(this.formatLogMessage(...args), {\n      request: this.request,\n    });\n  }\n  info(...args: Parameters<typeof console.info>): void {\n    this.serverLogger.info(this.formatLogMessage(...args), {\n      request: this.request,\n    });\n  }\n  debug(...args: Parameters<typeof console.debug>): void {\n    this.serverLogger.debug(this.formatLogMessage(...args), {\n      request: this.request,\n    });\n  }\n\n  protected formatLogMessage(message?: any, ...optionalParams: any[]): string {\n    return formatWithOptions(\n      // Prevent automatically breaking a long string message into multiple lines.\n      // Otherwise, multi-line logs would be treated on the server as separate log\n      { breakLength: Infinity },\n      message,\n      ...optionalParams\n    );\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { LoggerService } from '@spartacus/core';\n\n/**\n * Custom `LoggerService` used in pre-rendering in the server environment.\n *\n * It simply forwards the arguments to the native `console` methods.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PrerenderingLoggerService extends LoggerService {\n  log(...args: Parameters<typeof console.log>): void {\n    /* eslint-disable-next-line no-console */\n    console.log(...args);\n  }\n  warn(...args: Parameters<typeof console.warn>): void {\n    /* eslint-disable-next-line no-console */\n    console.warn(...args);\n  }\n  error(...args: Parameters<typeof console.error>): void {\n    /* eslint-disable-next-line no-console */\n    console.error(...args);\n  }\n  info(...args: Parameters<typeof console.info>): void {\n    /* eslint-disable-next-line no-console */\n    console.info(...args);\n  }\n  debug(...args: Parameters<typeof console.debug>): void {\n    /* eslint-disable-next-line no-console */\n    console.debug(...args);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { inject } from '@angular/core';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport { ExpressLoggerService } from './express-logger.service';\nimport { PrerenderingLoggerService } from './prerendering-logger.service';\n\nexport const serverLoggerServiceFactory = () => {\n  const isExpress = inject(REQUEST, { optional: true }) !== null;\n  return isExpress\n    ? inject(ExpressLoggerService)\n    : inject(PrerenderingLoggerService);\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './express-logger.service';\nexport * from './prerendering-logger.service';\nexport * from './server-logger-service-factory';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './loggers/index';\nexport * from './services/index';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SsrOptimizationOptions } from './ssr-optimization-options';\n\n/**\n * Helper function that maps optimization options to primitive values.\n * This is useful for logging and monitoring purposes.\n *\n * @param value optimization options that should be logged\n * @returns options containing only primitive values that are easier to read by developers and monitoring tools\n */\nexport const getLoggableSsrOptimizationOptions = (\n  value: SsrOptimizationOptions\n) => {\n  const newValue: Record<string, any> = { ...value };\n  Object.keys(value).forEach((key) => {\n    if (isClassInstance(newValue[key])) {\n      newValue[key] = newValue[key].constructor?.name;\n    }\n    if (typeof newValue[key] === 'function') {\n      newValue[key] = newValue[key].toString();\n    }\n  });\n  return newValue;\n};\n\n/**\n * Checks if the given value is a class instance,\n * but not a plain Object.\n *\n * @private\n */\nconst isClassInstance = (value: any): boolean => {\n  return typeof value === 'object' && value.constructor !== Object;\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SsrOptimizationOptions } from './ssr-optimization-options';\n\nexport interface RenderingEntry {\n  html?: any;\n  err?: any;\n  time?: number;\n  rendering?: boolean;\n}\n\nexport class RenderingCache {\n  protected renders = new Map<string, RenderingEntry>();\n\n  constructor(private options?: SsrOptimizationOptions) {}\n\n  setAsRendering(key: string) {\n    this.renders.set(key, { rendering: true });\n  }\n\n  isRendering(key: string): boolean {\n    return !!this.renders.get(key)?.rendering;\n  }\n\n  store(key: string, err?: Error | null, html?: string) {\n    const entry: RenderingEntry = { err, html };\n    if (this.options?.ttl) {\n      entry.time = Date.now();\n    }\n    if (this.options?.cacheSize) {\n      this.renders.delete(key);\n      if (this.renders.size >= this.options.cacheSize) {\n        this.renders.delete(this.renders.keys().next().value);\n      }\n    }\n    this.renders.set(key, entry);\n  }\n\n  get(key: string): RenderingEntry | undefined {\n    return this.renders.get(key);\n  }\n\n  clear(key: string) {\n    this.renders.delete(key);\n  }\n\n  isReady(key: string): boolean {\n    const entry = this.renders.get(key);\n    const isRenderPresent = entry?.html || entry?.err;\n    return isRenderPresent && this.isFresh(key);\n  }\n\n  isFresh(key: string): boolean {\n    if (!this.options?.ttl) {\n      return true;\n    }\n\n    return Date.now() - (this.renders.get(key)?.time ?? 0) < this.options?.ttl;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Request } from 'express';\nimport { RenderingStrategy } from './ssr-optimization-options';\nimport { RenderingStrategyResolverOptions } from './rendering-strategy-resolver-options';\n\nconst hasExcludedParams = (\n  request: Request,\n  excludedParams: string[] | undefined\n): boolean => {\n  const params: string[] = request.query\n    ? Object.getOwnPropertyNames(request.query)\n    : [];\n\n  if (!excludedParams) {\n    return false;\n  }\n\n  return excludedParams.some((excludedParam: string) =>\n    params.some((param: string): boolean => excludedParam === param)\n  );\n};\n\nconst hasExcludedUrl = (\n  request: Request,\n  excludedUrls: string[] | undefined\n) => {\n  return request.url && excludedUrls\n    ? excludedUrls.some((url) => request.url.search(url) > -1)\n    : false;\n};\n\nconst shouldFallbackToCsr = (\n  request: Request,\n  { excludedParams, excludedUrls }: RenderingStrategyResolverOptions\n) => {\n  return (\n    hasExcludedParams(request, excludedParams) ||\n    hasExcludedUrl(request, excludedUrls)\n  );\n};\n\n/**\n * Creates a rendering strategy resolver function with the specified options.\n *\n * @function\n * @param  options - The options to configure the rendering strategy resolver.\n * @param [options.excludedUrls] - An optional array of URLs for which server-side rendering (SSR) should be disabled.\n * @param [options.excludedParams] - An optional array of Query parameters for which SSR should be disabled.\n * @returns A rendering strategy resolver function that takes a Request object\n * as a parameter and returns the rendering strategy to be applied for the request, which can be either\n * `RenderingStrategy.ALWAYS_CSR` or `RenderingStrategy.DEFAULT`.\n */\nexport const defaultRenderingStrategyResolver =\n  (options: RenderingStrategyResolverOptions) =>\n  (request: Request): RenderingStrategy => {\n    return shouldFallbackToCsr(request, options)\n      ? RenderingStrategy.ALWAYS_CSR\n      : RenderingStrategy.DEFAULT;\n  };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport interface RenderingStrategyResolverOptions {\n  excludedUrls?: string[];\n  excludedParams?: string[];\n}\n\nexport const defaultRenderingStrategyResolverOptions: RenderingStrategyResolverOptions =\n  {\n    excludedUrls: ['checkout', 'my-account', 'cx-preview'],\n    excludedParams: ['asm'],\n  };\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Request } from 'express';\nimport { ExpressServerLogger } from '../logger';\nimport { defaultRenderingStrategyResolver } from './rendering-strategy-resolver';\nimport { defaultRenderingStrategyResolverOptions } from './rendering-strategy-resolver-options';\n\nexport interface SsrOptimizationOptions {\n  /**\n   * Time in milliseconds to wait for SSR rendering to happen.\n   */\n  timeout?: number;\n\n  /**\n   * Enable in-memory cache for pre-rendered urls.\n   *\n   * If disabled, the cache will still be used to temporarily store\n   * renders finished after csr fallback in order to serve them with\n   * next request only.\n   */\n  cache?: boolean;\n\n  /**\n   * Limit the cache size\n   *\n   * Specified number of entries that will be kept in cache, allows to keep\n   * memory usage under control.\n   *\n   * Can also be use when `cache` option is set to false. It will then limit the\n   * number of renders that timeouts and are kept in temporary cache, waiting\n   * to be served with next request.\n   */\n  cacheSize?: number;\n\n  /**\n   * Limit number of concurrent rendering\n   */\n  concurrency?: number;\n\n  /**\n   * Time in milliseconds after prerendered page is becoming stale and should\n   * be rendered again.\n   */\n  ttl?: number;\n\n  /**\n   * Allows overriding default key generator for custom differentiating\n   * between rendered pages. By default it uses the full request URL.\n   *\n   * @param req\n   */\n  renderKeyResolver?: (req: Request) => string;\n\n  /**\n   * This function allows for the definition of a custom rendering strategy on a per-request basis.\n   * By default, we provide a defaultRenderingStrategyResolver,\n   * which has a default parameter defaultRenderingStrategyResolverOptions.\n   * This default option disables server-side rendering (SSR) on pages such as 'checkout' and 'my-account'.\n   *\n   * @param req\n   */\n  renderingStrategyResolver?: (req: Request) => RenderingStrategy;\n\n  /**\n   * Time in milliseconds to wait for rendering when SSR_ALWAYS render strategy is set for the request.\n   * Default value is 60000 milliseconds (1 minute).\n   */\n  forcedSsrTimeout?: number;\n\n  /**\n   * The time for how long the render is expected to finish in.\n   * Exceeding this timeout will decrease the concurrency limit\n   * and allow for the new request to be server-side rendered.\n   * However, this may not release the rendering resources for the hanging render,\n   * which may cause additional memory usage on the server.\n   *\n   * It will log which render is exceeding the render time,\n   * which is useful for debugging issues.\n   *\n   * The value should always be higher than `timeout` and `forcedSsrTimeout`.\n   *\n   * Default value is 300000 milliseconds (5 minutes).\n   */\n  maxRenderTime?: number;\n\n  /**\n   * Instead of immediately falling back to CSR\n   * while a render for the same key is in progress, this option will make\n   * the subsequent requests for this key wait for the current render.\n   *\n   * All pending requests that for the same rendering key will\n   * take up only _one_ concurrency slot, because there is only\n   * one actual rendering task being performed.\n   *\n   * Each request independently honors the `timeout` option.\n   * E.g., consider the following setup where `timeout` option\n   * is set to 3s, and the given request takes 4s to render.\n   * The flow is as follows:\n   *\n   * - 1st request arrives and triggers the SSR.\n   * - 2nd request for the same URL arrives 2s after the 1st one.\n   *    Instead of falling back to CSR, it waits (with its own timeout)\n   *    for the render of the first request.\n   * - 1st request times out after 3s, and falls back to CSR.\n   * - one second after the timeout, the current render finishes.\n   * - the 2nd request returns SSR after only 2s of waiting.\n   */\n  reuseCurrentRendering?: boolean;\n\n  /**\n   * Enable detailed logs for troubleshooting problems\n   */\n  debug?: boolean;\n\n  /**\n   * Config for improving logged messages with context and JSON structure.\n   *\n   * It enhances the logs in SSR by adding context, including the request's details,\n   * and structuring them as JSON.\n   *\n   * The `logger` property is optional and accepts two values:\n   * - `true`:         Enables the default logger and enhances the logs.\n   * - `ExpressServerLogger`: Interprets the given `ExpressServerLogger` as a custom logger\n   *\n   * By default, the logger is disabled, meaning that logs in SSR are not enhanced.\n   */\n  logger?: true | ExpressServerLogger; //CXSPA-3680 - allow only providing ExpressServerLogger implementations\n}\n\nexport enum RenderingStrategy {\n  ALWAYS_CSR = -1,\n  DEFAULT = 0,\n  ALWAYS_SSR = 1,\n}\n\nexport const defaultSsrOptimizationOptions: SsrOptimizationOptions = {\n  concurrency: 10,\n  timeout: 3_000,\n  forcedSsrTimeout: 60_000,\n  maxRenderTime: 300_000,\n  reuseCurrentRendering: true,\n  debug: false,\n  renderingStrategyResolver: defaultRenderingStrategyResolver(\n    defaultRenderingStrategyResolverOptions\n  ),\n  //CXSPA-3680 - set ExpressServerLogger as default\n  //logger: new ExpressServerLogger(),\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* webpackIgnore: true */\nimport { Request, Response } from 'express';\nimport * as fs from 'fs';\nimport { NgExpressEngineInstance } from '../engine-decorator/ng-express-engine-decorator';\nimport { getRequestUrl } from '../express-utils/express-request-url';\nimport {\n  DefaultExpressServerLogger,\n  EXPRESS_SERVER_LOGGER,\n  ExpressServerLogger,\n  ExpressServerLoggerContext,\n  LegacyExpressServerLogger,\n} from '../logger';\nimport { getLoggableSsrOptimizationOptions } from './get-loggable-ssr-optimization-options';\nimport { RenderingCache } from './rendering-cache';\nimport { preprocessRequestForLogger } from './request-context';\nimport {\n  RenderingStrategy,\n  SsrOptimizationOptions,\n  defaultSsrOptimizationOptions,\n} from './ssr-optimization-options';\n\n/**\n * Returns the full url for the given SSR Request.\n */\nexport const getDefaultRenderKey = getRequestUrl;\n\nexport type SsrCallbackFn = (\n  /**\n   * Error that might've occurred while rendering.\n   */\n  err?: Error | null | undefined,\n  /**\n   * HTML response.\n   */\n  html?: string | undefined\n) => void;\n\n/**\n * The rendered pages are kept in memory to be served on next request. If the `cache` is set to `false`, the\n * response is evicted as soon as the first successful response is successfully returned.\n */\nexport class OptimizedSsrEngine {\n  protected currentConcurrency = 0;\n  protected renderingCache = new RenderingCache(this.ssrOptions);\n  private logger: ExpressServerLogger;\n  private templateCache = new Map<string, string>();\n\n  /**\n   * When the config `reuseCurrentRendering` is enabled, we want perform\n   * only one render for one rendering key and reuse the html result\n   * for all the pending requests for the same rendering key.\n   * Therefore we need to store the callbacks for all the pending requests\n   * and invoke them with the html after the render completes.\n   *\n   * This Map should be used only when `reuseCurrentRendering` config is enabled.\n   * It's indexed by the rendering keys.\n   */\n  private renderCallbacks = new Map<string, SsrCallbackFn[]>();\n\n  get engineInstance(): NgExpressEngineInstance {\n    return this.renderResponse.bind(this);\n  }\n\n  constructor(\n    protected expressEngine: NgExpressEngineInstance,\n    protected ssrOptions?: SsrOptimizationOptions\n  ) {\n    this.ssrOptions = ssrOptions\n      ? {\n          ...defaultSsrOptimizationOptions,\n          // overrides the default options\n          ...ssrOptions,\n        }\n      : undefined;\n    this.logger = this.initLogger(this.ssrOptions);\n    this.logOptions();\n  }\n\n  protected logOptions(): void {\n    if (!this.ssrOptions) {\n      return;\n    }\n\n    const loggableSsrOptions = getLoggableSsrOptimizationOptions(\n      this.ssrOptions\n    );\n\n    // This check has been introduced to avoid breaking changes. Remove it in Spartacus version 7.0\n    if (this.ssrOptions.logger) {\n      this.log(`[spartacus] SSR optimization engine initialized`, true, {\n        options: loggableSsrOptions,\n      });\n    } else {\n      const stringifiedOptions = JSON.stringify(loggableSsrOptions, null, 2);\n      this.log(\n        `[spartacus] SSR optimization engine initialized with the following options: ${stringifiedOptions}`,\n        true\n      );\n    }\n  }\n\n  /**\n   * When SSR page can not be returned in time, we're returning index.html of\n   * the CSR application.\n   * The CSR application is returned with the \"Cache-Control: no-store\" response-header. This notifies external cache systems to not use the CSR application for the subsequent request.\n   */\n  protected fallbackToCsr(\n    response: Response,\n    filePath: string,\n    callback: SsrCallbackFn\n  ): void {\n    response.set('Cache-Control', 'no-store');\n    callback(undefined, this.getDocument(filePath));\n  }\n\n  protected getRenderingKey(request: Request): string {\n    return this.ssrOptions?.renderKeyResolver\n      ? this.ssrOptions.renderKeyResolver(request)\n      : getDefaultRenderKey(request);\n  }\n\n  protected getRenderingStrategy(request: Request): RenderingStrategy {\n    return this.ssrOptions?.renderingStrategyResolver\n      ? this.ssrOptions.renderingStrategyResolver(request)\n      : RenderingStrategy.DEFAULT;\n  }\n\n  /**\n   * When returns true, the server side rendering should be performed.\n   * When returns false, the CSR fallback should be returned.\n   *\n   * We should not render, when there is already\n   * a pending rendering for the same rendering key\n   * (unless the `reuseCurrentRendering` config option is enabled)\n   * OR when the concurrency limit is exceeded.\n   */\n  protected shouldRender(request: Request): boolean {\n    const renderingKey = this.getRenderingKey(request);\n    const concurrencyLimitExceeded =\n      this.isConcurrencyLimitExceeded(renderingKey);\n    const fallBack =\n      this.renderingCache.isRendering(renderingKey) &&\n      !this.ssrOptions?.reuseCurrentRendering;\n\n    if (fallBack) {\n      this.log(\n        `CSR fallback: rendering in progress (${request?.originalUrl})`,\n        true,\n        { request }\n      );\n    } else if (concurrencyLimitExceeded) {\n      this.log(\n        `CSR fallback: Concurrency limit exceeded (${this.ssrOptions?.concurrency})`,\n        true,\n        { request }\n      );\n    }\n\n    return (\n      (!fallBack &&\n        !concurrencyLimitExceeded &&\n        this.getRenderingStrategy(request) !== RenderingStrategy.ALWAYS_CSR) ||\n      this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n    );\n  }\n\n  /**\n   * Checks for the concurrency limit\n   *\n   * @returns true if rendering this request would exceed the concurrency limit\n   */\n  private isConcurrencyLimitExceeded(renderingKey: string): boolean {\n    // If we can reuse a pending render for this request, we don't take up a new concurrency slot.\n    // In that case we don't exceed the concurrency limit even if the `currentConcurrency`\n    // already reaches the limit.\n    if (\n      this.ssrOptions?.reuseCurrentRendering &&\n      this.renderingCache.isRendering(renderingKey)\n    ) {\n      return false;\n    }\n\n    return this.ssrOptions?.concurrency\n      ? this.currentConcurrency >= this.ssrOptions.concurrency\n      : false;\n  }\n\n  /**\n   * Returns true, when the `timeout` option has been configured to non-zero value OR\n   * when the rendering strategy for the given request is ALWAYS_SSR.\n   * Otherwise, it returns false.\n   */\n  protected shouldTimeout(request: Request): boolean {\n    return (\n      !!this.ssrOptions?.timeout ||\n      this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n    );\n  }\n\n  /**\n   * Returns the timeout value.\n   *\n   * In case of the rendering strategy ALWAYS_SSR, it returns the config `forcedSsrTimeout`.\n   * Otherwise, it returns the config `timeout`.\n   */\n  protected getTimeout(request: Request): number {\n    return this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n      ? this.ssrOptions?.forcedSsrTimeout ?? 60000\n      : this.ssrOptions?.timeout ?? 0;\n  }\n\n  /**\n   * If there is an available cached response for this rendering key,\n   * it invokes the given render callback with the response and returns true.\n   *\n   * Otherwise, it returns false.\n   */\n  protected returnCachedRender(\n    request: Request,\n    callback: SsrCallbackFn\n  ): boolean {\n    const key = this.getRenderingKey(request);\n\n    if (this.renderingCache.isReady(key)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const cached = this.renderingCache.get(key)!;\n      callback(cached.err, cached.html);\n\n      if (!this.ssrOptions?.cache) {\n        // we drop cached rendering if caching is disabled\n        this.renderingCache.clear(key);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Handles the request and invokes the given `callback` with the result html / error.\n   *\n   * The result might be ether:\n   * - a CSR fallback with a basic `index.html` content\n   * - a result rendered by the original Angular Universal express engine\n   * - a result from the in-memory cache (which was previously rendered by Angular Universal express engine).\n   */\n  protected renderResponse(\n    filePath: string,\n    options: any,\n    callback: SsrCallbackFn\n  ): void {\n    preprocessRequestForLogger(options.req, this.logger);\n\n    const request: Request = options.req;\n    const response: Response = options.req.res;\n\n    if (this.returnCachedRender(request, callback)) {\n      this.log(`Render from cache (${request?.originalUrl})`, true, {\n        request,\n      });\n      return;\n    }\n    if (!this.shouldRender(request)) {\n      this.fallbackToCsr(response, filePath, callback);\n      return;\n    }\n\n    let requestTimeout: ReturnType<typeof setTimeout> | undefined;\n    if (this.shouldTimeout(request)) {\n      // establish timeout for rendering\n      const timeout = this.getTimeout(request);\n      requestTimeout = setTimeout(() => {\n        requestTimeout = undefined;\n        this.fallbackToCsr(response, filePath, callback);\n        this.log(\n          `SSR rendering exceeded timeout ${timeout}, fallbacking to CSR for ${request?.originalUrl}`,\n          false,\n          { request }\n        );\n      }, timeout);\n    } else {\n      // Here we respond with the fallback to CSR, but we don't `return`.\n      // We let the actual rendering task to happen in the background\n\n      // to eventually store the rendered result in the cache.\n      this.fallbackToCsr(response, filePath, callback);\n    }\n\n    const renderingKey = this.getRenderingKey(request);\n    const renderCallback: SsrCallbackFn = (err, html): void => {\n      if (requestTimeout) {\n        // if request is still waiting for render, return it\n        clearTimeout(requestTimeout);\n        callback(err, html);\n\n        this.log(\n          `Request is resolved with the SSR rendering result (${request?.originalUrl})`,\n          true,\n          { request }\n        );\n\n        // store the render only if caching is enabled\n        if (this.ssrOptions?.cache) {\n          this.renderingCache.store(renderingKey, err, html);\n        } else {\n          this.renderingCache.clear(renderingKey);\n        }\n      } else {\n        // store the render for future use\n        this.renderingCache.store(renderingKey, err, html);\n      }\n    };\n\n    this.handleRender({\n      filePath,\n      options,\n      renderCallback,\n      request,\n    });\n  }\n\n  protected log(\n    message: string,\n    debug = true,\n    //CXSPA-3680 - in a new major, let's make this argument required\n    context?: ExpressServerLoggerContext\n  ): void {\n    if (debug || this.ssrOptions?.debug) {\n      this.logger.log(message, context || {});\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  protected getDocument(filePath: string): string {\n    let doc = this.templateCache.get(filePath);\n\n    if (!doc) {\n      doc = fs.readFileSync(filePath, 'utf-8');\n      this.templateCache.set(filePath, doc);\n    }\n\n    return doc;\n  }\n\n  /**\n   * Delegates the render to the original _Angular Universal express engine_.\n   *\n   * In case when the config `reuseCurrentRendering` is enabled and **if there is already a pending\n   * render task for the same rendering key**, it doesn't delegate a new render to Angular Universal.\n   * Instead, it waits for the current rendering to complete and then reuse the result for all waiting requests.\n   */\n  private handleRender({\n    filePath,\n    options,\n    renderCallback,\n    request,\n  }: {\n    filePath: string;\n    options: any;\n    renderCallback: SsrCallbackFn;\n    request: Request;\n  }): void {\n    if (!this.ssrOptions?.reuseCurrentRendering) {\n      this.startRender({\n        filePath,\n        options,\n        renderCallback,\n        request,\n      });\n      return;\n    }\n\n    const renderingKey = this.getRenderingKey(request);\n    if (!this.renderCallbacks.has(renderingKey)) {\n      this.renderCallbacks.set(renderingKey, []);\n    }\n    this.renderCallbacks.get(renderingKey)?.push(renderCallback);\n\n    if (!this.renderingCache.isRendering(renderingKey)) {\n      this.startRender({\n        filePath,\n        options,\n        request,\n        renderCallback: (err, html) => {\n          // Share the result of the render with all awaiting requests for the same key:\n\n          // Note: we access the Map at the moment of the render finished (don't store value in a local variable),\n          //       because in the meantime something might have deleted the value (i.e. when `maxRenderTime` passed).\n          this.renderCallbacks\n            .get(renderingKey)\n            ?.forEach((cb) => cb(err, html)); // pass the shared result to all waiting rendering callbacks\n          this.renderCallbacks.delete(renderingKey);\n        },\n      });\n    }\n\n    this.log(\n      `Request is waiting for the SSR rendering to complete (${request?.originalUrl})`,\n      true,\n      { request }\n    );\n  }\n\n  /**\n   * Delegates the render to the original _Angular Universal express engine_.\n   *\n   * There is no way to abort the running render of Angular Universal.\n   * So if the render doesn't complete in the configured `maxRenderTime`,\n   * we just consider the render task as hanging (note: it's a potential memory leak!).\n   * Later on, even if the render completes somewhen in the future, we will ignore\n   * its result.\n   */\n  private startRender({\n    filePath,\n    options,\n    renderCallback,\n    request,\n  }: {\n    filePath: string;\n    options: any;\n    renderCallback: SsrCallbackFn;\n    request: Request;\n  }): void {\n    const renderingKey = this.getRenderingKey(request);\n\n    // Setting the timeout for hanging renders that might not ever finish due to various reasons.\n    // After the configured `maxRenderTime` passes, we consider the rendering task as hanging,\n    // and release the concurrency slot and forget all callbacks waiting for the render's result.\n    let maxRenderTimeout: ReturnType<typeof setTimeout> | undefined =\n      setTimeout(() => {\n        this.renderingCache.clear(renderingKey);\n        maxRenderTimeout = undefined;\n        this.currentConcurrency--;\n        if (this.ssrOptions?.reuseCurrentRendering) {\n          this.renderCallbacks.delete(renderingKey);\n        }\n        this.log(\n          `Rendering of ${request?.originalUrl} was not able to complete. This might cause memory leaks!`,\n          false,\n          { request }\n        );\n      }, this.ssrOptions?.maxRenderTime ?? 300000); // 300000ms == 5 minutes\n\n    this.log(`Rendering started (${request?.originalUrl})`, true, { request });\n    this.renderingCache.setAsRendering(renderingKey);\n    this.currentConcurrency++;\n\n    options = {\n      ...options,\n      providers: [\n        {\n          provide: EXPRESS_SERVER_LOGGER,\n          useValue: this.logger,\n        },\n      ],\n    };\n\n    this.expressEngine(filePath, options, (err, html) => {\n      if (!maxRenderTimeout) {\n        // ignore this render's result because it exceeded maxRenderTimeout\n        this.log(\n          `Rendering of ${request.originalUrl} completed after the specified maxRenderTime, therefore it was ignored.`,\n          false,\n          { request }\n        );\n        return;\n      }\n      clearTimeout(maxRenderTimeout);\n\n      this.log(`Rendering completed (${request?.originalUrl})`, true, {\n        request,\n      });\n      this.currentConcurrency--;\n\n      renderCallback(err, html);\n    });\n  }\n\n  //CXSPA-3680 - remove this method in 7.0\n  private initLogger(ssrOptions: SsrOptimizationOptions | undefined) {\n    if (ssrOptions?.logger === true) {\n      return new DefaultExpressServerLogger();\n    }\n    return ssrOptions?.logger || new LegacyExpressServerLogger();\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { inject } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN } from '@spartacus/core';\nimport { ServerOptions } from './model';\n\n/**\n * Returns a factory function which resolves the server request origin.\n */\nexport function serverRequestOriginFactory(options?: ServerOptions): Function {\n  return (): string => {\n    const serverRequestOrigin = inject(SERVER_REQUEST_ORIGIN, {\n      optional: true,\n      skipSelf: true,\n    });\n\n    // usually prerendering mode, but can be SSR\n    if (options?.serverRequestOrigin) {\n      return options.serverRequestOrigin;\n    }\n\n    // SSR mode, from express engine\n    if (serverRequestOrigin) {\n      return serverRequestOrigin;\n    }\n\n    throw new Error(\n      `The request origin is not set. \n    If you are using the default environment variable, please specify it when initiating the process.\n    \n    E.g.\n    > SERVER_REQUEST_ORIGIN=https://my.domain.com yarn prerender\n    > SERVER_REQUEST_ORIGIN=http://localhost:4200 yarn serve:ssr\n    \n    \n    Alternatively, you can pass it as an argument to provideServer\n    function, but beware it will be used for server-side rendering as well.\n    \n    E.g.\n    @NgModule({\n      // ...\n      providers: [\n        provideServer({\n          serverRequestOrigin: 'https://my.domain.com',\n        }),\n      ],\n    })\n    export class AppServerModule {}`\n    );\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { inject } from '@angular/core';\nimport { INITIAL_CONFIG } from '@angular/platform-server';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from '@spartacus/core';\nimport { ServerOptions } from './model';\n\n/**\n * Returns a factory function which resolves the server request URL.\n */\nexport function serverRequestUrlFactory(options?: ServerOptions): Function {\n  return (): string => {\n    const platformConfig = inject(INITIAL_CONFIG);\n    const serverRequestOrigin = inject(SERVER_REQUEST_ORIGIN);\n    const serverRequestUrl = inject(SERVER_REQUEST_URL, {\n      optional: true,\n      skipSelf: true,\n    });\n\n    // SSR mode\n    if (serverRequestUrl) {\n      // should override the automatically recognized origin\n      if (options?.serverRequestOrigin) {\n        return serverRequestUrl.replace(\n          serverRequestOrigin,\n          options.serverRequestOrigin\n        );\n      }\n\n      return serverRequestUrl;\n    }\n\n    // prerendering mode (no express server)\n    return serverRequestOrigin + platformConfig.url;\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { StaticProvider } from '@angular/core';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport {\n  LoggerService,\n  SERVER_REQUEST_ORIGIN,\n  SERVER_REQUEST_URL,\n} from '@spartacus/core';\nimport { getRequestOrigin } from '../express-utils/express-request-origin';\nimport { getRequestUrl } from '../express-utils/express-request-url';\nimport { serverLoggerServiceFactory } from '../logger';\nimport { ServerOptions } from './model';\nimport { serverRequestOriginFactory } from './server-request-origin';\nimport { serverRequestUrlFactory } from './server-request-url';\n\n/**\n * Returns the providers used for SSR and pre-rendering processes.\n */\nexport function provideServer(options?: ServerOptions): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useFactory: serverRequestOriginFactory(options),\n    },\n    {\n      provide: SERVER_REQUEST_URL,\n      useFactory: serverRequestUrlFactory(options),\n    },\n    {\n      provide: LoggerService,\n      useFactory: serverLoggerServiceFactory,\n    },\n  ];\n}\n/**\n * Returns Spartacus providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useFactory: getRequestOrigin,\n      deps: [REQUEST],\n    },\n    {\n      provide: SERVER_REQUEST_URL,\n      useFactory: getRequestUrl,\n      deps: [REQUEST],\n    },\n  ];\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgSetupOptions } from '@nguniversal/express-engine';\nimport {\n  OptimizedSsrEngine,\n  SsrCallbackFn,\n} from '../optimized-engine/optimized-ssr-engine';\nimport {\n  SsrOptimizationOptions,\n  defaultSsrOptimizationOptions,\n} from '../optimized-engine/ssr-optimization-options';\nimport { getServerRequestProviders } from '../providers/ssr-providers';\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: object,\n  callback: SsrCallbackFn\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: Readonly<NgSetupOptions>\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(\n    ngExpressEngine: NgExpressEngine,\n    optimizationOptions?: SsrOptimizationOptions | null\n  ): NgExpressEngine {\n    return decorateExpressEngine(ngExpressEngine, optimizationOptions);\n  }\n}\n\nexport function decorateExpressEngine(\n  ngExpressEngine: NgExpressEngine,\n  optimizationOptions:\n    | SsrOptimizationOptions\n    | null\n    | undefined = defaultSsrOptimizationOptions\n): NgExpressEngine {\n  return function (setupOptions: NgSetupOptions) {\n    const engineInstance = ngExpressEngine({\n      ...setupOptions,\n      providers: [\n        // add spartacus related providers\n        ...getServerRequestProviders(),\n        ...(setupOptions.providers ?? []),\n      ],\n    });\n\n    // apply optimization wrapper if optimization options were defined\n    return optimizationOptions\n      ? new OptimizedSsrEngine(engineInstance, optimizationOptions)\n          .engineInstance\n      : engineInstance;\n  };\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { NgExpressEngineDecorator } from './ng-express-engine-decorator';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './optimized-ssr-engine';\nexport * from './rendering-cache';\nexport * from './rendering-strategy-resolver';\nexport * from './rendering-strategy-resolver-options';\nexport { RequestContext, getRequestContext } from './request-context';\nexport * from './ssr-optimization-options';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Server options\n */\nexport interface ServerOptions {\n  /**\n   * Specify a domain (origin) from which the HTTP requests are being made.\n   * Should be without the trailing slash, e.g. \"https://my.domain.com\".\n   *\n   * In SSR mode, it will be automatically resolved from the express server,\n   * therefore it doesn't have to be set via this option.\n   * If explicitly set, this option will take precedence over the express server.\n   *\n   * It is _mandatory_ to provide it for the prerendering, as it can not be\n   * automatically resolved.\n   */\n  serverRequestOrigin?: string;\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './model';\nexport * from './ssr-providers';\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './engine-decorator/index';\nexport * from './logger/index';\nexport * from './optimized-engine/index';\nexport * from './providers/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}