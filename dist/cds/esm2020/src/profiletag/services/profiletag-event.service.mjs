/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID, inject, } from '@angular/core';
import { LoggerService } from '@spartacus/core';
import { BehaviorSubject, Subscription, fromEvent, merge, } from 'rxjs';
import { distinctUntilChanged, filter, map, shareReplay, take, tap, } from 'rxjs/operators';
import { InternalProfileTagEventNames, } from '../model/profile-tag.model';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../config/index";
export class ProfileTagEventService {
    constructor(winRef, config, baseSiteService, platform) {
        this.winRef = winRef;
        this.config = config;
        this.baseSiteService = baseSiteService;
        this.platform = platform;
        this.subscription = new Subscription();
        this.profileTagDebug = false;
        this.profileTagEvents$ = merge(this.setConsentReference(), this.debugModeChanged());
        this.logger = inject(LoggerService);
        this.initWindow();
        this.setConsentReferenceFromLocalStorage();
    }
    setConsentReferenceFromLocalStorage() {
        if (this.winRef.isBrowser() && this.winRef.localStorage) {
            const profileTagMetadata = JSON.parse(this.winRef.localStorage.getItem('profiletag') || '{"cr":{}}');
            this.subscription.add(this.baseSiteService
                .getActive()
                .pipe(take(1))
                .subscribe((baseSite) => {
                this.latestConsentReference = new BehaviorSubject(profileTagMetadata.cr[`${baseSite}-consentReference`]?.consentReference);
            }));
        }
    }
    getProfileTagEvents() {
        return this.profileTagEvents$;
    }
    getConsentReference() {
        if (!this.consentReference$) {
            this.consentReference$ = fromEvent(this.winRef.nativeWindow, InternalProfileTagEventNames.CONSENT_REFERENCE_LOADED).pipe(map((event) => event), map((event) => event.detail.consentReference), shareReplay(1));
        }
        return this.consentReference$;
    }
    handleConsentWithdrawn() {
        this.consentReference$ = null;
        this.latestConsentReference.next(null);
    }
    addTracker() {
        return this.baseSiteService.getActive().pipe(filter(() => isPlatformBrowser(this.platform)), filter((siteId) => Boolean(siteId)), distinctUntilChanged(), tap(() => this.addScript()), tap((siteId) => this.createConfig(siteId)));
    }
    notifyProfileTagOfEventOccurrence(event) {
        try {
            this.profileTagWindow.Y_TRACKING.eventLayer.push(event);
        }
        catch (e) {
            this.logger.log(`Unexpected error when calling profiletag push method ${e}`);
        }
    }
    setConsentReference() {
        return this.getConsentReference().pipe(tap((consentReference) => this.latestConsentReference.next(consentReference)));
    }
    debugModeChanged() {
        return fromEvent(this.winRef.nativeWindow, InternalProfileTagEventNames.DEBUG_FLAG_CHANGED).pipe(map((event) => event), tap((event) => (this.profileTagDebug = event.detail.debug)));
    }
    createConfig(siteId) {
        const newConfig = {
            ...this.config.cds.profileTag,
            tenant: this.config.cds.tenant,
            siteId,
            spa: true,
        };
        this.exposeConfig(newConfig);
    }
    /*
     * Checks if the script with the given source exists in the document or not.
     */
    isScriptLoaded(scriptSource) {
        return !!this.winRef.document.querySelector(`script[src="${scriptSource}"]`);
    }
    addScript() {
        if (this.isScriptLoaded(this.config.cds.profileTag.javascriptUrl)) {
            return;
        }
        const profileTagScript = this.winRef.document.createElement('script');
        profileTagScript.type = 'text/javascript';
        profileTagScript.async = true;
        profileTagScript.src = this.config.cds.profileTag.javascriptUrl;
        this.winRef.document
            .getElementsByTagName('head')[0]
            .appendChild(profileTagScript);
    }
    initWindow() {
        if (!isPlatformBrowser(this.platform)) {
            return;
        }
        this.profileTagWindow = this.winRef.nativeWindow;
        this.profileTagWindow.Y_TRACKING = this.profileTagWindow.Y_TRACKING || {};
        this.profileTagWindow.Y_TRACKING.eventLayer =
            this.profileTagWindow.Y_TRACKING.eventLayer || [];
    }
    exposeConfig(options) {
        const q = this.profileTagWindow.Y_TRACKING.q || [];
        if (q.length !== 0) {
            return;
        }
        q.push([options]);
        this.profileTagWindow.Y_TRACKING.q = q;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ProfileTagEventService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProfileTagEventService, deps: [{ token: i1.WindowRef }, { token: i2.CdsConfig }, { token: i1.BaseSiteService }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
ProfileTagEventService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProfileTagEventService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ProfileTagEventService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.WindowRef }, { type: i2.CdsConfig }, { type: i1.BaseSiteService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,