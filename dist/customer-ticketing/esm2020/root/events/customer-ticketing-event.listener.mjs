/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { CurrencySetEvent, GlobalMessageType, LanguageSetEvent, LoginEvent, LogoutEvent, } from '@spartacus/core';
import { merge, Subscription } from 'rxjs';
import { GetTicketAssociatedObjectsQueryResetEvent, GetTicketCategoryQueryResetEvent, GetTicketQueryReloadEvent, GetTicketQueryResetEvent, GetTicketsQueryReloadEvents, GetTicketsQueryResetEvents, NewMessageEvent, TicketClosedEvent, TicketCreatedEvent, TicketReopenedEvent, UploadAttachmentSuccessEvent, } from './customer-ticketing.events';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class CustomerTicketingEventListener {
    constructor(eventService, globalMessageService) {
        this.eventService = eventService;
        this.globalMessageService = globalMessageService;
        this.subscriptions = new Subscription();
        this.onLanguageAndCurrencySetEvent();
        this.onLoginAndLogoutEvent();
        this.onTicketCreatedEvent();
        this.onNewMessage();
        this.onTicketClosed();
        this.onTicketReopened();
        this.onUploadAttachmentSucess();
    }
    onTicketCreatedEvent() {
        this.subscriptions.add(this.eventService.get(TicketCreatedEvent).subscribe(() => {
            this.globalMessageService.add({
                key: 'createCustomerTicket.ticketCreated',
            }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.eventService.dispatch({}, GetTicketsQueryReloadEvents);
        }));
    }
    onLanguageAndCurrencySetEvent() {
        this.subscriptions.add(merge(this.eventService.get(LanguageSetEvent), this.eventService.get(CurrencySetEvent)).subscribe(() => {
            this.eventService.dispatch({}, GetTicketsQueryReloadEvents);
            this.eventService.dispatch({}, GetTicketQueryReloadEvent);
        }));
    }
    onLoginAndLogoutEvent() {
        this.subscriptions.add(merge(this.eventService.get(LogoutEvent), this.eventService.get(LoginEvent)).subscribe(() => {
            this.eventService.dispatch({}, GetTicketQueryResetEvent);
            this.eventService.dispatch({}, GetTicketsQueryResetEvents);
            this.eventService.dispatch({}, GetTicketCategoryQueryResetEvent);
            this.eventService.dispatch({}, GetTicketAssociatedObjectsQueryResetEvent);
        }));
    }
    onNewMessage() {
        this.subscriptions.add(this.eventService.get(NewMessageEvent).subscribe(() => {
            this.eventService.dispatch({}, GetTicketQueryReloadEvent);
        }));
    }
    onTicketClosed() {
        this.subscriptions.add(this.eventService.get(TicketClosedEvent).subscribe(() => {
            this.eventService.dispatch({}, GetTicketQueryResetEvent);
            this.globalMessageService.add({
                key: 'customerTicketingDetails.requestClosed',
            }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }));
    }
    onTicketReopened() {
        this.subscriptions.add(this.eventService.get(TicketReopenedEvent).subscribe(() => {
            this.eventService.dispatch({}, GetTicketQueryReloadEvent);
            this.globalMessageService.add({
                key: 'customerTicketingDetails.requestReopened',
            }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
        }));
    }
    onUploadAttachmentSucess() {
        this.subscriptions.add(this.eventService.get(UploadAttachmentSuccessEvent).subscribe(() => {
            this.eventService.dispatch({}, GetTicketQueryReloadEvent);
        }));
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
CustomerTicketingEventListener.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingEventListener, deps: [{ token: i1.EventService }, { token: i1.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
CustomerTicketingEventListener.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingEventListener, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingEventListener, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.EventService }, { type: i1.GlobalMessageService }]; } });
//# sourceMappingURL=data:application/json;base64,