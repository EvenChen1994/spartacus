/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Component } from '@angular/core';
import { FormUtils } from '@spartacus/storefront';
import { CustomerTicketingDialogComponent } from '../../../shared/customer-ticketing-dialog/customer-ticketing-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/forms";
import * as i4 from "@spartacus/core";
export class CustomerTicketingReopenDialogComponent extends CustomerTicketingDialogComponent {
    ngOnInit() {
        this.buildForm();
    }
    reopenRequest() {
        if (this.form.invalid) {
            this.form.markAllAsTouched();
            FormUtils.deepUpdateValueAndValidity(this.form);
        }
        else {
            const mustWaitForAttachment = this.form.get('file')?.value?.length > 0 ?? false;
            this.isDataLoading$.next(true);
            this.subscription = this.customerTicketingFacade
                .createTicketEvent(this.prepareTicketEvent(), mustWaitForAttachment)
                .subscribe({
                next: (createdEvent) => {
                    if (this.form.get('file')?.value?.length && createdEvent.code) {
                        this.customerTicketingFacade.uploadAttachment(this.form.get('file')?.value?.item(0), createdEvent.code);
                    }
                },
                complete: () => {
                    this.onComplete();
                },
                error: () => {
                    this.onError();
                },
            });
        }
    }
    onComplete() {
        this.isDataLoading$.next(false);
        this.close('Ticket reopened successfully');
    }
    onError() {
        this.isDataLoading$.next(false);
        this.close('Something went wrong while reopening ticket');
    }
    prepareTicketEvent() {
        return {
            message: this.form?.get('message')?.value,
            toStatus: {
                id: "INPROCESS" /* STATUS.INPROCESS */,
                name: "INPROCESS" /* STATUS_NAME.INPROCESS */,
            },
        };
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
CustomerTicketingReopenDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingReopenDialogComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
CustomerTicketingReopenDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: CustomerTicketingReopenDialogComponent, selector: "cx-customer-ticketing-reopen-dialog", usesInheritance: true, ngImport: i0, template: "<div\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"close('Escape clicked')\"\n  class=\"cx-customer-ticket-form-dialog\"\n>\n  <form [formGroup]=\"form\" class=\"cx-customer-ticket-form-container\">\n    <div class=\"modal-header cx-customer-ticket-form-header\">\n      <div class=\"cx-customer-ticket-form-title modal-title\">\n        {{ 'customerTicketingDetails.reopenRequest' | cxTranslate }}\n      </div>\n      <button\n        (click)=\"close('Close Reopen Request Dialog')\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        class=\"cx-customer-ticket-form-close close\"\n        type=\"button\"\n      >\n        <span aria-hidden=\"true\">\n          <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n        </span>\n      </button>\n    </div>\n\n    <div class=\"cx-customer-ticket-form-body\">\n      <div class=\"cx-customer-ticket-form-row\">\n        <label>\n          <span class=\"cx-customer-ticket-label label-content\">\n            {{ 'customerTicketing.message' | cxTranslate }}\n          </span>\n          <textarea\n            [maxLength]=\"inputCharactersLimit\"\n            class=\"form-control\"\n            formControlName=\"message\"\n            rows=\"5\"\n          ></textarea>\n\n          <cx-form-errors [control]=\"form.get('message')\"></cx-form-errors>\n\n          <p class=\"cx-customer-ticket-input-hint\">\n            {{\n              'customerTicketing.charactersLeft'\n                | cxTranslate: { count: messagesCharacterLeft }\n            }}\n          </p>\n        </label>\n      </div>\n\n      <div>\n        <cx-file-upload\n          [formControl]=\"$any(form.get('file'))\"\n          [accept]=\"allowedTypes\"\n        >\n          <ng-template>\n            <cx-icon [type]=\"iconTypes.UPLOAD\"></cx-icon>\n            <span class=\"cx-message-footer-text\">{{\n              'customerTicketing.uploadFile' | cxTranslate\n            }}</span>\n          </ng-template>\n        </cx-file-upload>\n\n        <p class=\"cx-customer-ticket-file-upload-hint\">\n          {{\n            'customerTicketing.fileSizeLimit' | cxTranslate: { count: maxSize }\n          }}\n        </p>\n        <p class=\"cx-customer-ticket-file-upload-hint\">\n          {{ 'customerTicketing.maximumAttachment' | cxTranslate }}\n        </p>\n\n        <cx-form-errors\n          [control]=\"form.get('file')\"\n          prefix=\"formErrors.file\"\n        ></cx-form-errors>\n      </div>\n\n      <div class=\"cx-customer-ticket-form-footer\">\n        <button\n          (click)=\"close('Close Reopen Request Dialog')\"\n          class=\"btn btn-secondary\"\n          type=\"button\"\n        >\n          {{ 'customerTicketing.cancel' | cxTranslate }}\n        </button>\n        <button (click)=\"reopenRequest()\" class=\"btn btn-primary\" type=\"button\">\n          {{ 'customerTicketing.submit' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n    <cx-spinner *ngIf=\"isDataLoading$ | async\" class=\"overlay\"></cx-spinner>\n  </form>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { kind: "directive", type: i2.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: i2.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { kind: "component", type: i2.FileUploadComponent, selector: "cx-file-upload", inputs: ["accept", "multiple"], outputs: ["update"] }, { kind: "component", type: i2.SpinnerComponent, selector: "cx-spinner" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.TranslatePipe, name: "cxTranslate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingReopenDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cx-customer-ticketing-reopen-dialog', template: "<div\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"close('Escape clicked')\"\n  class=\"cx-customer-ticket-form-dialog\"\n>\n  <form [formGroup]=\"form\" class=\"cx-customer-ticket-form-container\">\n    <div class=\"modal-header cx-customer-ticket-form-header\">\n      <div class=\"cx-customer-ticket-form-title modal-title\">\n        {{ 'customerTicketingDetails.reopenRequest' | cxTranslate }}\n      </div>\n      <button\n        (click)=\"close('Close Reopen Request Dialog')\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        class=\"cx-customer-ticket-form-close close\"\n        type=\"button\"\n      >\n        <span aria-hidden=\"true\">\n          <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n        </span>\n      </button>\n    </div>\n\n    <div class=\"cx-customer-ticket-form-body\">\n      <div class=\"cx-customer-ticket-form-row\">\n        <label>\n          <span class=\"cx-customer-ticket-label label-content\">\n            {{ 'customerTicketing.message' | cxTranslate }}\n          </span>\n          <textarea\n            [maxLength]=\"inputCharactersLimit\"\n            class=\"form-control\"\n            formControlName=\"message\"\n            rows=\"5\"\n          ></textarea>\n\n          <cx-form-errors [control]=\"form.get('message')\"></cx-form-errors>\n\n          <p class=\"cx-customer-ticket-input-hint\">\n            {{\n              'customerTicketing.charactersLeft'\n                | cxTranslate: { count: messagesCharacterLeft }\n            }}\n          </p>\n        </label>\n      </div>\n\n      <div>\n        <cx-file-upload\n          [formControl]=\"$any(form.get('file'))\"\n          [accept]=\"allowedTypes\"\n        >\n          <ng-template>\n            <cx-icon [type]=\"iconTypes.UPLOAD\"></cx-icon>\n            <span class=\"cx-message-footer-text\">{{\n              'customerTicketing.uploadFile' | cxTranslate\n            }}</span>\n          </ng-template>\n        </cx-file-upload>\n\n        <p class=\"cx-customer-ticket-file-upload-hint\">\n          {{\n            'customerTicketing.fileSizeLimit' | cxTranslate: { count: maxSize }\n          }}\n        </p>\n        <p class=\"cx-customer-ticket-file-upload-hint\">\n          {{ 'customerTicketing.maximumAttachment' | cxTranslate }}\n        </p>\n\n        <cx-form-errors\n          [control]=\"form.get('file')\"\n          prefix=\"formErrors.file\"\n        ></cx-form-errors>\n      </div>\n\n      <div class=\"cx-customer-ticket-form-footer\">\n        <button\n          (click)=\"close('Close Reopen Request Dialog')\"\n          class=\"btn btn-secondary\"\n          type=\"button\"\n        >\n          {{ 'customerTicketing.cancel' | cxTranslate }}\n        </button>\n        <button (click)=\"reopenRequest()\" class=\"btn btn-primary\" type=\"button\">\n          {{ 'customerTicketing.submit' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n    <cx-spinner *ngIf=\"isDataLoading$ | async\" class=\"overlay\"></cx-spinner>\n  </form>\n</div>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,