/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
import { Injectable } from '@angular/core';
import { CommandStrategy, } from '@spartacus/core';
import { GetTicketAssociatedObjectsQueryReloadEvent, GetTicketAssociatedObjectsQueryResetEvent, GetTicketCategoryQueryReloadEvent, GetTicketCategoryQueryResetEvent, GetTicketQueryReloadEvent, GetTicketQueryResetEvent, GetTicketsQueryReloadEvents, GetTicketsQueryResetEvents, NewMessageEvent, TicketClosedEvent, TicketCreatedEvent, TicketReopenedEvent, UploadAttachmentSuccessEvent, } from '@spartacus/customer-ticketing/root';
import { combineLatest, of, throwError } from 'rxjs';
import { concatMap, distinctUntilChanged, map, switchMap, take, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../connectors/customer-ticketing.connector";
export class CustomerTicketingService {
    getTicketCategoriesQueryReloadEvents() {
        return [GetTicketCategoryQueryReloadEvent];
    }
    getTicketCategoriesQueryResetEvents() {
        return [GetTicketCategoryQueryResetEvent];
    }
    getTicketAssociatedObjectsQueryReloadEvents() {
        return [GetTicketAssociatedObjectsQueryReloadEvent];
    }
    getTicketAssociatedObjectsQueryResetEvents() {
        return [GetTicketAssociatedObjectsQueryResetEvent];
    }
    getTicketQueryReloadEvents() {
        return [GetTicketQueryReloadEvent];
    }
    getTicketQueryResetEvents() {
        return [GetTicketQueryResetEvent];
    }
    getTicketsQueryReloadEvents() {
        return [GetTicketsQueryReloadEvents];
    }
    getTicketsQueryResetEvents() {
        return [GetTicketsQueryResetEvents];
    }
    getTicketsQuery$(pageSize, currentPage, sort) {
        return this.queryService.create(() => this.customerTicketingListPreConditions().pipe(switchMap((customerId) => this.customerTicketingConnector.getTickets(customerId, pageSize, currentPage, sort))), {
            reloadOn: this.getTicketsQueryReloadEvents(),
            resetOn: this.getTicketsQueryResetEvents(),
        });
    }
    customerTicketingPreConditions() {
        return combineLatest([
            this.userIdService.getUserId(),
            this.routingService.getParams().pipe(map((params) => params.ticketCode), distinctUntilChanged()),
        ]).pipe(take(1), map(([userId, ticketId]) => {
            if (!userId) {
                throw new Error('Customer ticketing pre conditions not met');
            }
            return [userId, ticketId];
        }));
    }
    customerTicketingListPreConditions() {
        return this.userIdService.getUserId().pipe(take(1), map((userId) => {
            if (!userId) {
                throw new Error('Customer ticketing list pre conditions not met');
            }
            return userId;
        }));
    }
    constructor(queryService, commandService, userIdService, customerTicketingConnector, routingService, eventService) {
        this.queryService = queryService;
        this.commandService = commandService;
        this.userIdService = userIdService;
        this.customerTicketingConnector = customerTicketingConnector;
        this.routingService = routingService;
        this.eventService = eventService;
        this.createTicketCommand = this.commandService.create((ticketStarted) => this.customerTicketingPreConditions().pipe(switchMap(([customerId]) => this.customerTicketingConnector.createTicket(customerId, ticketStarted)), tap(() => {
            this.eventService.dispatch({}, TicketCreatedEvent);
        })), {
            strategy: CommandStrategy.Queue,
        });
        this.createTicketEventCommand = this.commandService.create((payload) => this.customerTicketingPreConditions().pipe(switchMap(([customerId, ticketId]) => this.customerTicketingConnector
            .createTicketEvent(customerId, ticketId, payload.ticketEvent)
            .pipe(tap(() => {
            if (payload.ticketEvent.toStatus?.id === "CLOSED" /* STATUS.CLOSED */) {
                this.eventService.dispatch({}, TicketClosedEvent);
            }
            else if (!payload.containsAttachment) {
                if (payload.ticketEvent.toStatus?.id === "OPEN" /* STATUS.OPEN */ ||
                    payload.ticketEvent.toStatus?.id === "INPROCESS" /* STATUS.INPROCESS */) {
                    this.eventService.dispatch({}, TicketReopenedEvent);
                }
                else {
                    this.eventService.dispatch({}, NewMessageEvent);
                }
            }
        })))), {
            strategy: CommandStrategy.Queue,
        });
        this.uploadAttachmentCommand = this.commandService.create((payload) => this.customerTicketingPreConditions().pipe(switchMap(([customerId, ticketId]) => this.customerTicketingConnector
            .uploadAttachment(customerId, payload.ticketId ?? ticketId, payload.eventCode, payload.file)
            .pipe(tap(() => this.eventService.dispatch({}, UploadAttachmentSuccessEvent))))), {
            strategy: CommandStrategy.Queue,
        });
        this.downloadAttachmentCommand = this.commandService.create((payload) => this.customerTicketingPreConditions().pipe(switchMap(([customerId, ticketId]) => this.customerTicketingConnector.downloadAttachment(customerId, ticketId, payload.eventCode, payload.attachmentId))), {
            strategy: CommandStrategy.Queue,
        });
        this.getTicketQuery$ = this.queryService.create(() => this.customerTicketingPreConditions().pipe(switchMap(([customerId, ticketId]) => this.customerTicketingConnector.getTicket(customerId, ticketId))), {
            reloadOn: this.getTicketQueryReloadEvents(),
            resetOn: this.getTicketQueryResetEvents(),
        });
        this.getTicketCategoriesQuery = this.queryService.create(() => this.customerTicketingConnector.getTicketCategories(), {
            reloadOn: this.getTicketCategoriesQueryReloadEvents(),
            resetOn: this.getTicketCategoriesQueryResetEvents(),
        });
        this.getTicketAssociatedObjectsQuery = this.queryService.create(() => this.customerTicketingPreConditions().pipe(switchMap(([customerId]) => this.customerTicketingConnector.getTicketAssociatedObjects(customerId))), {
            reloadOn: this.getTicketAssociatedObjectsQueryReloadEvents(),
            resetOn: this.getTicketAssociatedObjectsQueryResetEvents(),
        });
    }
    getTicketAssociatedObjectsState() {
        return this.getTicketAssociatedObjectsQuery.getState();
    }
    getTicketAssociatedObjects() {
        return this.getTicketAssociatedObjectsState().pipe(concatMap((state) => state?.error ? throwError(state.error) : of(state)), map((state) => state.data ?? []));
    }
    getTicketCategoriesState() {
        return this.getTicketCategoriesQuery.getState();
    }
    getTicketCategories() {
        return this.getTicketCategoriesState().pipe(map((state) => state.data ?? []));
    }
    getTicketState() {
        return this.getTicketQuery$.getState();
    }
    getTicket() {
        return this.getTicketState().pipe(map((state) => state.data));
    }
    createTicket(ticketStarted) {
        return this.createTicketCommand.execute(ticketStarted);
    }
    getTicketsState(pageSize, currentPage, sort) {
        return this.getTicketsQuery$(pageSize, currentPage, sort).getState();
    }
    getTickets(pageSize, currentPage, sort) {
        return this.getTicketsState(pageSize, currentPage, sort).pipe(map((state) => state.data));
    }
    createTicketEvent(ticketEvent, containsAttachment = false) {
        return this.createTicketEventCommand.execute({
            ticketEvent,
            containsAttachment,
        });
    }
    uploadAttachment(file, eventCode, ticketId) {
        return this.uploadAttachmentCommand.execute({ file, eventCode, ticketId });
    }
    downloadAttachment(eventCode, attachmentId) {
        return this.downloadAttachmentCommand.execute({ eventCode, attachmentId });
    }
}
CustomerTicketingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingService, deps: [{ token: i1.QueryService }, { token: i1.CommandService }, { token: i1.UserIdService }, { token: i2.CustomerTicketingConnector }, { token: i1.RoutingService }, { token: i1.EventService }], target: i0.ɵɵFactoryTarget.Injectable });
CustomerTicketingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: CustomerTicketingService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.QueryService }, { type: i1.CommandService }, { type: i1.UserIdService }, { type: i2.CustomerTicketingConnector }, { type: i1.RoutingService }, { type: i1.EventService }]; } });
//# sourceMappingURL=data:application/json;base64,