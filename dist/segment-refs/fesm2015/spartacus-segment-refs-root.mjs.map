{"version":3,"file":"spartacus-segment-refs-root.mjs","sources":["../../../integration-libs/segment-refs/root/config/default-segment-refs-config.ts","../../../integration-libs/segment-refs/root/config/segment-refs-config.ts","../../../integration-libs/segment-refs/root/http-interceptors/occ-segment-refs.interceptor.ts","../../../integration-libs/segment-refs/root/http-interceptors/index.ts","../../../integration-libs/segment-refs/root/segment-refs-root.module.ts","../../../integration-libs/segment-refs/root/public_api.ts","../../../integration-libs/segment-refs/root/spartacus-segment-refs-root.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SegmentRefsConfig } from './segment-refs-config';\n\nexport const defaultSegmentRefsConfig: SegmentRefsConfig = {\n  segmentRefs: {\n    httpHeaderName: 'Segmentrefs',\n  },\n};\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class SegmentRefsConfig {\n  segmentRefs?: {\n    httpHeaderName: string;\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends SegmentRefsConfig {}\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable, inject, isDevMode } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoggerService, OccEndpointsService, WindowRef } from '@spartacus/core';\nimport { SegmentRefsConfig } from '../config/segment-refs-config';\n\n@Injectable({ providedIn: 'root' })\nexport class OccSegmentRefsInterceptor implements HttpInterceptor {\n  private segmentRefs?: string | null;\n  private requestHeader?: string;\n  protected readonly SEGMENT_REFS_KEY = 'segment-refs';\n  protected readonly SEGMENT_REFS_QUERY_PARAM = 'segmentrefs';\n\n  protected logger = inject(LoggerService);\n\n  constructor(\n    protected config: SegmentRefsConfig,\n    protected occEndpoints: OccEndpointsService,\n    protected winRef: WindowRef\n  ) {\n    this.initialize();\n  }\n\n  /**\n   * Fetched the segment reference ID from URL query parameter and saves it into\n   * browser local storage\n   */\n  protected initialize() {\n    const url = this.winRef.location.href ?? '';\n    const queryParams = new URLSearchParams(url.substring(url.indexOf('?')));\n    this.segmentRefs = queryParams.get(this.SEGMENT_REFS_QUERY_PARAM);\n    if (this.segmentRefs) {\n      this.winRef.localStorage?.setItem(\n        this.SEGMENT_REFS_KEY,\n        this.segmentRefs\n      );\n    } else {\n      this.segmentRefs = this.winRef.localStorage?.getItem(\n        this.SEGMENT_REFS_KEY\n      );\n    }\n    if (this.winRef.isBrowser()) {\n      if (!this.config.segmentRefs?.httpHeaderName && isDevMode()) {\n        this.logger.warn(`There is no httpHeaderName configured in Segment`);\n      }\n      this.requestHeader =\n        this.config.segmentRefs?.httpHeaderName?.toLowerCase?.();\n    }\n  }\n\n  /**\n   * Adds a new request header 'Segmentrefs' to the given HTTP request.\n   * @param request The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (\n      this.winRef.isBrowser() &&\n      this.requestHeader &&\n      this.segmentRefs &&\n      request.url.includes(this.occEndpoints.getBaseUrl())\n    ) {\n      request = request.clone({\n        setHeaders: {\n          [this.requestHeader]: this.segmentRefs,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { OccSegmentRefsInterceptor } from './occ-segment-refs.interceptor';\n\nexport const segmentRefsInterceptors: Provider[] = [\n  {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: OccSegmentRefsInterceptor,\n    multi: true,\n  },\n];\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultSegmentRefsConfig } from './config/default-segment-refs-config';\nimport { segmentRefsInterceptors } from './http-interceptors';\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  providers: [\n    ...segmentRefsInterceptors,\n    provideDefaultConfig(defaultSegmentRefsConfig),\n  ],\n})\nexport class SegmentRefsRootModule {}\n","/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from './segment-refs-root.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.SegmentRefsConfig"],"mappings":"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"}